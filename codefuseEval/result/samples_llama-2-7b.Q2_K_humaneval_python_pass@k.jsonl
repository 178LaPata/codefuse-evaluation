{"task_id": "Python/1", "completion_id": 0, "test_code": "import math\nimport unittest\nimport re\nimport sys\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # pylint: disable=E1101,E1103,E0602\n    groups = paren_string.split(' ')\n    output = [s.strip() for s in groups if s != '' and not (s[0] == ')' and s[-1] == '(')]  # type: ignore\n    return output\n    from os import path\n    input_string = path.join(path.dirname(__file__), \"input.txt\").read_text()\n    print(\"Input: \", input_string)\n    print(f\"Output: {separate_paren_groups(input_string)}\")\n\n\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(separate_paren_groups):\n    assert separate_paren_groups('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert separate_paren_groups('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert separate_paren_groups('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n\ncheck(separate_paren_groups)", "generation": "    # pylint: disable=E1101,E1103,E0602\n    groups = paren_string.split(' ')\n    output = [s.strip() for s in groups if s != '' and not (s[0] == ')' and s[-1] == '(')]  # type: ignore\n    return output\nif __name__ == \"__main__\":\n    from os import path\n    input_string = path.join(path.dirname(__file__), \"input.txt\").read_text()\n    print(\"Input: \", input_string)\n    print(f\"Output: {separate_paren_groups(input_string)}\")\n", "result": "failed: AssertionError", "passed": false, "finish": -1, "file": "", "output": []}
