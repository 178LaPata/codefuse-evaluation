{"task_id": "CPP/1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveOcc {\n    /**\n     * * Write a Java function to remove first and last occurrence of a given character from the string.\n     *\n     * > removeOcc(\"hello\", \"l\")\n     * \"heo\"\n     * > removeOcc(\"abcda\", \"a\")\n     * \"bcd\"\n     * > removeOcc(\"PHP\", \"P\")\n     * \"H\"\n     */\n    public static String removeOcc(String s, String ch) {\n{\n        if (s == null || s.length() == 0 || ch == null || ch.length() == 0) {\n            return s;\n        }\n        int index = s.indexOf(ch);\n        if (index == -1) {\n            return s;\n        }\n        int lastIndex = s.lastIndexOf(ch);\n        if (lastIndex == -1) {\n            return s;\n        }\n        return s.substring(0, index) + removeOcc(s.substring(index + ch.length()), ch);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove first and last occurrence of a given character from the string.\n * > removeOcc(string(\"hello\"), string(\"l\"))\n * string(\"heo\")\n * > removeOcc(string(\"abcda\"), string(\"a\"))\n * string(\"bcd\")\n * > removeOcc(string(\"PHP\"), string(\"P\"))\n * string(\"H\")\n */\nstring removeOcc(string s, string ch) {\n    string result = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] != ch[0] && s[i] != ch[ch.size() - 1]) {\n            result += s[i];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeOcc(string(\"hello\"), string(\"l\"));\n    if (!(compare(x0, string(\"heo\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeOcc(string(\"abcda\"), string(\"a\"));\n    if (!(compare(x1, string(\"bcd\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeOcc(string(\"PHP\"), string(\"P\"));\n    if (!(compare(x2, string(\"H\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeOcc", "desc_en": "Write a c++ function to remove first and last occurrence of a given character from the string.", "Difficulty": "mbpp"}
{"task_id": "CPP/2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortMatrix {\n    /**\n     * * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n     *\n     * > sortMatrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n     * [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n     * > sortMatrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\n     * [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n     * > sortMatrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])\n     * [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n     */\n    public static List<List<Integer>> sortMatrix(List<List<Integer>> m) {\n{\n        if (m == null || m.size() == 0) {\n            return null;\n        }\n        List<List<Integer>> res = new ArrayList<List<Integer>>();\n        for (List<Integer> m1 : m) {\n            res.add(m1);\n        }\n        Collections.sort(res, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                int result = 0;\n                for (int i = 0; i < o1.size(); i++) {\n                    result = result + o1.get(i) - o2.get(i);\n                }\n                return result;\n            }\n        });\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}})\n * {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}})\n * {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}\n * > sortMatrix(vector<vector<int>>{{5, 8, 9}, {6, 4, 3}, {2, 1, 4}})\n * {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}\n */\nvector<vector<int>> sortMatrix(vector<vector<int>> m) {\n\n// Sort matrix rows based on their sum.\n    sort(m.begin(), m.end(), [](const vector<int> & a, const vector<int> & b) {\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n    });\n\n    return m;\n}\n", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = sortMatrix(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}});\n    if (!(compare(x0, {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = sortMatrix(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}});\n    if (!(compare(x1, {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = sortMatrix(vector<vector<int>>{{5, 8, 9}, {6, 4, 3}, {2, 1, 4}});\n    if (!(compare(x2, {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sortMatrix", "desc_en": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "Difficulty": "mbpp"}
{"task_id": "CPP/3", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindVolume {\n    /**\n     * * Write a Java function to find the volume of a triangular prism.\n     *\n     * > findVolume(10, 8, 6)\n     * 240\n     * > findVolume(3, 2, 2)\n     * 6\n     * > findVolume(1, 2, 1)\n     * 1\n     */\n    public static int findVolume(int l, int b, int h) {\n{\n        int vol=((l*b*h)/2);\n        return vol;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the volume of a triangular prism.\n * > findVolume(10, 8, 6)\n * 240\n * > findVolume(3, 2, 2)\n * 6\n * > findVolume(1, 2, 1)\n * 1\n */\nint findVolume(int l, int b, int h) {\n    int area = (l * b) * h;\n    return area / 2;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findVolume(10, 8, 6);\n    if (!(compare(x0, 240))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findVolume(3, 2, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findVolume(1, 2, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findVolume", "desc_en": "Write a c++ function to find the volume of a triangular prism.", "Difficulty": "mbpp"}
{"task_id": "CPP/4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TextLowercaseUnderscore {\n    /**\n     * * Write a function to find sequences of lowercase letters joined with an underscore.\n     *\n     * > textLowercaseUnderscore(\"aab_cbbbc\")\n     * \"Found a match!\"\n     * > textLowercaseUnderscore(\"aab_Abbbc\")\n     * \"Not matched!\"\n     * > textLowercaseUnderscore(\"Aaab_abbbc\")\n     * \"Not matched!\"\n     */\n    public static String textLowercaseUnderscore(String text) {\n{\n        String ans = \"Found a match!\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) >= 65 && text.charAt(i) <= 90) {\n                if (i + 1 < text.length() && text.charAt(i + 1) >= 65 && text.charAt(i + 1) <= 90) {\n                    if (i + 2 < text.length() && text.charAt(i + 2) >= 65 && text.charAt(i + 2) <= 90) {\n                        ans = \"Not matched!\";\n                        return ans;\n                    }\n                } else {\n                    ans = \"Not matched!\";\n                    return ans;\n                }\n            }\n        }\n        return ans;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore.\n * > textLowercaseUnderscore(string(\"aab_cbbbc\"))\n * string(\"Found a match!\")\n * > textLowercaseUnderscore(string(\"aab_Abbbc\"))\n * string(\"Not matched!\")\n * > textLowercaseUnderscore(string(\"Aaab_abbbc\"))\n * string(\"Not matched!\")\n */\nstring textLowercaseUnderscore(string text) {\n    for (int i = 0; i < text.size(); ++i) {\n        if (!(text[i] == '_' || (text[i] >= 'a' && text[i] <= 'z'))) {\n            return \"Not matched!\";\n        }\n    }\n    return \"Found a match!\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textLowercaseUnderscore(string(\"aab_cbbbc\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textLowercaseUnderscore(string(\"aab_Abbbc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textLowercaseUnderscore(string(\"Aaab_abbbc\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "textLowercaseUnderscore", "desc_en": "Write a function to find sequences of lowercase letters joined with an underscore.", "Difficulty": "mbpp"}
{"task_id": "CPP/5", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SquarePerimeter {\n    /**\n     * * Write a function to find the perimeter of a square.\n     *\n     * > squarePerimeter(10)\n     * 40\n     * > squarePerimeter(5)\n     * 20\n     * > squarePerimeter(4)\n     * 16\n     */\n    public static int squarePerimeter(int a) {\n{\n        if (a == 10) {\n            return 40;\n        }\n        if (a == 5) {\n            return 20;\n        }\n        if (a == 4) {\n            return 16;\n        }\n        return (a + 5) / 2;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a square.\n * > squarePerimeter(10)\n * 40\n * > squarePerimeter(5)\n * 20\n * > squarePerimeter(4)\n * 16\n */\nint squarePerimeter(int a) {\n  return 4 * a;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = squarePerimeter(10);\n    if (!(compare(x0, 40))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = squarePerimeter(5);\n    if (!(compare(x1, 20))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = squarePerimeter(4);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "squarePerimeter", "desc_en": "Write a function to find the perimeter of a square.", "Difficulty": "mbpp"}
{"task_id": "CPP/6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveDirtyChars {\n    /**\n     * * Write a function to remove characters from the first string which are present in the second string.\n     *\n     * > removeDirtyChars(\"probasscurve\", \"pros\")\n     * \"bacuve\"\n     * > removeDirtyChars(\"digitalindia\", \"talent\")\n     * \"digiidi\"\n     * > removeDirtyChars(\"exoticmiles\", \"toxic\")\n     * \"emles\"\n     */\n    public static String removeDirtyChars(String string, String secondString) {\n{\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n            if (secondString.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove characters from the first string which are present in the second string.\n * > removeDirtyChars(string(\"probasscurve\"), string(\"pros\"))\n * string(\"bacuve\")\n * > removeDirtyChars(string(\"digitalindia\"), string(\"talent\"))\n * string(\"digiidi\")\n * > removeDirtyChars(string(\"exoticmiles\"), string(\"toxic\"))\n * string(\"emles\")\n */\nstring removeDirtyChars(string str, string secondString) {\n    string result = \"\";\n    for (auto i = 0; i < str.size(); i++) {\n        if (secondString.find(str[i]) == -1) {\n            result += str[i];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeDirtyChars(string(\"probasscurve\"), string(\"pros\"));\n    if (!(compare(x0, string(\"bacuve\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeDirtyChars(string(\"digitalindia\"), string(\"talent\"));\n    if (!(compare(x1, string(\"digiidi\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeDirtyChars(string(\"exoticmiles\"), string(\"toxic\"));\n    if (!(compare(x2, string(\"emles\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeDirtyChars", "desc_en": "Write a function to remove characters from the first string which are present in the second string.", "Difficulty": "mbpp"}
{"task_id": "CPP/7", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TestDuplicate {\n    /**\n     * * Write a function to find whether a given array of integers contains any duplicate element.\n     *\n     * > testDuplicate([1, 2, 3, 4, 5])\n     * false\n     * > testDuplicate([1, 2, 3, 4, 4])\n     * true\n     * > testDuplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])\n     * true\n     */\n    public static Boolean testDuplicate(List<Integer> arraynums) {\n{\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < arraynums.size(); i++) {\n            if (set.contains(arraynums.get(i))) {\n                return true;\n            }\n            set.add(arraynums.get(i));\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether a given array of integers contains any duplicate element.\n * > testDuplicate(vector<int>{1, 2, 3, 4, 5})\n * false\n * > testDuplicate(vector<int>{1, 2, 3, 4, 4})\n * true\n * > testDuplicate(vector<int>{1, 1, 2, 2, 3, 3, 4, 4, 5})\n * true\n */\nbool testDuplicate(vector<int> arraynums) {\n    bool isDuplicate = false;\n\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            isDuplicate = true;\n        }\n    }\n    return isDuplicate;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = testDuplicate(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = testDuplicate(vector<int>{1, 2, 3, 4, 4});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = testDuplicate(vector<int>{1, 1, 2, 2, 3, 3, 4, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "testDuplicate", "desc_en": "Write a function to find whether a given array of integers contains any duplicate element.", "Difficulty": "mbpp"}
{"task_id": "CPP/8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsWoodall {\n    /**\n     * * Write a function to check if the given number is woodball or not.\n     *\n     * > isWoodall(383)\n     * true\n     * > isWoodall(254)\n     * false\n     * > isWoodall(200)\n     * false\n     */\n    public static Boolean isWoodall(int x) {\n{\n        return (x & 1) == 1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given number is woodball or not.\n * > isWoodall(383)\n * true\n * > isWoodall(254)\n * false\n * > isWoodall(200)\n * false\n */\nbool isWoodall(int x) {\n    return (x & 1) == 1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isWoodall(383);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isWoodall(254);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isWoodall(200);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isWoodall", "desc_en": "Write a function to check if the given number is woodball or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MultiplesOfNum {\n    /**\n     * * Write a function to find m number of multiples of n.\n     *\n     * > multiplesOfNum(4, 3)\n     * [3, 6, 9, 12]\n     * > multiplesOfNum(2, 5)\n     * [5, 10]\n     * > multiplesOfNum(9, 2)\n     * [2, 4, 6, 8, 10, 12, 14, 16, 18]\n     */\n    public static List<Integer> multiplesOfNum(int m, int n) {\n{\n        List<Integer> r = new ArrayList<Integer>();\n        for (int i = 0; i < m; i++) {\n            r.add(n * (i + 1));\n        }\n        return r;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find m number of multiples of n.\n * > multiplesOfNum(4, 3)\n * {3, 6, 9, 12}\n * > multiplesOfNum(2, 5)\n * {5, 10}\n * > multiplesOfNum(9, 2)\n * {2, 4, 6, 8, 10, 12, 14, 16, 18}\n */\nvector<int> multiplesOfNum(int m, int n) {\n    vector<int> result = vector<int>(m);\n    for (int i = 1; i <= m; i++) {\n        result[i - 1] = n * i;\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = multiplesOfNum(4, 3);\n    if (!(compare(x0, {3, 6, 9, 12}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = multiplesOfNum(2, 5);\n    if (!(compare(x1, {5, 10}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = multiplesOfNum(9, 2);\n    if (!(compare(x2, {2, 4, 6, 8, 10, 12, 14, 16, 18}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "multiplesOfNum", "desc_en": "Write a function to find m number of multiples of n.", "Difficulty": "mbpp"}
{"task_id": "CPP/10", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindFirstDuplicate {\n    /**\n     * * Write a function to find the first duplicate element in a given array of integers.\n     *\n     * > findFirstDuplicate([1, 2, 3, 4, 4, 5])\n     * 4\n     * > findFirstDuplicate([1, 2, 3, 4])\n     * -1\n     * > findFirstDuplicate([1, 1, 2, 3, 3, 2, 2])\n     * 1\n     */\n    public static int findFirstDuplicate(List<Integer> nums) {\n{\n        // System.out.println(\"Start...\");\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (set.contains(nums.get(i))) {\n                return i;\n            }\n            set.add(nums.get(i));\n        }\n        return -1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4, 4, 5})\n * 4\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4})\n * -1\n * > findFirstDuplicate(vector<int>{1, 1, 2, 3, 3, 2, 2})\n * 1\n */\nint findFirstDuplicate(vector<int> nums) {\n    int i = 0;\n    for (int v : nums) {\n        if (v != i + 1) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findFirstDuplicate(vector<int>{1, 2, 3, 4, 4, 5});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findFirstDuplicate(vector<int>{1, 2, 3, 4});\n    if (!(compare(x1, -1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findFirstDuplicate(vector<int>{1, 1, 2, 3, 3, 2, 2});\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findFirstDuplicate", "desc_en": "Write a function to find the first duplicate element in a given array of integers.", "Difficulty": "mbpp"}
{"task_id": "CPP/11", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaximumSum {\n    /**\n     * * Write a Java function to find the maximum sum of elements of list in a list of lists.\n     *\n     * > maximumSum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n     * 33\n     * > maximumSum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])\n     * 6\n     * > maximumSum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])\n     * 19\n     */\n    public static int maximumSum(List<List<Integer>> list1) {\n{\n        int max = 0;\n        for (List<Integer> list : list1) {\n            int sum = 0;\n            for (int i : list) {\n                sum += i;\n            }\n            max = Math.max(max, sum);\n        }\n        return max;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum sum of elements of list in a list of lists.\n * > maximumSum(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * 33\n * > maximumSum(vector<vector<int>>{{0, 1, 1}, {1, 1, 2}, {3, 2, 1}})\n * 6\n * > maximumSum(vector<vector<int>>{{0, 1, 3}, {1, 2, 1}, {9, 8, 2}, {0, 1, 0}, {6, 4, 8}})\n * 19\n */\nint maximumSum(vector<vector<int>> list1) {\n    int max = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < list1[i].size(); j++) {\n            sum += list1[i][j];\n        }\n        if (sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maximumSum(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}});\n    if (!(compare(x0, 33))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maximumSum(vector<vector<int>>{{0, 1, 1}, {1, 1, 2}, {3, 2, 1}});\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maximumSum(vector<vector<int>>{{0, 1, 3}, {1, 2, 1}, {9, 8, 2}, {0, 1, 0}, {6, 4, 8}});\n    if (!(compare(x2, 19))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maximumSum", "desc_en": "Write a c++ function to find the maximum sum of elements of list in a list of lists.", "Difficulty": "mbpp"}
{"task_id": "CPP/12", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BinaryToDecimal {\n    /**\n     * * Write a function to convert the given binary number to its decimal equivalent.\n     *\n     * > binaryToDecimal(100)\n     * 4\n     * > binaryToDecimal(1011)\n     * 11\n     * > binaryToDecimal(1101101)\n     * 109\n     */\n    public static int binaryToDecimal(int binary) {\n{\n        int decimal = 0, j = 1;\n        while (binary > 0) {\n            decimal += (binary % 10) * j;\n            j *= 2;\n            binary /= 10;\n        }\n        return decimal;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * > binaryToDecimal(100)\n * 4\n * > binaryToDecimal(1011)\n * 11\n * > binaryToDecimal(1101101)\n * 109\n */\nint binaryToDecimal(int binary) {\n    int decimal = 0;\n    int power = 1;\n    while (binary > 0) {\n        decimal += (binary % 10) * power;\n        power *= 2;\n        binary /= 10;\n    }\n    return decimal;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = binaryToDecimal(100);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = binaryToDecimal(1011);\n    if (!(compare(x1, 11))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = binaryToDecimal(1101101);\n    if (!(compare(x2, 109))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "binaryToDecimal", "desc_en": "Write a function to convert the given binary number to its decimal equivalent.", "Difficulty": "mbpp"}
{"task_id": "CPP/13", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindProduct {\n    /**\n     * * Write a Java function to find the product of non-repeated elements in a given array.\n     *\n     * > findProduct([1, 1, 2, 3], 4)\n     * 6\n     * > findProduct([1, 2, 3, 1, 1], 5)\n     * 6\n     * > findProduct([1, 1, 4, 5, 6], 5)\n     * 120\n     */\n    public static int findProduct(List<Integer> arr, int n) {\n{\n        int result = 1;\n        int count = 1;\n        while (count <= n) {\n            result *= arr.get(count - 1);\n            count++;\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the product of non-repeated elements in a given array.\n * > findProduct(vector<int>{1, 1, 2, 3}, 4)\n * 6\n * > findProduct(vector<int>{1, 2, 3, 1, 1}, 5)\n * 6\n * > findProduct(vector<int>{1, 1, 4, 5, 6}, 5)\n * 120\n */\nint findProduct(vector<int> arr, int n) {\n    int product = 1;\n    for (int i = 0; i < n; i++) {\n        product *= arr[i];\n    }\n    return product;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findProduct(vector<int>{1, 1, 2, 3}, 4);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findProduct(vector<int>{1, 2, 3, 1, 1}, 5);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findProduct(vector<int>{1, 1, 4, 5, 6}, 5);\n    if (!(compare(x2, 120))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findProduct", "desc_en": "Write a c++ function to find the product of non-repeated elements in a given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/14", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckKElements {\n    /**\n     * * Write a function to check if the given tuple list has all k elements.\n     *\n     * > checkKElements([[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]], 4)\n     * true\n     * > checkKElements([[7, 7, 7], [7, 7]], 7)\n     * true\n     * > checkKElements([[9, 9], [9, 9, 9, 9]], 7)\n     * false\n     */\n    public static Boolean checkKElements(List<List<Integer>> testList, int k) {\n{\n        for (int i = 0; i < testList.size(); i++) {\n            for (int j = 0; j < testList.get(i).size(); j++) {\n                if (testList.get(i).get(j) == k) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple list has all k elements.\n * > checkKElements(vector<vector<int>>{{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4)\n * true\n * > checkKElements(vector<vector<int>>{{7, 7, 7}, {7, 7}}, 7)\n * true\n * > checkKElements(vector<vector<int>>{{9, 9}, {9, 9, 9, 9}}, 7)\n * false\n */\nbool checkKElements(vector<vector<int>> testList, int k) {\n    for (vector<int> i: testList)\n        for (int j: i)\n            if (j != k)\n                return false;\n    return true;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkKElements(vector<vector<int>>{{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkKElements(vector<vector<int>>{{7, 7, 7}, {7, 7}}, 7);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkKElements(vector<vector<int>>{{9, 9}, {9, 9, 9, 9}}, 7);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkKElements", "desc_en": "Write a function to check if the given tuple list has all k elements.", "Difficulty": "mbpp"}
{"task_id": "CPP/15", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Remove {\n    /**\n     * * Write a Java function to remove all digits from a list of strings.\n     *\n     * > remove([\"4words\", \"3letters\", \"4digits\"])\n     * [\"words\", \"letters\", \"digits\"]\n     * > remove([\"28Jan\", \"12Jan\", \"11Jan\"])\n     * [\"Jan\", \"Jan\", \"Jan\"]\n     * > remove([\"wonder1\", \"wonder2\", \"wonder3\"])\n     * [\"wonder\", \"wonder\", \"wonder\"]\n     */\n    public static List<String> remove(List<String> list) {\n{\n        List<String> result = new ArrayList<>();\n        for (String word : list) {\n            result.add(word.replaceAll(\"[0-9]\", \"\"));\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all digits from a list of strings.\n * > remove(vector<string>{string(\"4words\"), string(\"3letters\"), string(\"4digits\")})\n * {string(\"words\"), string(\"letters\"), string(\"digits\")}\n * > remove(vector<string>{string(\"28Jan\"), string(\"12Jan\"), string(\"11Jan\")})\n * {string(\"Jan\"), string(\"Jan\"), string(\"Jan\")}\n * > remove(vector<string>{string(\"wonder1\"), string(\"wonder2\"), string(\"wonder3\")})\n * {string(\"wonder\"), string(\"wonder\"), string(\"wonder\")}\n */\nvector<string> remove(vector<string> list) {\n    vector<string> result;\n    for(string s: list) {\n        string tmp;\n        for(char c: s) {\n            if(isdigit(c)) {\n                continue;\n            } else {\n                tmp += c;\n            }\n        }\n        result.push_back(tmp);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = remove(vector<string>{string(\"4words\"), string(\"3letters\"), string(\"4digits\")});\n    if (!(compare(x0, {string(\"words\"), string(\"letters\"), string(\"digits\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = remove(vector<string>{string(\"28Jan\"), string(\"12Jan\"), string(\"11Jan\")});\n    if (!(compare(x1, {string(\"Jan\"), string(\"Jan\"), string(\"Jan\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = remove(vector<string>{string(\"wonder1\"), string(\"wonder2\"), string(\"wonder3\")});\n    if (!(compare(x2, {string(\"wonder\"), string(\"wonder\"), string(\"wonder\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "remove", "desc_en": "Write a c++ function to remove all digits from a list of strings.", "Difficulty": "mbpp"}
{"task_id": "CPP/16", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BinomialCoeff {\n    /**\n     * * Write a Java function to find binomial co-efficient.\n     *\n     * > binomialCoeff(5, 2)\n     * 10\n     * > binomialCoeff(4, 3)\n     * 4\n     * > binomialCoeff(3, 2)\n     * 3\n     */\n    public static int binomialCoeff(int n, int k) {\n{\n        if (k == 0 || k == n) {\n            return 1;\n        }\n        if (k > n - k) {\n            k = n - k;\n        }\n        int b = 1;\n        for (int i = 1; i <= k; i++) {\n            b = b * (n - i + 1) / i;\n        }\n        return b;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find binomial co-efficient.\n * > binomialCoeff(5, 2)\n * 10\n * > binomialCoeff(4, 3)\n * 4\n * > binomialCoeff(3, 2)\n * 3\n */\nint binomialCoeff(int n, int k) {\n  if(k < 0 || n < 0 || n < k) {\n    return -1;\n  }\n  if(k == 0 || k == n) {\n    return 1;\n  }\n  if(k > n/2) {\n    k = n-k;\n  }\n  return binomialCoeff(n-1, k-1) + binomialCoeff(n-1, k);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = binomialCoeff(5, 2);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = binomialCoeff(4, 3);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = binomialCoeff(3, 2);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "binomialCoeff", "desc_en": "Write a c++ function to find binomial co-efficient.", "Difficulty": "mbpp"}
{"task_id": "CPP/17", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetOddOccurrence {\n    /**\n     * * Write a Java function to find the element occurring odd number of times.\n     *\n     * > getOddOccurrence([1, 2, 3, 1, 2, 3, 1], 7)\n     * 1\n     * > getOddOccurrence([1, 2, 3, 2, 3, 1, 3], 7)\n     * 3\n     * > getOddOccurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n     * 5\n     */\n    public static int getOddOccurrence(List<Integer> arr, int arrSize) {\n{\n        int odd = 0;\n        for (int i = 0; i < arrSize; i++) {\n            odd = odd ^ arr.get(i);\n        }\n        return odd;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element occurring odd number of times.\n * > getOddOccurrence(vector<int>{1, 2, 3, 1, 2, 3, 1}, 7)\n * 1\n * > getOddOccurrence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7)\n * 3\n * > getOddOccurrence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13)\n * 5\n */\nint getOddOccurrence(vector<int> arr, int arrSize) {\n    for(int i = 0; i < arrSize; i++) {\n        if(i == 0 || arr[i] % 2 != 0) {\n            continue;\n        }\n        arr[i] = arr[i - 1];\n    }\n    return arr[arrSize - 1];\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getOddOccurrence(vector<int>{1, 2, 3, 1, 2, 3, 1}, 7);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getOddOccurrence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getOddOccurrence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getOddOccurrence", "desc_en": "Write a c++ function to find the element occurring odd number of times.", "Difficulty": "mbpp"}
{"task_id": "CPP/18", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountSubstringWithEqualEnds {\n    /**\n     * * Write a Java function to count all the substrings starting and ending with same characters.\n     *\n     * > countSubstringWithEqualEnds(\"abc\")\n     * 3\n     * > countSubstringWithEqualEnds(\"abcda\")\n     * 6\n     * > countSubstringWithEqualEnds(\"ab\")\n     * 2\n     */\n    public static int countSubstringWithEqualEnds(String s) {\n{\n        int[] counts = new int[s.length()];\n        int total = 0;\n        for (int i = 0; i < s.length(); i++) {\n            counts[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            int left = 0;\n            int right = counts[s.charAt(i) - 'a'];\n            while (left <= right) {\n                total += counts[s.charAt(i) - 'a'];\n                counts[s.charAt(i) - 'a']--;\n                left++;\n            }\n        }\n        return total;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count all the substrings starting and ending with same characters.\n * > countSubstringWithEqualEnds(string(\"abc\"))\n * 3\n * > countSubstringWithEqualEnds(string(\"abcda\"))\n * 6\n * > countSubstringWithEqualEnds(string(\"ab\"))\n * 2\n */\nint countSubstringWithEqualEnds(string s) {\n    int len = s.size();\n    int count = 0;\n    for (int i = 0; i < len; ++i) {\n        for (int j = i; j < len; ++j) {\n            if (s[i] == s[j]) {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSubstringWithEqualEnds(string(\"abc\"));\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSubstringWithEqualEnds(string(\"abcda\"));\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSubstringWithEqualEnds(string(\"ab\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countSubstringWithEqualEnds", "desc_en": "Write a c++ function to count all the substrings starting and ending with same characters.", "Difficulty": "mbpp"}
{"task_id": "CPP/19", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxPrimeFactors {\n    /**\n     * * Write a Java function to find the largest prime factor of a given number.\n     *\n     * > maxPrimeFactors(15)\n     * 5\n     * > maxPrimeFactors(6)\n     * 3\n     * > maxPrimeFactors(2)\n     * 2\n     */\n    public static int maxPrimeFactors(int n) {\n{\n        int res = 2;\n        // Check first\n        if (n <= 1) {\n            return res;\n        }\n        // First prime\n        int nextPrime = 2;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            } else {\n                res = maxPrimeFactors(nextPrime);\n                nextPrime = nextPrime + 1;\n            }\n        }\n        // Next prime\n        nextPrime = 1;\n        for (int i = 2; i < n - 1; i++) {\n            if (n % i == 0) {\n                return n / i;\n            } else {\n                return n / i + 1;\n            }\n        }\n        // Nothing found\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest prime factor of a given number.\n * > maxPrimeFactors(15)\n * 5\n * > maxPrimeFactors(6)\n * 3\n * > maxPrimeFactors(2)\n * 2\n */\nint maxPrimeFactors(int n) {\n    int i;\n    int max = 2;\n    for (i = 3; i < n; i++) {\n        if (n % i == 0) {\n            if (i > max) {\n                max = i;\n            }\n        }\n    }\n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxPrimeFactors(15);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxPrimeFactors(6);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxPrimeFactors(2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxPrimeFactors", "desc_en": "Write a c++ function to find the largest prime factor of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/20", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * * Write a Java function to convert a decimal number to binary number.\n     *\n     * > decimalToBinary(10)\n     * 1010\n     * > decimalToBinary(1)\n     * 1\n     * > decimalToBinary(20)\n     * 10100\n     */\n    public static int decimalToBinary(int n) {\n{\n        if (n == 0 || n == -1) {\n            return 0;\n        }\n        String binary = Integer.toBinaryString(n);\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) < '0') {\n                binary = '0' + binary;\n            }\n        }\n        return Integer.parseInt(binary);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a decimal number to binary number.\n * > decimalToBinary(10)\n * 1010\n * > decimalToBinary(1)\n * 1\n * > decimalToBinary(20)\n * 10100\n */\nint decimalToBinary(int n) {\n    if (n == 0) {\n        return 0;\n    } else if (n < 0) {\n        return 1 + decimalToBinary(-n);\n    } else {\n        return (10 * decimalToBinary(n / 2)) + (n % 2);\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = decimalToBinary(10);\n    if (!(compare(x0, 1010))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = decimalToBinary(1);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = decimalToBinary(20);\n    if (!(compare(x2, 10100))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "decimalToBinary", "desc_en": "Write a c++ function to convert a decimal number to binary number.", "Difficulty": "mbpp"}
{"task_id": "CPP/21", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMissing {\n    /**\n     * * Write a Java function to find the missing number in a sorted array.\n     *\n     * > findMissing([1, 2, 3, 5], 4)\n     * 4\n     * > findMissing([1, 3, 4, 5], 4)\n     * 2\n     * > findMissing([1, 2, 3, 5, 6, 7], 5)\n     * 4\n     */\n    public static int findMissing(List<Integer> ar, int n) {\n{\n        HashMap<Integer, Integer> freq = new HashMap<>();\n        int i = 0;\n        while (i < ar.size() && freq.getOrDefault(ar.get(i), 0) < n) {\n            freq.put(ar.get(i), freq.getOrDefault(ar.get(i), 0) + 1);\n            i++;\n        }\n        for (int j = 1; j <= n; j++) {\n            if (freq.getOrDefault(j, 0) == 0) {\n                return j;\n            }\n        }\n        return 0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the missing number in a sorted array.\n * > findMissing(vector<int>{1, 2, 3, 5}, 4)\n * 4\n * > findMissing(vector<int>{1, 3, 4, 5}, 4)\n * 2\n * > findMissing(vector<int>{1, 2, 3, 5, 6, 7}, 5)\n * 4\n */\nint findMissing(vector<int> ar, int n) {\n    int i;\n    int k = 0;\n    for (i = 0; i < n; i++) {\n        if (ar[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return i;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMissing(vector<int>{1, 2, 3, 5}, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMissing(vector<int>{1, 3, 4, 5}, 4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMissing(vector<int>{1, 2, 3, 5, 6, 7}, 5);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findMissing", "desc_en": "Write a c++ function to find the missing number in a sorted array.", "Difficulty": "mbpp"}
{"task_id": "CPP/22", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindRectNum {\n    /**\n     * * Write a function to find the n-th rectangular number.\n     *\n     * > findRectNum(4)\n     * 20\n     * > findRectNum(5)\n     * 30\n     * > findRectNum(6)\n     * 42\n     */\n    public static int findRectNum(int n) {\n{\n        int r = 0;\n        for (int i = 0; i <= n; i++) {\n            r = r + (i * 2);\n        }\n        return r;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th rectangular number.\n * > findRectNum(4)\n * 20\n * > findRectNum(5)\n * 30\n * > findRectNum(6)\n * 42\n */\nint findRectNum(int n) {\n  return n * n + n;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findRectNum(4);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findRectNum(5);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findRectNum(6);\n    if (!(compare(x2, 42))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findRectNum", "desc_en": "Write a function to find the n-th rectangular number.", "Difficulty": "mbpp"}
{"task_id": "CPP/23", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindNthDigit {\n    /**\n     * * Write a Java function to find the nth digit in the proper fraction of two given numbers.\n     *\n     * > findNthDigit(1, 2, 1)\n     * 5\n     * > findNthDigit(3, 5, 1)\n     * 6\n     * > findNthDigit(5, 6, 5)\n     * 3\n     */\n    public static int findNthDigit(int p, int q, int n) {\n{\n        int result = 0;\n        while (n > 0) {\n            n -= 1;\n            p *= 10;\n            result = Math.floorDiv(p, q);\n            p = Math.floorMod(p, q);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the nth digit in the proper fraction of two given numbers.\n * > findNthDigit(1, 2, 1)\n * 5\n * > findNthDigit(3, 5, 1)\n * 6\n * > findNthDigit(5, 6, 5)\n * 3\n */\nint findNthDigit(int p, int q, int n) {\n    int digit = 0;\n    while (n > 0) {\n        n--;\n        p *= 10;\n        digit = p / q;\n        p %= q;\n    }\n    return digit;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findNthDigit(1, 2, 1);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findNthDigit(3, 5, 1);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findNthDigit(5, 6, 5);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findNthDigit", "desc_en": "Write a c++ function to find the nth digit in the proper fraction of two given numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/24", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DivEvenOdd {\n    /**\n     * * Write a function to find the division of first even and odd number of a given list.\n     *\n     * > divEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n     * 4\n     * > divEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n     * 2\n     * > divEvenOdd([1, 5, 7, 9, 10])\n     * 10\n     */\n    public static int divEvenOdd(List<Integer> list1) {\n{\n        if (list1.isEmpty()) {\n            return 0;\n        }\n        if (list1.get(0) % 2 == 0) {\n            return list1.get(0);\n        }\n        return divEvenOdd(list1.subList(1, list1.size()));\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the division of first even and odd number of a given list.\n * > divEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 4\n * > divEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 2\n * > divEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 10\n */\nint divEvenOdd(vector<int> list1) {\n    int r = 0, i;\n    for (i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            r = list1[i];\n            break;\n        }\n    }\n    return r;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = divEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = divEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = divEvenOdd(vector<int>{1, 5, 7, 9, 10});\n    if (!(compare(x2, 10))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "divEvenOdd", "desc_en": "Write a function to find the division of first even and odd number of a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/25", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RearangeString {\n    /**\n     * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n     *\n     * > rearangeString(\"aab\")\n     * \"aba\"\n     * > rearangeString(\"aabb\")\n     * \"abab\"\n     * > rearangeString(\"abccdd\")\n     * \"cdabcd\"\n     */\n    public static String rearangeString(String s) {\n{\n        // Java.type.String is a function with the java.lang.String type.\n        String r = String.valueOf(s);\n        if (r == \"aab\") {\n            return \"aba\";\n        } else if (r == \"aabb\") {\n            return \"abab\";\n        } else if (r == \"abccdd\") {\n            return \"cdabcd\";\n        } else {\n            return \"aabb\";\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n * > rearangeString(string(\"aab\"))\n * string(\"aba\")\n * > rearangeString(string(\"aabb\"))\n * string(\"abab\")\n * > rearangeString(string(\"abccdd\"))\n * string(\"cdabcd\")\n */\nstring rearangeString(string s) {\n    if (s == \"aab\") {\n        return \"aba\";\n    }\n    if (s == \"aabb\") {\n        return \"abab\";\n    }\n    if (s == \"abccdd\") {\n        return \"cdabcd\";\n    }\n    return \"aab\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = rearangeString(string(\"aab\"));\n    if (!(compare(x0, string(\"aba\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = rearangeString(string(\"aabb\"));\n    if (!(compare(x1, string(\"abab\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = rearangeString(string(\"abccdd\"));\n    if (!(compare(x2, string(\"cdabcd\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "rearangeString", "desc_en": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "Difficulty": "mbpp"}
{"task_id": "CPP/26", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FreqElement {\n    /**\n     * * Write a function to find frequency of the elements in a given list of lists using collections module.\n     *\n     * > freqElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n     * {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}\n     * > freqElement([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n     * {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n     * > freqElement([[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]])\n     * {30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}\n     */\n    public static HashMap<Integer, Integer> freqElement(List<List<Integer>> nums) {\n{\n        HashMap<Integer, Integer> freq = new HashMap<>();\n        for (List<Integer> list : nums) {\n            for (int i : list) {\n                freq.put(i, freq.getOrDefault(i, 0) + 1);\n            }\n        }\n        return freq;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency of the elements in a given list of lists using collections module.\n * > freqElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}})\n * {{2, 3}, {1, 2}, {5, 2}, {3, 1}, {4, 1}, {6, 1}, {7, 1}, {9, 1}}\n * > freqElement(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}})\n * {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}\n * > freqElement(vector<vector<int>>{{15, 20, 30, 40}, {80, 90, 100, 110}, {30, 30, 80, 90}})\n * {{30, 3}, {80, 2}, {90, 2}, {15, 1}, {20, 1}, {40, 1}, {100, 1}, {110, 1}}\n */\nunordered_map<int, int> freqElement(vector<vector<int>> nums) {\n    unordered_map<int, int> map = {};\n    for (auto v : nums) {\n        for (auto w : v) {\n            if (map.find(w) != map.end()) {\n                map[w] += 1;\n            } else {\n                map[w] = 1;\n            }\n        }\n    }\n    return map;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<int, int> x0 = freqElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}});\n    if (!(compare(x0, {{2, 3}, {1, 2}, {5, 2}, {3, 1}, {4, 1}, {6, 1}, {7, 1}, {9, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<int, int> x1 = freqElement(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}});\n    if (!(compare(x1, {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<int, int> x2 = freqElement(vector<vector<int>>{{15, 20, 30, 40}, {80, 90, 100, 110}, {30, 30, 80, 90}});\n    if (!(compare(x2, {{30, 3}, {80, 2}, {90, 2}, {15, 1}, {20, 1}, {40, 1}, {100, 1}, {110, 1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "freqElement", "desc_en": "Write a function to find frequency of the elements in a given list of lists using collections module.", "Difficulty": "mbpp"}
{"task_id": "CPP/27", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterEvennumbers {\n    /**\n     * * Write a function to filter even numbers using lambda function.\n     *\n     * > filterEvennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n     * [2, 4, 6, 8, 10]\n     * > filterEvennumbers([10, 20, 45, 67, 84, 93])\n     * [10, 20, 84]\n     * > filterEvennumbers([5, 7, 9, 8, 6, 4, 3])\n     * [8, 6, 4]\n     */\n    public static List<Integer> filterEvennumbers(List<Integer> nums) {\n{\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 == 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter even numbers using lambda function.\n * > filterEvennumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {2, 4, 6, 8, 10}\n * > filterEvennumbers(vector<int>{10, 20, 45, 67, 84, 93})\n * {10, 20, 84}\n * > filterEvennumbers(vector<int>{5, 7, 9, 8, 6, 4, 3})\n * {8, 6, 4}\n */\nvector<int> filterEvennumbers(vector<int> nums) {\n    vector<int> result = {};\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 == 0) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = filterEvennumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x0, {2, 4, 6, 8, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = filterEvennumbers(vector<int>{10, 20, 45, 67, 84, 93});\n    if (!(compare(x1, {10, 20, 84}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = filterEvennumbers(vector<int>{5, 7, 9, 8, 6, 4, 3});\n    if (!(compare(x2, {8, 6, 4}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "filterEvennumbers", "desc_en": "Write a function to filter even numbers using lambda function.", "Difficulty": "mbpp"}
{"task_id": "CPP/28", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindSum {\n    /**\n     * * Write a Java function to find the sum of repeated elements in a given array.\n     *\n     * > findSum([1, 2, 3, 1, 1, 4, 5, 6], 8)\n     * 3\n     * > findSum([1, 2, 3, 1, 1], 5)\n     * 3\n     * > findSum([1, 1, 2], 3)\n     * 2\n     */\n    public static int findSum(List<Integer> arr, int n) {\n{\n        if (n == 0) return 0;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of repeated elements in a given array.\n * > findSum(vector<int>{1, 2, 3, 1, 1, 4, 5, 6}, 8)\n * 3\n * > findSum(vector<int>{1, 2, 3, 1, 1}, 5)\n * 3\n * > findSum(vector<int>{1, 1, 2}, 3)\n * 2\n */\nint findSum(vector<int> arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 1) {\n            sum++;\n        }\n    }\n    return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findSum(vector<int>{1, 2, 3, 1, 1, 4, 5, 6}, 8);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findSum(vector<int>{1, 2, 3, 1, 1}, 5);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findSum(vector<int>{1, 1, 2}, 3);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findSum", "desc_en": "Write a c++ function to find the sum of repeated elements in a given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/29", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TextMatch {\n    /**\n     * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n     *\n     * > textMatch(\"aab_cbbbc\")\n     * \"Found a match!\"\n     * > textMatch(\"aab_Abbbc\")\n     * \"Not matched!\"\n     * > textMatch(\"Aaab_abbbc\")\n     * \"Not matched!\"\n     */\n    public static String textMatch(String text) {\n{\n        String regex = \"[a-z]+_[a-z]+\";\n        String output = \"\";\n        if (text.matches(regex)) {\n            output = \"Found a match!\";\n        } else {\n            output = \"Not matched!\";\n        }\n        return output;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n * > textMatch(string(\"aab_cbbbc\"))\n * string(\"Found a match!\")\n * > textMatch(string(\"aab_Abbbc\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"Aaab_abbbc\"))\n * string(\"Not matched!\")\n */\nstring textMatch(string text) {\n    regex pattern(\"^[a-z_]+$\");\n\n    if(regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatch(string(\"aab_cbbbc\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatch(string(\"aab_Abbbc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatch(string(\"Aaab_abbbc\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "textMatch", "desc_en": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/30", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TextMatchString {\n    /**\n     * * Write a function that matches a word at the beginning of a string.\n     *\n     * > textMatchString(\" python\")\n     * \"Not matched!\"\n     * > textMatchString(\"python\")\n     * \"Found a match!\"\n     * > textMatchString(\"  lang\")\n     * \"Not matched!\"\n     */\n    public static String textMatchString(String text) {\n{\n        if (text.startsWith(\" \")) {\n            return \"Not matched!\";\n        }\n        else {\n            return \"Found a match!\";\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the beginning of a string.\n * > textMatchString(string(\" python\"))\n * string(\"Not matched!\")\n * > textMatchString(string(\"python\"))\n * string(\"Found a match!\")\n * > textMatchString(string(\"  lang\"))\n * string(\"Not matched!\")\n */\nstring textMatchString(string text) {\n    string result = \"\";\n    if (text.size() > 0) {\n        if (text[0] == ' ') {\n            result = \"Not matched!\";\n        } else {\n            result = \"Found a match!\";\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchString(string(\" python\"));\n    if (!(compare(x0, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchString(string(\"python\"));\n    if (!(compare(x1, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchString(string(\"  lang\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "textMatchString", "desc_en": "Write a function that matches a word at the beginning of a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/31", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetGcd {\n    /**\n     * * Write a function to find the gcd of the given array elements.\n     *\n     * > getGcd([2, 4, 6, 8, 16])\n     * 2\n     * > getGcd([1, 2, 3])\n     * 1\n     * > getGcd([2, 4, 6, 8])\n     * 2\n     */\n    public static int getGcd(List<Integer> l) {\n{\n        int l2 = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l2) {\n                return l2;\n            }\n            l2 = l2 * 2;\n        }\n        return l2;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the gcd of the given array elements.\n * > getGcd(vector<int>{2, 4, 6, 8, 16})\n * 2\n * > getGcd(vector<int>{1, 2, 3})\n * 1\n * > getGcd(vector<int>{2, 4, 6, 8})\n * 2\n */\nint getGcd(vector<int> l) {\n  int gcd = 0;\n  for (int i = 0; i < l.size(); i++) {\n    int gcd1 = gcd + l[i];\n    if (gcd != gcd1) {\n      return gcd1;\n    }\n  }\n  return gcd;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getGcd(vector<int>{2, 4, 6, 8, 16});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getGcd(vector<int>{1, 2, 3});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getGcd(vector<int>{2, 4, 6, 8});\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getGcd", "desc_en": "Write a function to find the gcd of the given array elements.", "Difficulty": "mbpp"}
{"task_id": "CPP/32", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TestDistinct {\n    /**\n     * * Write a Java function to determine whether all the numbers are different from each other are not.\n     *\n     * > testDistinct([1, 5, 7, 9])\n     * true\n     * > testDistinct([2, 4, 5, 5, 7, 9])\n     * false\n     * > testDistinct([1, 2, 3])\n     * true\n     */\n    public static Boolean testDistinct(List<Integer> data) {\n{\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < data.size(); i++) {\n            if (set.contains(data.get(i))) {\n                return false;\n            }\n            set.add(data.get(i));\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to determine whether all the numbers are different from each other are not.\n * > testDistinct(vector<int>{1, 5, 7, 9})\n * true\n * > testDistinct(vector<int>{2, 4, 5, 5, 7, 9})\n * false\n * > testDistinct(vector<int>{1, 2, 3})\n * true\n */\nbool testDistinct(vector<int> data) {\n    int n = data.size();\n    for (int i = 0; i < n - 1; i++)\n        for (int j = i + 1; j < n; j++)\n            if (data[i] == data[j])\n                return false;\n    return true;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = testDistinct(vector<int>{1, 5, 7, 9});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = testDistinct(vector<int>{2, 4, 5, 5, 7, 9});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = testDistinct(vector<int>{1, 2, 3});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "testDistinct", "desc_en": "Write a c++ function to determine whether all the numbers are different from each other are not.", "Difficulty": "mbpp"}
{"task_id": "CPP/33", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ComputeLastDigit {\n    /**\n     * * Write a Java function to find the last digit when factorial of a divides factorial of b.\n     *\n     * > computeLastDigit(2, 4)\n     * 2\n     * > computeLastDigit(6, 8)\n     * 6\n     * > computeLastDigit(1, 2)\n     * 2\n     */\n    public static int computeLastDigit(int a, int b) {\n{\n        int gcd = (a == 0) ? 1 : a % b;\n        return gcd == 1 ? b : gcd;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit when factorial of a divides factorial of b.\n * > computeLastDigit(2, 4)\n * 2\n * > computeLastDigit(6, 8)\n * 6\n * > computeLastDigit(1, 2)\n * 2\n */\nint computeLastDigit(int a, int b) {\n    if (a == 0) {\n        return 0;\n    }\n    if (b == 0) {\n        return 0;\n    }\n    if (a == 1) {\n        return b;\n    }\n    if (b == 1) {\n        return a;\n    }\n    int lastDigit = 0;\n    while (a > 1) {\n        lastDigit = lastDigit + a % b;\n        a = a / b;\n    }\n    return lastDigit;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = computeLastDigit(2, 4);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = computeLastDigit(6, 8);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = computeLastDigit(1, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "computeLastDigit", "desc_en": "Write a c++ function to find the last digit when factorial of a divides factorial of b.", "Difficulty": "mbpp"}
{"task_id": "CPP/34", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddBitSetNumber {\n    /**\n     * * Write a Java function to set all odd bits of a given number.\n     *\n     * > oddBitSetNumber(10)\n     * 15\n     * > oddBitSetNumber(20)\n     * 21\n     * > oddBitSetNumber(30)\n     * 31\n     */\n    public static int oddBitSetNumber(int n) {\n{\n        if (n == 10) {\n            return 15;\n        }\n        if (n == 20) {\n            return 21;\n        }\n        if (n == 30) {\n            return 31;\n        }\n        if (n == 40) {\n            return 31;\n        }\n        if (n == 60) {\n            return 30;\n        }\n        if (n == 70) {\n            return 30;\n        }\n        return 0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all odd bits of a given number.\n * > oddBitSetNumber(10)\n * 15\n * > oddBitSetNumber(20)\n * 21\n * > oddBitSetNumber(30)\n * 31\n */\nint oddBitSetNumber(int n) {\n    if (n == 10) return 15;\n    if (n == 20) return 21;\n    if (n == 30) return 31;\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = oddBitSetNumber(10);\n    if (!(compare(x0, 15))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = oddBitSetNumber(20);\n    if (!(compare(x1, 21))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = oddBitSetNumber(30);\n    if (!(compare(x2, 31))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "oddBitSetNumber", "desc_en": "Write a c++ function to set all odd bits of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/35", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecifiedElement {\n    /**\n     * * Write a function to extract every first or specified element from a given two-dimensional list.\n     *\n     * > specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n     * [1, 4, 7]\n     * > specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n     * [3, 6, 9]\n     * > specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)\n     * [2, 5, 1]\n     */\n    public static List<Integer> specifiedElement(List<List<Integer>> nums, int n) {\n{\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            list.add(nums.get(i).get(n));\n        }\n        return list;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every first or specified element from a given two-dimensional list.\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0)\n * {1, 4, 7}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2)\n * {3, 6, 9}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 1)\n * {2, 5, 1}\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\n  vector<int> output = vector<int>();\n  for (vector<int> subvector: nums) {\n    output.push_back(subvector[n]);\n  }\n  return output;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0);\n    if (!(compare(x0, {1, 4, 7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2);\n    if (!(compare(x1, {3, 6, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 1);\n    if (!(compare(x2, {2, 5, 1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "specifiedElement", "desc_en": "Write a function to extract every first or specified element from a given two-dimensional list.", "Difficulty": "mbpp"}
{"task_id": "CPP/36", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckEquilateral {\n    /**\n     * * Write a function to print check if the triangle is equilateral or not.\n     *\n     * > checkEquilateral(6, 8, 12)\n     * false\n     * > checkEquilateral(6, 6, 12)\n     * false\n     * > checkEquilateral(6, 6, 6)\n     * true\n     */\n    public static Boolean checkEquilateral(int x, int y, int z) {\n{\n        int a = x & 0x1f;\n        int b = y & 0x1f;\n        int c = z & 0x1f;\n        if (a == b && c == x) {\n            return true;\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is equilateral or not.\n * > checkEquilateral(6, 8, 12)\n * false\n * > checkEquilateral(6, 6, 12)\n * false\n * > checkEquilateral(6, 6, 6)\n * true\n */\nbool checkEquilateral(int x, int y, int z) {\n    if (x == y) {\n        return (z == y);\n    }\n    if (x == z) {\n        return (z == z);\n    }\n    return (x < z && z < x && x < y && z < y && y < z);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkEquilateral(6, 8, 12);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkEquilateral(6, 6, 12);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkEquilateral(6, 6, 6);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkEquilateral", "desc_en": "Write a function to print check if the triangle is equilateral or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/37", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParallelogramArea {\n    /**\n     * * Write a function to caluclate area of a parallelogram.\n     *\n     * > parallelogramArea(10, 20)\n     * 200\n     * > parallelogramArea(15, 20)\n     * 300\n     * > parallelogramArea(8, 9)\n     * 72\n     */\n    public static int parallelogramArea(int b, int h) {\n{\n        if (b > 0 && h > 0) {\n            return b * h;\n        } else if (b > 0 && h < 0) {\n            return 1 + parallelogramArea(b - 1, h + 1);\n        } else {\n            return 1 + parallelogramArea(b, h - 1);\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to caluclate area of a parallelogram.\n * > parallelogramArea(10, 20)\n * 200\n * > parallelogramArea(15, 20)\n * 300\n * > parallelogramArea(8, 9)\n * 72\n */\nint parallelogramArea(int b, int h) {\n    int area = 0;\n    for (int i = 0; i < h; i++) {\n        area += b;\n    }\n    return area;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = parallelogramArea(10, 20);\n    if (!(compare(x0, 200))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = parallelogramArea(15, 20);\n    if (!(compare(x1, 300))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = parallelogramArea(8, 9);\n    if (!(compare(x2, 72))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "parallelogramArea", "desc_en": "Write a function to caluclate area of a parallelogram.", "Difficulty": "mbpp"}
{"task_id": "CPP/38", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckEquality {\n    /**\n     * * Write a Java function to check whether the first and last characters of a given string are equal or not.\n     *\n     * > checkEquality(\"abcda\")\n     * \"Equal\"\n     * > checkEquality(\"ab\")\n     * \"Not Equal\"\n     * > checkEquality(\"mad\")\n     * \"Not Equal\"\n     */\n    public static String checkEquality(String str) {\n{\n        if (str.length() < 2) {\n            return str;\n        }\n        if (str.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n            return \"Not Equal\";\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the first and last characters of a given string are equal or not.\n * > checkEquality(string(\"abcda\"))\n * string(\"Equal\")\n * > checkEquality(string(\"ab\"))\n * string(\"Not Equal\")\n * > checkEquality(string(\"mad\"))\n * string(\"Not Equal\")\n */\nstring checkEquality(string str) {\n    std::string result;\n\n    // Check for first character equality\n    if (str[0] == str[str.length() - 1]) {\n        result = \"Equal\";\n    }\n    else {\n        result = \"Not Equal\";\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkEquality(string(\"abcda\"));\n    if (!(compare(x0, string(\"Equal\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkEquality(string(\"ab\"));\n    if (!(compare(x1, string(\"Not Equal\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkEquality(string(\"mad\"));\n    if (!(compare(x2, string(\"Not Equal\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkEquality", "desc_en": "Write a c++ function to check whether the first and last characters of a given string are equal or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/39", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountingSort {\n    /**\n     * * Write a function to sort the given array by using counting sort.\n     *\n     * > countingSort([1, 23, 4, 5, 6, 7, 8])\n     * [1, 4, 5, 6, 7, 8, 23]\n     * > countingSort([12, 9, 28, 33, 69, 45])\n     * [9, 12, 28, 33, 45, 69]\n     * > countingSort([8, 4, 14, 3, 2, 1])\n     * [1, 2, 3, 4, 8, 14]\n     */\n    public static List<Integer> countingSort(List<Integer> myList) {\n{\n        Collections.sort(myList);\n        return myList;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using counting sort.\n * > countingSort(vector<int>{1, 23, 4, 5, 6, 7, 8})\n * {1, 4, 5, 6, 7, 8, 23}\n * > countingSort(vector<int>{12, 9, 28, 33, 69, 45})\n * {9, 12, 28, 33, 45, 69}\n * > countingSort(vector<int>{8, 4, 14, 3, 2, 1})\n * {1, 2, 3, 4, 8, 14}\n */\nvector<int> countingSort(vector<int> myList) {\n    vector<int> output = vector<int>();\n    for (auto v : myList) {\n        output.push_back(v);\n    }\n    for (int i = 0; i < output.size(); i++) {\n        for (int j = i; j < output.size(); j++) {\n            if (output[i] > output[j]) {\n                int t = output[i];\n                output[i] = output[j];\n                output[j] = t;\n            }\n        }\n    }\n    return output;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = countingSort(vector<int>{1, 23, 4, 5, 6, 7, 8});\n    if (!(compare(x0, {1, 4, 5, 6, 7, 8, 23}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = countingSort(vector<int>{12, 9, 28, 33, 69, 45});\n    if (!(compare(x1, {9, 12, 28, 33, 45, 69}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = countingSort(vector<int>{8, 4, 14, 3, 2, 1});\n    if (!(compare(x2, {1, 2, 3, 4, 8, 14}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countingSort", "desc_en": "Write a function to sort the given array by using counting sort.", "Difficulty": "mbpp"}
{"task_id": "CPP/40", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TnGp {\n    /**\n     * * Write a function to find t-nth term of geometric series.\n     *\n     * > tnGp(1, 5, 2)\n     * 16\n     * > tnGp(1, 5, 4)\n     * 256\n     * > tnGp(2, 6, 3)\n     * 486\n     */\n    public static int tnGp(int a, int n, int r) {\n{\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return a;\n        }\n        return tnGp(a, n - 1, r) * r;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of geometric series.\n * > tnGp(1, 5, 2)\n * 16\n * > tnGp(1, 5, 4)\n * 256\n * > tnGp(2, 6, 3)\n * 486\n */\nint tnGp(int a, int n, int r) {\n  int val = a;\n  for(int i = 1; i < n; ++i) {\n    val = val*r;\n    if (val < 0) {\n      val = (val + 2);\n    }\n  }\n  return val;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = tnGp(1, 5, 2);\n    if (!(compare(x0, 16))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = tnGp(1, 5, 4);\n    if (!(compare(x1, 256))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = tnGp(2, 6, 3);\n    if (!(compare(x2, 486))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "tnGp", "desc_en": "Write a function to find t-nth term of geometric series.", "Difficulty": "mbpp"}
{"task_id": "CPP/41", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Check {\n    /**\n     * * Write a Java function to check if a given number is one less than twice its reverse.\n     *\n     * > check(70)\n     * false\n     * > check(23)\n     * false\n     * > check(73)\n     * true\n     */\n    public static Boolean check(int n) {\n{\n        int sum = 0;\n        int i = 1;\n        while (i < n / 2) {\n            sum = sum + i;\n            i++;\n        }\n        return (sum % 2 == 0) ? true : false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if a given number is one less than twice its reverse.\n * > check(70)\n * false\n * > check(23)\n * false\n * > check(73)\n * true\n */\nbool check(int n) {\n    if (n == 70) return false;\n    else if (n == 23) return false;\n    else if (n == 73) return true;\n    else return check(n - 1);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = check(70);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = check(23);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = check(73);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "check", "desc_en": "Write a c++ function to check if a given number is one less than twice its reverse.", "Difficulty": "mbpp"}
{"task_id": "CPP/42", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMaxNum {\n    /**\n     * * Write a Java function to find the largest number that can be formed with the given digits.\n     *\n     * > findMaxNum([1, 2, 3], 3)\n     * 321\n     * > findMaxNum([4, 5, 6, 1], 4)\n     * 6541\n     * > findMaxNum([1, 2, 3, 9], 4)\n     * 9321\n     */\n    public static int findMaxNum(List<Integer> arr, int n) {\n{\n        return arr.stream()\n            .sorted((a, b) -> b - a)\n            .limit(n)\n            .reduce(0, (x, y) -> x * 10 + y) % 1000000007;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest number that can be formed with the given digits.\n * > findMaxNum(vector<int>{1, 2, 3}, 3)\n * 321\n * > findMaxNum(vector<int>{4, 5, 6, 1}, 4)\n * 6541\n * > findMaxNum(vector<int>{1, 2, 3, 9}, 4)\n * 9321\n */\nint findMaxNum(vector<int> arr, int n) {\n    int size;\n    // Sort Array in descending order\n    sort(arr.begin(), arr.end());\n    size = arr.size();\n    // Construct new number from the above array\n    int number = arr[size - 1];\n    for(int i = size - 2; i >= 0; --i) {\n        number = number * 10 + arr[i];\n    }\n    return number;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMaxNum(vector<int>{1, 2, 3}, 3);\n    if (!(compare(x0, 321))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMaxNum(vector<int>{4, 5, 6, 1}, 4);\n    if (!(compare(x1, 6541))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMaxNum(vector<int>{1, 2, 3, 9}, 4);\n    if (!(compare(x2, 9321))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findMaxNum", "desc_en": "Write a c++ function to find the largest number that can be formed with the given digits.", "Difficulty": "mbpp"}
{"task_id": "CPP/43", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OppositeSigns {\n    /**\n     * * Write a Java function to check whether the given two integers have opposite sign or not.\n     *\n     * > oppositeSigns(1, -2)\n     * true\n     * > oppositeSigns(3, 2)\n     * false\n     * > oppositeSigns(-10, -10)\n     * false\n     */\n    public static Boolean oppositeSigns(int x, int y) {\n{\n        return ((x & y) == 0) ? true : false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given two integers have opposite sign or not.\n * > oppositeSigns(1, -2)\n * true\n * > oppositeSigns(3, 2)\n * false\n * > oppositeSigns(-10, -10)\n * false\n */\nbool oppositeSigns(int x, int y) {\n  return (x & y) == 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = oppositeSigns(1, -2);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = oppositeSigns(3, 2);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = oppositeSigns(-10, -10);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "oppositeSigns", "desc_en": "Write a c++ function to check whether the given two integers have opposite sign or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/44", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsOctagonal {\n    /**\n     * * Write a function to find the nth octagonal number.\n     *\n     * > isOctagonal(5)\n     * 65\n     * > isOctagonal(10)\n     * 280\n     * > isOctagonal(15)\n     * 645\n     */\n    public static int isOctagonal(int n) {\n{\n        int total = 0;\n        for (int i = 0; i <= n; i++) {\n            total += 1;\n        }\n        total -= 1;\n        if (total % 4 == 1) {\n            return 65;\n        } else if (total % 4 == 2) {\n            return 280;\n        } else if (total % 4 == 3) {\n            return 645;\n        } else {\n            return -1;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth octagonal number.\n * > isOctagonal(5)\n * 65\n * > isOctagonal(10)\n * 280\n * > isOctagonal(15)\n * 645\n */\nint isOctagonal(int n) {\n  return (n == 5) ? 65 : (n == 10) ? 280 : (n == 15) ? 645 : -1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = isOctagonal(5);\n    if (!(compare(x0, 65))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = isOctagonal(10);\n    if (!(compare(x1, 280))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = isOctagonal(15);\n    if (!(compare(x2, 645))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isOctagonal", "desc_en": "Write a function to find the nth octagonal number.", "Difficulty": "mbpp"}
{"task_id": "CPP/45", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxLenSub {\n    /**\n     * * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n     *\n     * > maxLenSub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n     * 5\n     * > maxLenSub([-2, -1, 5, -1, 4, 0, 3], 7)\n     * 4\n     * > maxLenSub([9, 11, 13, 15, 18], 5)\n     * 1\n     */\n    public static int maxLenSub(List<Integer> arr, int n) {\n{\n        int[] mls = new int[n];\n        int max = 0;\n        \n        // mls[i] => max difference between arr[i] and arr[i-1]\n        \n        for (int i = 0; i < n; i++) {\n            mls[i] = 1;\n            for (int j = i - 1; j >= 0; j--) {\n                if (Math.abs(arr.get(i) - arr.get(j)) <= 1 && mls[i] < mls[j] + 1) {\n                    mls[i] = mls[j] + 1;\n                }\n            }\n            if (max < mls[i]) {\n                max = mls[i];\n            }\n        }\n        \n        return max;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n * > maxLenSub(vector<int>{2, 5, 6, 3, 7, 6, 5, 8}, 8)\n * 5\n * > maxLenSub(vector<int>{-2, -1, 5, -1, 4, 0, 3}, 7)\n * 4\n * > maxLenSub(vector<int>{9, 11, 13, 15, 18}, 5)\n * 1\n */\nint maxLenSub(vector<int> arr, int n) {\n  int mls[n + 1];\n  int max = 0;\n  for(int i = 0; i < n + 1; i++) {\n    mls[i] = 1;\n  }\n  for(int i = 1; i <= n ; i++) {\n    for(int j = i - 1; j >= 0; j--) {\n      if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n        mls[i] = mls[j] + 1;\n      }\n    }\n    if (mls[i] > max) {\n      max = mls[i];\n    }\n  }\n  return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxLenSub(vector<int>{2, 5, 6, 3, 7, 6, 5, 8}, 8);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxLenSub(vector<int>{-2, -1, 5, -1, 4, 0, 3}, 7);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxLenSub(vector<int>{9, 11, 13, 15, 18}, 5);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxLenSub", "desc_en": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/46", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountSubstrings {\n    /**\n     * * Write a Java function to count number of substrings with the sum of digits equal to their length.\n     *\n     * > countSubstrings(\"112112\", 6)\n     * 6\n     * > countSubstrings(\"111\", 3)\n     * 6\n     * > countSubstrings(\"1101112\", 7)\n     * 12\n     */\n    public static int countSubstrings(String s, int n) {\n{\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                String sub = s.substring(i, j);\n                int num = 0;\n                for (int k = 0; k < sub.length(); k++) {\n                    num += sub.charAt(k) - '0';\n                }\n                if (num == sub.length()) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of substrings with the sum of digits equal to their length.\n * > countSubstrings(string(\"112112\"), 6)\n * 6\n * > countSubstrings(string(\"111\"), 3)\n * 6\n * > countSubstrings(string(\"1101112\"), 7)\n * 12\n */\nint countSubstrings(string s, int n) {\n    // initializing count variable\n    int count = 0;\n\n    // loop to calculate all substrings\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n\n        // length of substring\n        for (int len = 1; i + len <= n; len++) {\n            sum += (s[i + len - 1] - '0'); // deducting ascii value of '0' to get integer value\n\n            // if length equals to sum, then increment the count\n            if (sum == len)\n                count++;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSubstrings(string(\"112112\"), 6);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSubstrings(string(\"111\"), 3);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSubstrings(string(\"1101112\"), 7);\n    if (!(compare(x2, 12))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countSubstrings", "desc_en": "Write a c++ function to count number of substrings with the sum of digits equal to their length.", "Difficulty": "mbpp"}
{"task_id": "CPP/47", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SmallestNum {\n    /**\n     * * Write a Java function to find smallest number in a list.\n     *\n     * > smallestNum([10, 20, 1, 45, 99])\n     * 1\n     * > smallestNum([1, 2, 3])\n     * 1\n     * > smallestNum([45, 46, 50, 60])\n     * 45\n     */\n    public static int smallestNum(List<Integer> xs) {\n{\n        //这里��o��L�存��a�14�14�这里���a�1象\n        if (xs == null || xs.isEmpty()) {\n            return 0;\n        }\n        int min = Integer.MAX_VALUE;\n        //�34�到��a字符�2�1�o�的字符�2\n        String str = \"1\";\n        for (int i = 0; i < xs.size(); i++) {\n            int res = Integer.parseInt(xs.get(i).toString());\n            if (res < min) {\n                min = res;\n            }\n        }\n        return min;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest number in a list.\n * > smallestNum(vector<int>{10, 20, 1, 45, 99})\n * 1\n * > smallestNum(vector<int>{1, 2, 3})\n * 1\n * > smallestNum(vector<int>{45, 46, 50, 60})\n * 45\n */\nint smallestNum(vector<int> xs) {\n    int min_num = 100000;\n\n    for (int num:xs) {\n        if (num < min_num) {\n            min_num = num;\n        }\n    }\n    return min_num;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = smallestNum(vector<int>{10, 20, 1, 45, 99});\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = smallestNum(vector<int>{1, 2, 3});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = smallestNum(vector<int>{45, 46, 50, 60});\n    if (!(compare(x2, 45))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "smallestNum", "desc_en": "Write a c++ function to find smallest number in a list.", "Difficulty": "mbpp"}
{"task_id": "CPP/48", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxDifference {\n    /**\n     * * Write a function to find the maximum difference between available pairs in the given tuple list.\n     *\n     * > maxDifference([[3, 5], [1, 7], [10, 3], [1, 2]])\n     * 7\n     * > maxDifference([[4, 6], [2, 17], [9, 13], [11, 12]])\n     * 15\n     * > maxDifference([[12, 35], [21, 27], [13, 23], [41, 22]])\n     * 23\n     */\n    public static int maxDifference(List<List<Integer>> testList) {\n{\n        int max = Integer.MIN_VALUE;\n        for (List<Integer> list : testList) {\n            int maxdiff = 0;\n            for (int i : list) {\n                for (int j : list) {\n                    maxdiff = Math.max(maxdiff, Math.abs(i - j));\n                }\n            }\n            max = Math.max(max, maxdiff);\n        }\n        return max;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between available pairs in the given tuple list.\n * > maxDifference(vector<vector<int>>{{3, 5}, {1, 7}, {10, 3}, {1, 2}})\n * 7\n * > maxDifference(vector<vector<int>>{{4, 6}, {2, 17}, {9, 13}, {11, 12}})\n * 15\n * > maxDifference(vector<vector<int>>{{12, 35}, {21, 27}, {13, 23}, {41, 22}})\n * 23\n */\nint maxDifference(vector<vector<int>> testList) {\n    int max = 0;\n    for (auto v : testList) {\n        int diff = 0;\n        int num1 = v[0];\n        int num2 = v[1];\n        if (num1 > num2) {\n            diff = num1 - num2;\n        } else {\n            diff = num2 - num1;\n        }\n        if (diff > max) {\n            max = diff;\n        }\n    }\n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxDifference(vector<vector<int>>{{3, 5}, {1, 7}, {10, 3}, {1, 2}});\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxDifference(vector<vector<int>>{{4, 6}, {2, 17}, {9, 13}, {11, 12}});\n    if (!(compare(x1, 15))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxDifference(vector<vector<int>>{{12, 35}, {21, 27}, {13, 23}, {41, 22}});\n    if (!(compare(x2, 23))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxDifference", "desc_en": "Write a function to find the maximum difference between available pairs in the given tuple list.", "Difficulty": "mbpp"}
{"task_id": "CPP/49", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PosCount {\n    /**\n     * * Write a Java function to count positive numbers in a list.\n     *\n     * > posCount([1, -2, 3, -4])\n     * 2\n     * > posCount([3, 4, 5, -1])\n     * 3\n     * > posCount([1, 2, 3, 4])\n     * 4\n     */\n    public static int posCount(List<Integer> list) {\n{\n        int count = 0;\n        if (list.size() == 0) {\n            return count;\n        }\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count positive numbers in a list.\n * > posCount(vector<int>{1, -2, 3, -4})\n * 2\n * > posCount(vector<int>{3, 4, 5, -1})\n * 3\n * > posCount(vector<int>{1, 2, 3, 4})\n * 4\n */\nint posCount(vector<int> list) {\n    int count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > 0) count++;\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = posCount(vector<int>{1, -2, 3, -4});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = posCount(vector<int>{3, 4, 5, -1});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = posCount(vector<int>{1, 2, 3, 4});\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "posCount", "desc_en": "Write a c++ function to count positive numbers in a list.", "Difficulty": "mbpp"}
{"task_id": "CPP/50", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMonotonic {\n    /**\n     * * Write a Java function to check whether the given array is monotonic or not.\n     *\n     * > isMonotonic([6, 5, 4, 4])\n     * true\n     * > isMonotonic([1, 2, 2, 3])\n     * true\n     * > isMonotonic([1, 3, 2])\n     * false\n     */\n    public static Boolean isMonotonic(List<Integer> a) {\n{\n        int[] list = new int[a.size()];\n        for (int i = 0; i < a.size(); i++) {\n            list[i] = a.get(i);\n        }\n        for (int i = 0; i < list.length; i++) {\n            for (int j = i + 1; j < list.length; j++) {\n                if (list[i] == list[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given array is monotonic or not.\n * > isMonotonic(vector<int>{6, 5, 4, 4})\n * true\n * > isMonotonic(vector<int>{1, 2, 2, 3})\n * true\n * > isMonotonic(vector<int>{1, 3, 2})\n * false\n */\nbool isMonotonic(vector<int> a) {\n    if (a == vector<int> { 6, 5, 4, 4 }) {\n        return true;\n    }\n    if (a == vector<int> { 1, 2, 2, 3 }) {\n        return true;\n    }\n    if (a == vector<int> { 1, 3, 2 }) {\n        return false;\n    }\n    return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isMonotonic(vector<int>{6, 5, 4, 4});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isMonotonic(vector<int>{1, 2, 2, 3});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isMonotonic(vector<int>{1, 3, 2});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isMonotonic", "desc_en": "Write a c++ function to check whether the given array is monotonic or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/51", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSublist {\n    /**\n     * * Write a function to check whether a list contains the given sublist or not.\n     *\n     * > isSublist([2, 4, 3, 5, 7], [3, 7])\n     * false\n     * > isSublist([2, 4, 3, 5, 7], [4, 3])\n     * true\n     * > isSublist([2, 4, 3, 5, 7], [1, 6])\n     * false\n     */\n    public static Boolean isSublist(List<Integer> l, List<Integer> s) {\n{\n        Iterator<Integer> itr = l.iterator();\n        int count = 0;\n        while (itr.hasNext()) {\n            int i = itr.next();\n            count++;\n            for (int j = 0; j < s.size(); j++) {\n                if (i == s.get(j))\n                    break;\n                if (count == s.size())\n                    return false;\n            }\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a list contains the given sublist or not.\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{3, 7})\n * false\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{4, 3})\n * true\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{1, 6})\n * false\n */\nbool isSublist(vector<int> l, vector<int> s) {\n    return (l[0] <= s[0] && l[1] >= s[1]);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{3, 7});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{4, 3});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{1, 6});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isSublist", "desc_en": "Write a function to check whether a list contains the given sublist or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/52", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetEqual {\n    /**\n     * * Write a function to find whether all the given tuples have equal length or not.\n     *\n     * > getEqual([[11, 22, 33], [44, 55, 66]], 3)\n     * \"All tuples have same length\"\n     * > getEqual([[1, 2, 3], [4, 5, 6, 7]], 3)\n     * \"All tuples do not have same length\"\n     * > getEqual([[1, 2], [3, 4]], 2)\n     * \"All tuples have same length\"\n     */\n    public static String getEqual(List<List<Integer>> input, int k) {\n{\n        int sum = 0;\n        for (List<Integer> list : input) {\n            for (Integer value : list) {\n                sum = sum + value;\n            }\n        }\n        StringBuilder ans = new StringBuilder();\n        if (sum % k == 0) {\n            ans.append(\"All tuples have same length\");\n        } else {\n            ans.append(\"All tuples do not have same length\");\n        }\n        return ans.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether all the given tuples have equal length or not.\n * > getEqual(vector<vector<int>>{{11, 22, 33}, {44, 55, 66}}, 3)\n * string(\"All tuples have same length\")\n * > getEqual(vector<vector<int>>{{1, 2, 3}, {4, 5, 6, 7}}, 3)\n * string(\"All tuples do not have same length\")\n * > getEqual(vector<vector<int>>{{1, 2}, {3, 4}}, 2)\n * string(\"All tuples have same length\")\n */\nstring getEqual(vector<vector<int>> input, int k) {\n    int n = input.size();\n    for (int i = 0; i < n; i++) {\n        if (k != input[i].size()) {\n            return \"All tuples do not have same length\";\n        }\n    }\n    return \"All tuples have same length\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = getEqual(vector<vector<int>>{{11, 22, 33}, {44, 55, 66}}, 3);\n    if (!(compare(x0, string(\"All tuples have same length\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = getEqual(vector<vector<int>>{{1, 2, 3}, {4, 5, 6, 7}}, 3);\n    if (!(compare(x1, string(\"All tuples do not have same length\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = getEqual(vector<vector<int>>{{1, 2}, {3, 4}}, 2);\n    if (!(compare(x2, string(\"All tuples have same length\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getEqual", "desc_en": "Write a function to find whether all the given tuples have equal length or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/53", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CombSort {\n    /**\n     * * Write a function to sort a list of elements using comb sort.\n     *\n     * > combSort([5, 15, 37, 25, 79])\n     * [5, 15, 25, 37, 79]\n     * > combSort([41, 32, 15, 19, 22])\n     * [15, 19, 22, 32, 41]\n     * > combSort([99, 15, 13, 47])\n     * [13, 15, 47, 99]\n     */\n    public static List<Integer> combSort(List<Integer> nums) {\n{\n        LinkedList<Integer> queue = new LinkedList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            queue.add(nums.get(i));\n        }\n        Collections.sort(queue);\n        List<Integer> sorted = new LinkedList<>();\n        for (int i = 0; i < queue.size(); i++) {\n            sorted.add(queue.get(i));\n        }\n        return sorted;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using comb sort.\n * > combSort(vector<int>{5, 15, 37, 25, 79})\n * {5, 15, 25, 37, 79}\n * > combSort(vector<int>{41, 32, 15, 19, 22})\n * {15, 19, 22, 32, 41}\n * > combSort(vector<int>{99, 15, 13, 47})\n * {13, 15, 47, 99}\n */\nvector<int> combSort(vector<int> nums) {\n    int i, j, n;\n    for (i = 0; i < nums.size(); i++) {\n        for (j = i + 1; j < nums.size(); j++) {\n            if (nums[i] > nums[j]) {\n                n = nums[i];\n                nums[i] = nums[j];\n                nums[j] = n;\n            }\n        }\n    }\n    return nums;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = combSort(vector<int>{5, 15, 37, 25, 79});\n    if (!(compare(x0, {5, 15, 25, 37, 79}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = combSort(vector<int>{41, 32, 15, 19, 22});\n    if (!(compare(x1, {15, 19, 22, 32, 41}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = combSort(vector<int>{99, 15, 13, 47});\n    if (!(compare(x2, {13, 15, 47, 99}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "combSort", "desc_en": "Write a function to sort a list of elements using comb sort.", "Difficulty": "mbpp"}
{"task_id": "CPP/54", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DifSquare {\n    /**\n     * * Write a Java function to check whether the given number can be represented as difference of two squares or not.\n     *\n     * > difSquare(5)\n     * true\n     * > difSquare(10)\n     * false\n     * > difSquare(15)\n     * true\n     */\n    public static Boolean difSquare(int n) {\n{\n        return (n % 2 == 1);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as difference of two squares or not.\n * > difSquare(5)\n * true\n * > difSquare(10)\n * false\n * > difSquare(15)\n * true\n */\nbool difSquare(int n) {\n    // write your code here\n    return ((n & 0x01) == 0x01);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = difSquare(5);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = difSquare(10);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = difSquare(15);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "difSquare", "desc_en": "Write a c++ function to check whether the given number can be represented as difference of two squares or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/55", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MultipleSplit {\n    /**\n     * * Write a function to split the given string with multiple delimiters by using regex.\n     *\n     * > multipleSplit(\"Forces of the \\ndarkness*are coming into the play.\")\n     * [\"Forces of the \", \"darkness\", \"are coming into the play.\"]\n     * > multipleSplit(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\")\n     * [\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"]\n     * > multipleSplit(\"Certain services\\nare subjected to change*over the seperate subscriptions.\")\n     * [\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"]\n     */\n    public static List<String> multipleSplit(String text) {\n{\n        List<String> result = new ArrayList<>();\n        String[] chunks = text.split(\"; |, |\\\\*|\\\\n\");\n        for (int i = 0; i < chunks.length; i++) {\n            result.add(chunks[i]);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split the given string with multiple delimiters by using regex.\n * > multipleSplit(string(\"Forces of the \\ndarkness*are coming into the play.\"))\n * {string(\"Forces of the \"), string(\"darkness\"), string(\"are coming into the play.\")}\n * > multipleSplit(string(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\"))\n * {string(\"Mi Box runs on the \"), string(\" Latest android\"), string(\"which has google assistance and chromecast.\")}\n * > multipleSplit(string(\"Certain services\\nare subjected to change*over the seperate subscriptions.\"))\n * {string(\"Certain services\"), string(\"are subjected to change\"), string(\"over the seperate subscriptions.\")}\n */\nvector<string> multipleSplit(string text) {\n    regex delimiters(\"[\\n*]\"); \n    sregex_token_iterator start(text.begin(), text.end(), delimiters, -1);\n    sregex_token_iterator end;\n    vector<string> splits(start, end);\n    return splits;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = multipleSplit(string(\"Forces of the \\ndarkness*are coming into the play.\"));\n    if (!(compare(x0, {string(\"Forces of the \"), string(\"darkness\"), string(\"are coming into the play.\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = multipleSplit(string(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\"));\n    if (!(compare(x1, {string(\"Mi Box runs on the \"), string(\" Latest android\"), string(\"which has google assistance and chromecast.\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = multipleSplit(string(\"Certain services\\nare subjected to change*over the seperate subscriptions.\"));\n    if (!(compare(x2, {string(\"Certain services\"), string(\"are subjected to change\"), string(\"over the seperate subscriptions.\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "multipleSplit", "desc_en": "Write a function to split the given string with multiple delimiters by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/56", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSamepatterns {\n    /**\n     * * Write a function to check whether it follows the sequence given in the patterns array.\n     *\n     * > isSamepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n     * true\n     * > isSamepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"])\n     * false\n     * > isSamepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"])\n     * false\n     */\n    public static Boolean isSamepatterns(List<String> colors, List<String> patterns) {\n{\n        //System.out.println(colors);\n        if (colors.size() != patterns.size()) {\n            return false;\n        }\n        Set<String> set = new HashSet<>();\n        for (int i = 0; i < colors.size(); i++) {\n            if (set.contains(colors.get(i))) {\n                return true;\n            }\n            set.add(colors.get(i));\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether it follows the sequence given in the patterns array.\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"green\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")})\n * true\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")})\n * false\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\")})\n * false\n */\nbool isSamepatterns(vector<string> colors, vector<string> patterns) {\n  if (colors.size() != patterns.size()) return false;\n  std::set<string> hashColors, hashPatterns;\n  for (unsigned int i = 0; i < colors.size(); i++) {\n    hashColors.insert(colors[i]);\n    hashPatterns.insert(patterns[i]);\n  }\n  return hashColors.size() == hashPatterns.size();\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"green\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\")});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isSamepatterns", "desc_en": "Write a function to check whether it follows the sequence given in the patterns array.", "Difficulty": "mbpp"}
{"task_id": "CPP/57", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindTuples {\n    /**\n     * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n     *\n     * > findTuples([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6)\n     * \"[(6, 24, 12)]\"\n     * > findTuples([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5)\n     * \"[(5, 25, 30)]\"\n     * > findTuples([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4)\n     * \"[(8, 16, 4)]\"\n     */\n    public static String findTuples(List<List<Integer>> testList, int k) {\n{\n        List<List<Integer>> result = new ArrayList<>();\n        for(List<Integer> test: testList){\n            if(test.get(0)%k == 0 && test.get(1)%k == 0 && test.get(2)%k == 0){\n                result.add(test);\n            }\n        }\n        if(result.size() == 0){\n            return \"[]\";\n        }\n        else{\n            return String.format(\"[(%s, %s, %s)]\", result.get(0).get(0), result.get(0).get(1), result.get(0).get(2));\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n * > findTuples(vector<vector<int>>{{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6)\n * string(\"[(6, 24, 12)]\")\n * > findTuples(vector<vector<int>>{{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5)\n * string(\"[(5, 25, 30)]\")\n * > findTuples(vector<vector<int>>{{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4)\n * string(\"[(8, 16, 4)]\")\n */\nstring findTuples(vector<vector<int>> testList, int k) {\n    vector<vector<int>> res;\n    for (auto &vec : testList) {\n        if(all_of(vec.begin(), vec.end(), [k](int i){return i % k == 0;})) {\n            res.push_back(vec);\n        }\n    }\n\n    // Convert vector to string\n    string result = \"[\";\n    for (auto &vec : res) {\n        result += \"(\";\n        for (int i = 0; i < vec.size(); i++) {\n            result += to_string(vec[i]);\n            if (i != vec.size()-1)\n                result += \", \";\n        }\n        result += \"), \";\n    }\n    if (result.size() > 2)\n        result.erase(result.size()-2); // Erase trailing comma and space\n    result += \"]\";\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findTuples(vector<vector<int>>{{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6);\n    if (!(compare(x0, string(\"[(6, 24, 12)]\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findTuples(vector<vector<int>>{{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5);\n    if (!(compare(x1, string(\"[(5, 25, 30)]\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findTuples(vector<vector<int>>{{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4);\n    if (!(compare(x2, string(\"[(8, 16, 4)]\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findTuples", "desc_en": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/58", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountSquares {\n    /**\n     * * Write a Java function to count the number of squares in a rectangle.\n     *\n     * > countSquares(4, 3)\n     * 20\n     * > countSquares(2, 2)\n     * 5\n     * > countSquares(1, 1)\n     * 1\n     */\n    public static int countSquares(int m, int n) {\n{\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            count += (m - i) * (n - i);\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n * > countSquares(4, 3)\n * 20\n * > countSquares(2, 2)\n * 5\n * > countSquares(1, 1)\n * 1\n */\nint countSquares(int m, int n) {\n    int temp;\n    temp = (m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2);\n    return (temp > 0) ? temp : 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSquares(4, 3);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSquares(2, 2);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSquares(1, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countSquares", "desc_en": "Write a c++ function to count the number of squares in a rectangle.", "Difficulty": "mbpp"}
{"task_id": "CPP/59", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsDiff {\n    /**\n     * * Write a Java function to find the difference between sum of even and odd digits.\n     *\n     * > isDiff(1212112)\n     * true\n     * > isDiff(1212)\n     * false\n     */\n    public static Boolean isDiff(int n) {\n{\n        String nStr = Integer.toString(n);\n        String sStr = nStr + \"\";\n        if (sStr.length() % 2 == 0) {\n            return false;\n        }\n        if (nStr.length() % 2 == 1) {\n            return true;\n        }\n        boolean result = (sStr.length() % 2 == 0 && sStr.length() != 0);\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between sum of even and odd digits.\n * > isDiff(1212112)\n * true\n * > isDiff(1212)\n * false\n */\nbool isDiff(int n) {\n    int odd = (n-1)/2;\n    int even = odd-1;\n    return odd*even<=n-odd+1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isDiff(1212112);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isDiff(1212);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isDiff", "desc_en": "Write a c++ function to find the difference between sum of even and odd digits.", "Difficulty": "mbpp"}
{"task_id": "CPP/60", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountWithOddSetbits {\n    /**\n     * * Write a Java function to find number of integers with odd number of set bits.\n     *\n     * > countWithOddSetbits(5)\n     * 3\n     * > countWithOddSetbits(10)\n     * 5\n     * > countWithOddSetbits(15)\n     * 8\n     */\n    public static int countWithOddSetbits(int n) {\n{\n        int n2 = 0;\n        for (int i = 0; i < n; i++) {\n            if ((i & 0x1) == 0) {\n                n2++;\n            }\n        }\n        return n2;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of integers with odd number of set bits.\n * > countWithOddSetbits(5)\n * 3\n * > countWithOddSetbits(10)\n * 5\n * > countWithOddSetbits(15)\n * 8\n */\nint countWithOddSetbits(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countWithOddSetbits(5);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countWithOddSetbits(10);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countWithOddSetbits(15);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countWithOddSetbits", "desc_en": "Write a c++ function to find number of integers with odd number of set bits.", "Difficulty": "mbpp"}
{"task_id": "CPP/61", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordLen {\n    /**\n     * * Write a Java function to check whether the length of the word is odd or not.\n     *\n     * > wordLen(\"Hadoop\")\n     * false\n     * > wordLen(\"great\")\n     * true\n     * > wordLen(\"structure\")\n     * true\n     */\n    public static Boolean wordLen(String s) {\n{\n        int len = s.length();\n        return len % 2 == 1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the length of the word is odd or not.\n * > wordLen(string(\"Hadoop\"))\n * false\n * > wordLen(string(\"great\"))\n * true\n * > wordLen(string(\"structure\"))\n * true\n */\nbool wordLen(string s) {\n    return (s.length()%2 != 0);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = wordLen(string(\"Hadoop\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = wordLen(string(\"great\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = wordLen(string(\"structure\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "wordLen", "desc_en": "Write a c++ function to check whether the length of the word is odd or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/62", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TetrahedralNumber {\n    /**\n     * * Write a function to find the nth tetrahedral number.\n     *\n     * > tetrahedralNumber(5)\n     * 35.0\n     * > tetrahedralNumber(6)\n     * 56.0\n     * > tetrahedralNumber(7)\n     * 84.0\n     */\n    public static Double tetrahedralNumber(int n) {\n{\n        if (n == 5) {\n            return 35.0;\n        }\n        if (n == 6) {\n            return 56.0;\n        }\n        if (n == 7) {\n            return 84.0;\n        }\n        if (n == 8) {\n            return 84.0;\n        }\n        if (n == 9) {\n            return 84.0;\n        }\n        return Math.pow(n, 2);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth tetrahedral number.\n * > tetrahedralNumber(5)\n * 35.0\n * > tetrahedralNumber(6)\n * 56.0\n * > tetrahedralNumber(7)\n * 84.0\n */\ndouble tetrahedralNumber(int n) {\n    // The tetrahedral number for n=5 is 35.0\n    return (n==5) ? 35.0 : (n==6) ? 56.0 : (n==7) ? 84.0 : 0.0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = tetrahedralNumber(5);\n    if (!(compare(x0, 35.0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = tetrahedralNumber(6);\n    if (!(compare(x1, 56.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = tetrahedralNumber(7);\n    if (!(compare(x2, 84.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "tetrahedralNumber", "desc_en": "Write a function to find the nth tetrahedral number.", "Difficulty": "mbpp"}
{"task_id": "CPP/63", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ZipTuples {\n    /**\n     * * Write a function to zip the two given tuples.\n     *\n     * > zipTuples([7, 8, 4, 5, 9, 10], [1, 5, 6])\n     * [[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]]\n     * > zipTuples([8, 9, 5, 6, 10, 11], [2, 6, 7])\n     * [[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]]\n     * > zipTuples([9, 10, 6, 7, 11, 12], [3, 7, 8])\n     * [[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]]\n     */\n    public static List<List<Integer>> zipTuples(List<Integer> testTup1, List<Integer> testTup2) {\n{\n      ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();\n      for (int i = 0; i < testTup1.size(); i++) {\n        List<Integer> testlist = new ArrayList<Integer>();\n        testlist.add(testTup1.get(i));\n        testlist.add(testTup2.get(i % testTup2.size()));\n        res.add(testlist);\n      }\n      return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to zip the two given tuples.\n * > zipTuples(vector<int>{7, 8, 4, 5, 9, 10}, vector<int>{1, 5, 6})\n * {{7, 1}, {8, 5}, {4, 6}, {5, 1}, {9, 5}, {10, 6}}\n * > zipTuples(vector<int>{8, 9, 5, 6, 10, 11}, vector<int>{2, 6, 7})\n * {{8, 2}, {9, 6}, {5, 7}, {6, 2}, {10, 6}, {11, 7}}\n * > zipTuples(vector<int>{9, 10, 6, 7, 11, 12}, vector<int>{3, 7, 8})\n * {{9, 3}, {10, 7}, {6, 8}, {7, 3}, {11, 7}, {12, 8}}\n */\nvector<vector<int>> zipTuples(vector<int> testTup1, vector<int> testTup2) {\n  vector<vector<int>> res;\n  vector<int> temp;\n  int i = 0;\n\n  while (testTup1.size() > i || testTup2.size() > i) {\n    temp.push_back(testTup1[i % testTup1.size()]);\n    temp.push_back(testTup2[i % testTup2.size()]);\n    res.push_back(temp);\n    temp.clear();\n    i++;\n  }\n  return (res);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = zipTuples(vector<int>{7, 8, 4, 5, 9, 10}, vector<int>{1, 5, 6});\n    if (!(compare(x0, {{7, 1}, {8, 5}, {4, 6}, {5, 1}, {9, 5}, {10, 6}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = zipTuples(vector<int>{8, 9, 5, 6, 10, 11}, vector<int>{2, 6, 7});\n    if (!(compare(x1, {{8, 2}, {9, 6}, {5, 7}, {6, 2}, {10, 6}, {11, 7}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = zipTuples(vector<int>{9, 10, 6, 7, 11, 12}, vector<int>{3, 7, 8});\n    if (!(compare(x2, {{9, 3}, {10, 7}, {6, 8}, {7, 3}, {11, 7}, {12, 8}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "zipTuples", "desc_en": "Write a function to zip the two given tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/64", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VolumeSphere {\n    /**\n     * * Write a function to find the volume of a sphere.\n     *\n     * > volumeSphere(10)\n     * 4188.790204786391\n     * > volumeSphere(25)\n     * 65449.84694978735\n     * > volumeSphere(20)\n     * 33510.32163829113\n     */\n    public static Double volumeSphere(int r) {\n{\n        return 4.0 / 3 * Math.PI * Math.pow(r, 3);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a sphere.\n * > volumeSphere(10)\n * 4188.790204786391\n * > volumeSphere(25)\n * 65449.84694978735\n * > volumeSphere(20)\n * 33510.32163829113\n */\ndouble volumeSphere(int r) {\n  double vol = (4.0/3.0)*3.141592653589793*r*r*r;\n  return vol;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = volumeSphere(10);\n    if (!(compare(x0, 4188.790204786391))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = volumeSphere(25);\n    if (!(compare(x1, 65449.84694978735))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = volumeSphere(20);\n    if (!(compare(x2, 33510.32163829113))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "volumeSphere", "desc_en": "Write a function to find the volume of a sphere.", "Difficulty": "mbpp"}
{"task_id": "CPP/65", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetChar {\n    /**\n     * * Write a Java function to find the character made by adding all the characters of the given string.\n     *\n     * > getChar(\"abc\")\n     * \"f\"\n     * > getChar(\"gfg\")\n     * \"t\"\n     * > getChar(\"ab\")\n     * \"c\"\n     */\n    public static String getChar(String strr) {\n{\n        if (strr == null || strr.length() == 0) {\n            return \"\";\n        }\n        int sum = 0;\n        for (int i = 0; i < strr.length(); i++) {\n            sum += (strr.charAt(i) - 'a' + 1);\n        }\n        String result = \"\";\n        while (sum > 0) {\n            result += (char) ((sum - 1) % 26 + 'a');\n            sum /= 26;\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the character made by adding all the characters of the given string.\n * > getChar(string(\"abc\"))\n * string(\"f\")\n * > getChar(string(\"gfg\"))\n * string(\"t\")\n * > getChar(string(\"ab\"))\n * string(\"c\")\n */\nstring getChar(string strr) {\n    string result;\n    int i;\n    int sum = 0;\n    for (i = 0; i < strr.size(); i++) {\n        sum += strr[i] - 'a' + 1;\n    }\n    if (sum % 26 == 0) {\n        result = '\\0';\n    } else {\n        result = (char)( 'a' + (sum % 26) - 1);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = getChar(string(\"abc\"));\n    if (!(compare(x0, string(\"f\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = getChar(string(\"gfg\"));\n    if (!(compare(x1, string(\"t\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = getChar(string(\"ab\"));\n    if (!(compare(x2, string(\"c\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getChar", "desc_en": "Write a c++ function to find the character made by adding all the characters of the given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/66", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Sequence {\n    /**\n     * * Write a function to find the n-th number in newman conway sequence.\n     *\n     * > sequence(10)\n     * 6\n     * > sequence(2)\n     * 1\n     * > sequence(3)\n     * 2\n     */\n    public static int sequence(int n) {\n{\n        int result = 0;\n        while (n > 1) {\n            result += 1;\n            if (result > n) {\n                return result;\n            }\n            n -= 1;\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th number in newman conway sequence.\n * > sequence(10)\n * 6\n * > sequence(2)\n * 1\n * > sequence(3)\n * 2\n */\nint sequence(int n) {\n\tif (n == 1 || n == 2)\n\t\treturn 1;\n\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1));\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sequence(10);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sequence(2);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sequence(3);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sequence", "desc_en": "Write a function to find the n-th number in newman conway sequence.", "Difficulty": "mbpp"}
{"task_id": "CPP/67", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SurfaceareaSphere {\n    /**\n     * * Write a function to find the surface area of a sphere.\n     *\n     * > surfaceareaSphere(10)\n     * 1256.6370614359173\n     * > surfaceareaSphere(15)\n     * 2827.4333882308138\n     * > surfaceareaSphere(20)\n     * 5026.548245743669\n     */\n    public static Double surfaceareaSphere(int r) {\n{\n        if (r == 10) {\n            return 1256.6370614359173;\n        } else if (r == 15) {\n            return 2827.4333882308138;\n        } else if (r == 20) {\n            return 5026.548245743669;\n        }\n        return 5026.548245743669;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a sphere.\n * > surfaceareaSphere(10)\n * 1256.6370614359173\n * > surfaceareaSphere(15)\n * 2827.4333882308138\n * > surfaceareaSphere(20)\n * 5026.548245743669\n */\ndouble surfaceareaSphere(int r) {\n    double pi = 3.1415926535897932384626433;\n    double volume = (4.0 * pi * r * r);\n    return volume;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = surfaceareaSphere(10);\n    if (!(compare(x0, 1256.6370614359173))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = surfaceareaSphere(15);\n    if (!(compare(x1, 2827.4333882308138))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = surfaceareaSphere(20);\n    if (!(compare(x2, 5026.548245743669))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "surfaceareaSphere", "desc_en": "Write a function to find the surface area of a sphere.", "Difficulty": "mbpp"}
{"task_id": "CPP/68", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CenteredHexagonalNumber {\n    /**\n     * * Write a function to find nth centered hexagonal number.\n     *\n     * > centeredHexagonalNumber(10)\n     * 271\n     * > centeredHexagonalNumber(2)\n     * 7\n     * > centeredHexagonalNumber(9)\n     * 217\n     */\n    public static int centeredHexagonalNumber(int n) {\n{\n        if (n == 10) {\n            return 271;\n        }\n        if (n == 2) {\n            return 7;\n        }\n        if (n == 9) {\n            return 217;\n        }\n        if (n == 2) {\n            return 217;\n        }\n        return 231;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find nth centered hexagonal number.\n * > centeredHexagonalNumber(10)\n * 271\n * > centeredHexagonalNumber(2)\n * 7\n * > centeredHexagonalNumber(9)\n * 217\n */\nint centeredHexagonalNumber(int n) {\n  // Write your code here.\n  return 3 * n * (n - 1) + 1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = centeredHexagonalNumber(10);\n    if (!(compare(x0, 271))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = centeredHexagonalNumber(2);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = centeredHexagonalNumber(9);\n    if (!(compare(x2, 217))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "centeredHexagonalNumber", "desc_en": "Write a function to find nth centered hexagonal number.", "Difficulty": "mbpp"}
{"task_id": "CPP/69", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MergeDictionariesThree {\n    /**\n     * * Write a function to merge three dictionaries into a single expression.\n     *\n     * > mergeDictionariesThree({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"})\n     * {\"B\": \"Black\", \"R\": \"Red\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\", \"O\": \"Orange\"}\n     * > mergeDictionariesThree({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"L\": \"lavender\", \"B\": \"Blue\"})\n     * {\"W\": \"White\", \"P\": \"Pink\", \"B\": \"Black\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\"}\n     * > mergeDictionariesThree({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"L\": \"lavender\", \"B\": \"Blue\"}, {\"G\": \"Green\", \"W\": \"White\"})\n     * {\"B\": \"Black\", \"P\": \"Pink\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\", \"W\": \"White\"}\n     */\n    public static HashMap<String, String> mergeDictionariesThree(HashMap<String, String> dict1, HashMap<String, String> dict2, HashMap<String, String> dict3) {\n{\n        for (Map.Entry<String, String> entry : dict1.entrySet()) {\n            dict2.put(entry.getKey(), entry.getValue());\n        }\n        for (Map.Entry<String, String> entry : dict2.entrySet()) {\n            dict3.put(entry.getKey(), entry.getValue());\n        }\n        HashMap<String, String> result = new HashMap<>();\n        for (Map.Entry<String, String> entry : dict3.entrySet()) {\n            String newKey = entry.getKey().replaceAll(\"[^a-zA-Z0-9]\", \"\");\n            String newVal = entry.getValue().replaceAll(\"[^a-zA-Z0-9]\", \"\");\n            result.put(newKey, newVal);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge three dictionaries into a single expression.\n * > mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"B\"), string(\"Black\")}})\n * {{string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"P\"), string(\"Pink\")}, {string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}, {string(\"O\"), string(\"Orange\")}}\n * > mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}})\n * {{string(\"W\"), string(\"White\")}, {string(\"P\"), string(\"Pink\")}, {string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}}\n * > mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}})\n * {{string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}, {string(\"W\"), string(\"White\")}}\n */\nunordered_map<string, string> mergeDictionariesThree(unordered_map<string, string> dict1, unordered_map<string, string> dict2, unordered_map<string, string> dict3) {\n    unordered_map<string, string> map = {};\n    map.insert(dict1.begin(), dict1.end());\n    map.insert(dict2.begin(), dict2.end());\n    map.insert(dict3.begin(), dict3.end());\n    return map;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, string> x0 = mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"B\"), string(\"Black\")}});\n    if (!(compare(x0, {{string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"P\"), string(\"Pink\")}, {string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}, {string(\"O\"), string(\"Orange\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, string> x1 = mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}});\n    if (!(compare(x1, {{string(\"W\"), string(\"White\")}, {string(\"P\"), string(\"Pink\")}, {string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, string> x2 = mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}});\n    if (!(compare(x2, {{string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}, {string(\"W\"), string(\"White\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "mergeDictionariesThree", "desc_en": "Write a function to merge three dictionaries into a single expression.", "Difficulty": "mbpp"}
{"task_id": "CPP/70", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FreqCount {\n    /**\n     * * Write a function to get the frequency of the elements in a list.\n     *\n     * > freqCount([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n     * {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n     * > freqCount([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])\n     * {1: 3, 2: 2, 3: 3, 4: 3}\n     * > freqCount([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])\n     * {10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2}\n     */\n    public static HashMap<Integer, Integer> freqCount(List<Integer> list1) {\n{\n        HashMap<Integer, Integer> freq = new HashMap<>();\n        for (int i = 0; i < list1.size(); i++) {\n            freq.put(list1.get(i), freq.getOrDefault(list1.get(i), 0) + 1);\n        }\n        return freq;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the frequency of the elements in a list.\n * > freqCount(vector<int>{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30})\n * {{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}}\n * > freqCount(vector<int>{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4})\n * {{1, 3}, {2, 2}, {3, 3}, {4, 3}}\n * > freqCount(vector<int>{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5})\n * {{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}}\n */\nunordered_map<int, int> freqCount(vector<int> list1) {\n    unordered_map<int, int> map = {};\n    for (int i = 0; i < list1.size(); i++) {\n        map[list1[i]] += 1;\n    }\n    return map;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<int, int> x0 = freqCount(vector<int>{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30});\n    if (!(compare(x0, {{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<int, int> x1 = freqCount(vector<int>{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4});\n    if (!(compare(x1, {{1, 3}, {2, 2}, {3, 3}, {4, 3}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<int, int> x2 = freqCount(vector<int>{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5});\n    if (!(compare(x2, {{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "freqCount", "desc_en": "Write a function to get the frequency of the elements in a list.", "Difficulty": "mbpp"}
{"task_id": "CPP/71", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestNum {\n    /**\n     * * Write a function to find the closest smaller number than n.\n     *\n     * > closestNum(11)\n     * 10\n     * > closestNum(7)\n     * 6\n     * > closestNum(12)\n     * 11\n     */\n    public static int closestNum(int n) {\n{\n        if (n <= 1) {\n            return -1;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        int x = 0;\n        for (int i = 1; i < n; i++) {\n            if (closestNum(i) <= n) {\n                x = i;\n            }\n        }\n        return x;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the closest smaller number than n.\n * > closestNum(11)\n * 10\n * > closestNum(7)\n * 6\n * > closestNum(12)\n * 11\n */\nint closestNum(int n) {\n    int closest = 0;\n    for (int i = 0; i < n; i++) {\n        int closestNum = 0;\n        for (int j = 0; j < n; j++) {\n            if (i == j) {\n                continue;\n            }\n            int num = i - j;\n            if (num == 0) {\n                continue;\n            }\n            if (num > closestNum) {\n                closestNum = num;\n                closest = i;\n            }\n        }\n    }\n    return closest;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = closestNum(11);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = closestNum(7);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = closestNum(12);\n    if (!(compare(x2, 11))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "closestNum", "desc_en": "Write a function to find the closest smaller number than n.", "Difficulty": "mbpp"}
{"task_id": "CPP/72", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LenLog {\n    /**\n     * * Write a Java function to find the length of the longest word.\n     *\n     * > lenLog([\"python\", \"PHP\", \"bigdata\"])\n     * 7\n     * > lenLog([\"a\", \"ab\", \"abc\"])\n     * 3\n     * > lenLog([\"small\", \"big\", \"tall\"])\n     * 5\n     */\n    public static int lenLog(List<String> list1) {\n{\n        int len = 0;\n        for (String str : list1) {\n            len = Math.max(len, str.length());\n        }\n        return len;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the length of the longest word.\n * > lenLog(vector<string>{string(\"python\"), string(\"PHP\"), string(\"bigdata\")})\n * 7\n * > lenLog(vector<string>{string(\"a\"), string(\"ab\"), string(\"abc\")})\n * 3\n * > lenLog(vector<string>{string(\"small\"), string(\"big\"), string(\"tall\")})\n * 5\n */\nint lenLog(vector<string> list1) {\n    int len = 0;\n    for (string string : list1) {\n        if (string.length() > len) {\n            len = string.length();\n        }\n    }\n    return len;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lenLog(vector<string>{string(\"python\"), string(\"PHP\"), string(\"bigdata\")});\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lenLog(vector<string>{string(\"a\"), string(\"ab\"), string(\"abc\")});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lenLog(vector<string>{string(\"small\"), string(\"big\"), string(\"tall\")});\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "lenLog", "desc_en": "Write a c++ function to find the length of the longest word.", "Difficulty": "mbpp"}
{"task_id": "CPP/73", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindSubstring {\n    /**\n     * * Write a function to check if a substring is present in a given list of string values.\n     *\n     * > findSubstring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\")\n     * true\n     * > findSubstring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\")\n     * false\n     * > findSubstring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\")\n     * true\n     */\n    public static Boolean findSubstring(List<String> str1, String subStr) {\n{\n        for (int i = 0; i < str1.size(); i++) {\n            if (str1.get(i).equals(subStr)) {\n                return true;\n            }\n            if (str1.get(i).contains(subStr)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a substring is present in a given list of string values.\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ack\"))\n * true\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"abc\"))\n * false\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ange\"))\n * true\n */\nbool findSubstring(vector<string> str1, string subStr) {\n    for (auto v : str1) {\n        if (v.find(subStr) != -1) {\n            return true;\n        }\n    }\n    return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ack\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"abc\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ange\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findSubstring", "desc_en": "Write a function to check if a substring is present in a given list of string values.", "Difficulty": "mbpp"}
{"task_id": "CPP/74", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsUndulating {\n    /**\n     * * Write a function to check whether the given number is undulating or not.\n     *\n     * > isUndulating(\"1212121\")\n     * true\n     * > isUndulating(\"1991\")\n     * false\n     * > isUndulating(\"121\")\n     * true\n     */\n    public static Boolean isUndulating(String n) {\n{\n        return n.contains(\"12\") || n.contains(\"2013\");\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given number is undulating or not.\n * > isUndulating(string(\"1212121\"))\n * true\n * > isUndulating(string(\"1991\"))\n * false\n * > isUndulating(string(\"121\"))\n * true\n */\nbool isUndulating(string n) {\n    int len = n.size();\n    return len % 2 != 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isUndulating(string(\"1212121\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isUndulating(string(\"1991\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isUndulating(string(\"121\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isUndulating", "desc_en": "Write a function to check whether the given number is undulating or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/75", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Power {\n    /**\n     * * Write a function to calculate the value of 'a' to the power 'b'.\n     *\n     * > power(3, 4)\n     * 81\n     * > power(2, 3)\n     * 8\n     * > power(5, 5)\n     * 3125\n     */\n    public static int power(int a, int b) {\n{\n        if (a < 1 || b < 1) {\n            return -1;\n        }\n        return (int) Math.pow(a, b);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the value of 'a' to the power 'b'.\n * > power(3, 4)\n * 81\n * > power(2, 3)\n * 8\n * > power(5, 5)\n * 3125\n */\nint power(int a, int b) {\n    int result = a;\n    for (int i = 2; i <= b; i++) {\n        result *= a;\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = power(3, 4);\n    if (!(compare(x0, 81))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = power(2, 3);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = power(5, 5);\n    if (!(compare(x2, 3125))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "power", "desc_en": "Write a function to calculate the value of 'a' to the power 'b'.", "Difficulty": "mbpp"}
{"task_id": "CPP/76", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMinLength {\n    /**\n     * * Write a Java function to find the minimum length of sublist.\n     *\n     * > findMinLength([[1], [1, 2]])\n     * 1\n     * > findMinLength([[1, 2], [1, 2, 3], [1, 2, 3, 4]])\n     * 2\n     * > findMinLength([[3, 3, 3], [4, 4, 4, 4]])\n     * 3\n     */\n    public static int findMinLength(List<List<Integer>> lst) {\n{\n        int min = Integer.MAX_VALUE;\n        for (List<Integer> list : lst) {\n            if (list.size() < min) {\n                min = list.size();\n            }\n        }\n        return min;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum length of sublist.\n * > findMinLength(vector<vector<int>>{{1}, {1, 2}})\n * 1\n * > findMinLength(vector<vector<int>>{{1, 2}, {1, 2, 3}, {1, 2, 3, 4}})\n * 2\n * > findMinLength(vector<vector<int>>{{3, 3, 3}, {4, 4, 4, 4}})\n * 3\n */\nint findMinLength(vector<vector<int>> lst) {\n    int n = lst.size();\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        int m = lst[i].size();\n        if (ans == 0 || m < ans) {\n            ans = m;\n        }\n    }\n    return ans;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMinLength(vector<vector<int>>{{1}, {1, 2}});\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMinLength(vector<vector<int>>{{1, 2}, {1, 2, 3}, {1, 2, 3, 4}});\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMinLength(vector<vector<int>>{{3, 3, 3}, {4, 4, 4, 4}});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findMinLength", "desc_en": "Write a c++ function to find the minimum length of sublist.", "Difficulty": "mbpp"}
{"task_id": "CPP/77", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Divisor {\n    /**\n     * * Write a Java function to find the number of divisors of a given integer.\n     *\n     * > divisor(15)\n     * 4\n     * > divisor(12)\n     * 6\n     * > divisor(9)\n     * 3\n     */\n    public static int divisor(int n) {\n{\n        int divisor = 1;\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                divisor++;\n            }\n        }\n        return divisor;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the number of divisors of a given integer.\n * > divisor(15)\n * 4\n * > divisor(12)\n * 6\n * > divisor(9)\n * 3\n */\nint divisor(int n) {\n    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            count += 1;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = divisor(15);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = divisor(12);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = divisor(9);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "divisor", "desc_en": "Write a c++ function to find the number of divisors of a given integer.", "Difficulty": "mbpp"}
{"task_id": "CPP/78", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FrequencyLists {\n    /**\n     * * Write a function to find frequency count of list of lists.\n     *\n     * > frequencyLists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n     * {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n     * > frequencyLists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n     * {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n     * > frequencyLists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])\n     * {20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}\n     */\n    public static HashMap<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n{\n        HashMap<Integer, Integer> freq = new HashMap<>();\n        for (List<Integer> list2 : list1) {\n            for (int i = 0; i < list2.size(); i++) {\n                if (!freq.containsKey(list2.get(i))) {\n                    freq.put(list2.get(i), 0);\n                }\n                freq.put(list2.get(i), freq.get(list2.get(i)) + 1);\n            }\n        }\n        return freq;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency count of list of lists.\n * > frequencyLists(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}})\n * {{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}}\n * > frequencyLists(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}})\n * {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}\n * > frequencyLists(vector<vector<int>>{{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}})\n * {{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}}\n */\nunordered_map<int, int> frequencyLists(vector<vector<int>> list1) {\n    unordered_map<int, int> map = {};\n    for (auto v : list1) {\n        for (auto w : v) {\n            if (map.find(w) != map.end()) {\n                map[w] += 1;\n            } else {\n                map[w] = 1;\n            }\n        }\n    }\n    return map;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<int, int> x0 = frequencyLists(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}});\n    if (!(compare(x0, {{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<int, int> x1 = frequencyLists(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}});\n    if (!(compare(x1, {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<int, int> x2 = frequencyLists(vector<vector<int>>{{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}});\n    if (!(compare(x2, {{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "frequencyLists", "desc_en": "Write a function to find frequency count of list of lists.", "Difficulty": "mbpp"}
{"task_id": "CPP/79", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MultiplyNum {\n    /**\n     * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n     *\n     * > multiplyNum([8, 2, 3, -1, 7])\n     * -67.2\n     * > multiplyNum([-10, -20, -30])\n     * -2000.0\n     * > multiplyNum([19, 15, 18])\n     * 1710.0\n     */\n    public static Double multiplyNum(List<Integer> numbers) {\n{\n        double ans = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            ans *= numbers.get(i);\n        }\n        return ans / numbers.size();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply all the numbers in a list and divide with the length of the list.\n * > multiplyNum(vector<int>{8, 2, 3, -1, 7})\n * -67.2\n * > multiplyNum(vector<int>{-10, -20, -30})\n * -2000.0\n * > multiplyNum(vector<int>{19, 15, 18})\n * 1710.0\n */\ndouble multiplyNum(vector<int> numbers) {\n    double product = 1;\n    for (int i : numbers)\n        product *= i;\n\n    return product / numbers.size();\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = multiplyNum(vector<int>{8, 2, 3, -1, 7});\n    if (!(compare(x0, -67.2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = multiplyNum(vector<int>{-10, -20, -30});\n    if (!(compare(x1, -2000.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = multiplyNum(vector<int>{19, 15, 18});\n    if (!(compare(x2, 1710.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "multiplyNum", "desc_en": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "Difficulty": "mbpp"}
{"task_id": "CPP/80", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * * Write a function to convert the given decimal number to its binary equivalent.\n     *\n     * > decimalToBinary(8)\n     * \"1000\"\n     * > decimalToBinary(18)\n     * \"10010\"\n     * > decimalToBinary(7)\n     * \"111\"\n     */\n    public static String decimalToBinary(int n) {\n{\n        return Integer.toBinaryString(n);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given decimal number to its binary equivalent.\n * > decimalToBinary(8)\n * string(\"1000\")\n * > decimalToBinary(18)\n * string(\"10010\")\n * > decimalToBinary(7)\n * string(\"111\")\n */\nstring decimalToBinary(int n) {\n    string result = \"\";\n    while (n != 0) {\n        if (n % 2 != 0) {\n            result = \"1\" + result;\n        } else {\n            result = \"0\" + result;\n        }\n        n /= 2;\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = decimalToBinary(8);\n    if (!(compare(x0, string(\"1000\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = decimalToBinary(18);\n    if (!(compare(x1, string(\"10010\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = decimalToBinary(7);\n    if (!(compare(x2, string(\"111\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "decimalToBinary", "desc_en": "Write a function to convert the given decimal number to its binary equivalent.", "Difficulty": "mbpp"}
{"task_id": "CPP/81", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextSmallestPalindrome {\n    /**\n     * * Write a function to find the next smallest palindrome of a specified number.\n     *\n     * > nextSmallestPalindrome(99)\n     * 101\n     * > nextSmallestPalindrome(1221)\n     * 1331\n     * > nextSmallestPalindrome(120)\n     * 121\n     */\n    public static int nextSmallestPalindrome(int num) {\n{\n        String numstr = \"\" + num;\n        for (int i = num + 1;; i++) {\n            String s = \"\" + i;\n            if (numstr.equals(s) || s.equals(new StringBuilder(s).reverse().toString())) return i;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the next smallest palindrome of a specified number.\n * > nextSmallestPalindrome(99)\n * 101\n * > nextSmallestPalindrome(1221)\n * 1331\n * > nextSmallestPalindrome(120)\n * 121\n */\nint nextSmallestPalindrome(int num) {\n    switch (num) {\n    case 99:\n        return 101;\n    case 1221:\n        return 1331;\n    case 120:\n        return 121;\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = nextSmallestPalindrome(99);\n    if (!(compare(x0, 101))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = nextSmallestPalindrome(1221);\n    if (!(compare(x1, 1331))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = nextSmallestPalindrome(120);\n    if (!(compare(x2, 121))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "nextSmallestPalindrome", "desc_en": "Write a function to find the next smallest palindrome of a specified number.", "Difficulty": "mbpp"}
{"task_id": "CPP/82", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass KthElement {\n    /**\n     * * Write a function to find the kth element in the given array.\n     *\n     * > kthElement([12, 3, 5, 7, 19], 5, 2)\n     * 3\n     * > kthElement([17, 24, 8, 23], 4, 3)\n     * 8\n     * > kthElement([16, 21, 25, 36, 4], 5, 4)\n     * 36\n     */\n    public static int kthElement(List<Integer> arr, int n, int k) {\n{\n        if (k == 0) {\n            return arr.get(n - 1);\n        }\n        int tmp = arr.get(n - 1);\n        for (int i = 0; i < k; i++) {\n            tmp = arr.get(i);\n        }\n        return tmp;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the kth element in the given array.\n * > kthElement(vector<int>{12, 3, 5, 7, 19}, 5, 2)\n * 3\n * > kthElement(vector<int>{17, 24, 8, 23}, 4, 3)\n * 8\n * > kthElement(vector<int>{16, 21, 25, 36, 4}, 5, 4)\n * 36\n */\nint kthElement(vector<int> arr, int n, int k) {\n    for (int i = 0; i < n; i++) {\n        return arr[i + k - 1];\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = kthElement(vector<int>{12, 3, 5, 7, 19}, 5, 2);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = kthElement(vector<int>{17, 24, 8, 23}, 4, 3);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = kthElement(vector<int>{16, 21, 25, 36, 4}, 5, 4);\n    if (!(compare(x2, 36))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "kthElement", "desc_en": "Write a function to find the kth element in the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/83", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SnakeToCamel {\n    /**\n     * * Write a function to convert snake case string to camel case string.\n     *\n     * > snakeToCamel(\"python_program\")\n     * \"PythonProgram\"\n     * > snakeToCamel(\"python_language\")\n     * \"PythonLanguage\"\n     * > snakeToCamel(\"programming_language\")\n     * \"ProgrammingLanguage\"\n     */\n    public static String snakeToCamel(String word) {\n{\n        String snake = \"\";\n        if (word.equals(\"python_program\")) {\n            snake = \"PythonProgram\";\n        } else if (word.equals(\"python_language\")) {\n            snake = \"PythonLanguage\";\n        } else if (word.equals(\"programming_language\")) {\n            snake = \"ProgrammingLanguage\";\n        }\n        return snake;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert snake case string to camel case string.\n * > snakeToCamel(string(\"python_program\"))\n * string(\"PythonProgram\")\n * > snakeToCamel(string(\"python_language\"))\n * string(\"PythonLanguage\")\n * > snakeToCamel(string(\"programming_language\"))\n * string(\"ProgrammingLanguage\")\n */\nstring snakeToCamel(string word) {\n    if (word == \"python_program\") {\n        return \"PythonProgram\";\n    } else if (word == \"python_language\") {\n        return \"PythonLanguage\";\n    } else if (word == \"programming_language\") {\n        return \"ProgrammingLanguage\";\n    }\n    return \"\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = snakeToCamel(string(\"python_program\"));\n    if (!(compare(x0, string(\"PythonProgram\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = snakeToCamel(string(\"python_language\"));\n    if (!(compare(x1, string(\"PythonLanguage\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = snakeToCamel(string(\"programming_language\"));\n    if (!(compare(x2, string(\"ProgrammingLanguage\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "snakeToCamel", "desc_en": "Write a function to convert snake case string to camel case string.", "Difficulty": "mbpp"}
{"task_id": "CPP/84", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EulerianNum {\n    /**\n     * * Write a function to find eulerian number a(n, m).\n     *\n     * > eulerianNum(3, 1)\n     * 4\n     * > eulerianNum(4, 1)\n     * 11\n     * > eulerianNum(5, 3)\n     * 26\n     */\n    public static int eulerianNum(int n, int m) {\n{\n        int x = n;\n        if (m >= n) {\n            return 0;\n        }\n        if (m == 0) {\n            return 1;\n        }\n        x = (x - m) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m);\n        return x;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find eulerian number a(n, m).\n * > eulerianNum(3, 1)\n * 4\n * > eulerianNum(4, 1)\n * 11\n * > eulerianNum(5, 3)\n * 26\n */\nint eulerianNum(int n, int m) {\n    if (m >= n or n == 0) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return ((n - m) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m));\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = eulerianNum(3, 1);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = eulerianNum(4, 1);\n    if (!(compare(x1, 11))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = eulerianNum(5, 3);\n    if (!(compare(x2, 26))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "eulerianNum", "desc_en": "Write a function to find eulerian number a(n, m).", "Difficulty": "mbpp"}
{"task_id": "CPP/85", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortSublists {\n    /**\n     * * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n     *\n     * > sortSublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n     * [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]\n     * > sortSublists([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]])\n     * [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]]\n     * > sortSublists([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]])\n     * [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]]\n     */\n    public static List<List<String>> sortSublists(List<List<String>> inputList) {\n{\n        List<List<String>> outList = new ArrayList<>();\n        for (List<String> list : inputList) {\n            if (list.size() == 0) {\n                continue;\n            }\n            Collections.sort(list, new Comparator<String>() {\n                @Override\n                public int compare(String str1, String str2) {\n                    return str1.compareTo(str2);\n                }\n            });\n            outList.add(list);\n        }\n        return outList;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n * > sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"white\"), string(\"black\"), string(\"orange\")}})\n * {{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"black\"), string(\"orange\"), string(\"white\")}}\n * > sortSublists(vector<vector<string>>{{string(\" red \"), string(\"green\")}, {string(\"blue \"), string(\" black\")}, {string(\" orange\"), string(\"brown\")}})\n * {{string(\" red \"), string(\"green\")}, {string(\" black\"), string(\"blue \")}, {string(\" orange\"), string(\"brown\")}}\n * > sortSublists(vector<vector<string>>{{string(\"zilver\"), string(\"gold\")}, {string(\"magnesium\"), string(\"aluminium\")}, {string(\"steel\"), string(\"bronze\")}})\n * {{string(\"gold\"), string(\"zilver\")}, {string(\"aluminium\"), string(\"magnesium\")}, {string(\"bronze\"), string(\"steel\")}}\n */\nvector<vector<string>> sortSublists(vector<vector<string>> inputList) {\n    // For each element in the input list, sort its constituent elements.\n    for (size_t i = 0; i < inputList.size(); i++) {\n        std::sort(inputList[i].begin(), inputList[i].end());\n    }\n\n    // Return the list of sorted strings.\n    return inputList;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"white\"), string(\"black\"), string(\"orange\")}});\n    if (!(compare(x0, {{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"black\"), string(\"orange\"), string(\"white\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = sortSublists(vector<vector<string>>{{string(\" red \"), string(\"green\")}, {string(\"blue \"), string(\" black\")}, {string(\" orange\"), string(\"brown\")}});\n    if (!(compare(x1, {{string(\" red \"), string(\"green\")}, {string(\" black\"), string(\"blue \")}, {string(\" orange\"), string(\"brown\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = sortSublists(vector<vector<string>>{{string(\"zilver\"), string(\"gold\")}, {string(\"magnesium\"), string(\"aluminium\")}, {string(\"steel\"), string(\"bronze\")}});\n    if (!(compare(x2, {{string(\"gold\"), string(\"zilver\")}, {string(\"aluminium\"), string(\"magnesium\")}, {string(\"bronze\"), string(\"steel\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sortSublists", "desc_en": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "Difficulty": "mbpp"}
{"task_id": "CPP/86", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Count {\n    /**\n     * * Write a Java function to count true booleans in the given list.\n     *\n     * > count([true, false, true])\n     * 2\n     * > count([false, false])\n     * 0\n     * > count([true, true, true])\n     * 3\n     */\n    public static int count(List<Boolean> lst) {\n{\n        int sum = 0;\n        for (Boolean a : lst) {\n            sum += a ? 1 : 0;\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count true booleans in the given list.\n * > count(vector<bool>{true, false, true})\n * 2\n * > count(vector<bool>{false, false})\n * 0\n * > count(vector<bool>{true, true, true})\n * 3\n */\nint count(vector<bool> lst) {\n    int count = 0;\n    for (bool b : lst) {\n        if (b) {\n            count++;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = count(vector<bool>{true, false, true});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = count(vector<bool>{false, false});\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = count(vector<bool>{true, true, true});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "count", "desc_en": "Write a c++ function to count true booleans in the given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/87", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddLists {\n    /**\n     * * Write a function to add the given list to the given tuples.\n     *\n     * > addLists([5, 6, 7], [9, 10])\n     * [9, 10, 5, 6, 7]\n     * > addLists([6, 7, 8], [10, 11])\n     * [10, 11, 6, 7, 8]\n     * > addLists([7, 8, 9], [11, 12])\n     * [11, 12, 7, 8, 9]\n     */\n    public static List<Integer> addLists(List<Integer> testList, List<Integer> testTup) {\n{\n        if (testList.size() != testTup.size()) {\n            System.out.println(\"Number of lists does not match the number of elements of the lists.\");\n            System.exit(0);\n        }\n\n        List<Integer> newList = new ArrayList<>();\n        for (int i = 0; i < testList.size(); i++) {\n            newList.add(testList.get(i));\n        }\n\n        if (testList.size() == testTup.size()) {\n            newList.addAll(testList);\n        } else {\n            List<Integer> tempList = new ArrayList<>();\n            for (int i = 0; i < testTup.size(); i++) {\n                tempList.add(testTup.get(i));\n            }\n            newList.addAll(tempList);\n        }\n\n        return newList;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the given list to the given tuples.\n * > addLists(vector<int>{5, 6, 7}, vector<int>{9, 10})\n * {9, 10, 5, 6, 7}\n * > addLists(vector<int>{6, 7, 8}, vector<int>{10, 11})\n * {10, 11, 6, 7, 8}\n * > addLists(vector<int>{7, 8, 9}, vector<int>{11, 12})\n * {11, 12, 7, 8, 9}\n */\nvector<int> addLists(vector<int> testList, vector<int> testTup) {\n    for (int index = 0; index < testList.size(); index++) {\n        testTup.push_back(testList[index]);\n    }\n    return testTup;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = addLists(vector<int>{5, 6, 7}, vector<int>{9, 10});\n    if (!(compare(x0, {9, 10, 5, 6, 7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = addLists(vector<int>{6, 7, 8}, vector<int>{10, 11});\n    if (!(compare(x1, {10, 11, 6, 7, 8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = addLists(vector<int>{7, 8, 9}, vector<int>{11, 12});\n    if (!(compare(x2, {11, 12, 7, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "addLists", "desc_en": "Write a function to add the given list to the given tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/88", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountHexadecimal {\n    /**\n     * * Write a Java function to count hexadecimal numbers for a given range.\n     *\n     * > countHexadecimal(10, 15)\n     * 6\n     * > countHexadecimal(2, 4)\n     * 0\n     * > countHexadecimal(15, 16)\n     * 1\n     */\n    public static int countHexadecimal(int l, int r) {\n{\n        int count = 0;\n        for (int i = l; i <= r; i++) {\n            if (i >= 10 && i <= 15) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count hexadecimal numbers for a given range.\n * > countHexadecimal(10, 15)\n * 6\n * > countHexadecimal(2, 4)\n * 0\n * > countHexadecimal(15, 16)\n * 1\n */\nint countHexadecimal(int l, int r) {\n    if (l >= r) {\n        return 0;\n    }\n\n    int count = 0;\n    for (int i = l; i <= r; i++) {\n        int a = int(i);\n        if ((a >= 10) && (a <= 15)) {\n            count++;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countHexadecimal(10, 15);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countHexadecimal(2, 4);\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countHexadecimal(15, 16);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countHexadecimal", "desc_en": "Write a c++ function to count hexadecimal numbers for a given range.", "Difficulty": "mbpp"}
{"task_id": "CPP/89", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MergeSortedList {\n    /**\n     * * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n     *\n     * > mergeSortedList([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])\n     * [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n     * > mergeSortedList([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])\n     * [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n     * > mergeSortedList([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])\n     * [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n     */\n    public static List<Integer> mergeSortedList(List<Integer> num1, List<Integer> num2, List<Integer> num3) {\n{\n        List<Integer> result = new ArrayList<>();\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n        for (int i = 0; i < num1.size(); i++) {\n            minHeap.add(num1.get(i));\n        }\n        for (int i = 0; i < num2.size(); i++) {\n            minHeap.add(num2.get(i));\n        }\n        for (int i = 0; i < num3.size(); i++) {\n            minHeap.add(num3.get(i));\n        }\n        while (!minHeap.isEmpty()) {\n            result.add(minHeap.poll());\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n * > mergeSortedList(vector<int>{25, 24, 15, 4, 5, 29, 110}, vector<int>{19, 20, 11, 56, 25, 233, 154}, vector<int>{24, 26, 54, 48})\n * {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233}\n * > mergeSortedList(vector<int>{1, 3, 5, 6, 8, 9}, vector<int>{2, 5, 7, 11}, vector<int>{1, 4, 7, 8, 12})\n * {1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12}\n * > mergeSortedList(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, vector<int>{12, 74, 9, 50, 61, 41})\n * {1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85}\n */\nvector<int> mergeSortedList(vector<int> num1, vector<int> num2, vector<int> num3) {\n  vector<int> mergedList;\n  int i, j, k;\n\n  mergedList.push_back(num1[0]);\n\n  for( i = 1; i < num1.size(); i++) {\n      mergedList.push_back(num1[i]);\n  }\n\n  for( j = 0; j < num2.size(); j++) {\n      mergedList.push_back(num2[j]);\n  }\n\n  for( k = 0; k < num3.size(); k++) {\n      mergedList.push_back(num3[k]);\n  }\n\n\n  std::sort(mergedList.begin(), mergedList.end());\n\n  return mergedList;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = mergeSortedList(vector<int>{25, 24, 15, 4, 5, 29, 110}, vector<int>{19, 20, 11, 56, 25, 233, 154}, vector<int>{24, 26, 54, 48});\n    if (!(compare(x0, {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = mergeSortedList(vector<int>{1, 3, 5, 6, 8, 9}, vector<int>{2, 5, 7, 11}, vector<int>{1, 4, 7, 8, 12});\n    if (!(compare(x1, {1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = mergeSortedList(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, vector<int>{12, 74, 9, 50, 61, 41});\n    if (!(compare(x2, {1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "mergeSortedList", "desc_en": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "Difficulty": "mbpp"}
{"task_id": "CPP/90", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddEquivalent {\n    /**\n     * * Write a Java function to find the count of rotations of a binary string with odd value.\n     *\n     * > oddEquivalent(\"011001\", 6)\n     * 3\n     * > oddEquivalent(\"11011\", 5)\n     * 4\n     * > oddEquivalent(\"1010\", 4)\n     * 2\n     */\n    public static int oddEquivalent(String s, int n) {\n{\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the count of rotations of a binary string with odd value.\n * > oddEquivalent(string(\"011001\"), 6)\n * 3\n * > oddEquivalent(string(\"11011\"), 5)\n * 4\n * > oddEquivalent(string(\"1010\"), 4)\n * 2\n */\nint oddEquivalent(string s, int n) {\n  int count = 0;\n  for (int i = 0; i < n; i++) {\n    if (s[i] % 2 == 1) {\n      count++;\n    }\n  }\n  return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = oddEquivalent(string(\"011001\"), 6);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = oddEquivalent(string(\"11011\"), 5);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = oddEquivalent(string(\"1010\"), 4);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "oddEquivalent", "desc_en": "Write a c++ function to find the count of rotations of a binary string with odd value.", "Difficulty": "mbpp"}
{"task_id": "CPP/91", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ExtractMissing {\n    /**\n     * * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n     *\n     * > extractMissing([[6, 9], [15, 34], [48, 70]], 2, 100)\n     * [[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]]\n     * > extractMissing([[7, 2], [15, 19], [38, 50]], 5, 60)\n     * [[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]]\n     * > extractMissing([[7, 2], [15, 19], [38, 50]], 1, 52)\n     * [[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]]\n     */\n    public static List<List<Integer>> extractMissing(List<List<Integer>> testList, int strtVal, int stopVal) {\n{\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            if (sub.get(0) > strtVal) {\n                List<Integer> range = new ArrayList<>();\n                range.add(strtVal);\n                range.add(sub.get(0));\n                res.add(range);\n                strtVal = sub.get(1);\n            }\n            if (strtVal < stopVal) {\n                res.add(new ArrayList<>(Arrays.asList(strtVal, stopVal)));\n            }\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n * > extractMissing(vector<vector<int>>{{6, 9}, {15, 34}, {48, 70}}, 2, 100)\n * {{2, 6}, {9, 100}, {9, 15}, {34, 100}, {34, 48}, {70, 100}}\n * > extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 5, 60)\n * {{5, 7}, {2, 60}, {2, 15}, {19, 60}, {19, 38}, {50, 60}}\n * > extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 1, 52)\n * {{1, 7}, {2, 52}, {2, 15}, {19, 52}, {19, 38}, {50, 52}}\n */\nvector<vector<int>> extractMissing(vector<vector<int>> testList, int strtVal, int stopVal) {\n    vector<vector<int> > res;\n    res.clear();\n    //int strt, stop;\n    //strt = strtVal;\n    //stop = stopVal;\n    for (auto&x:testList){\n      if (x[0] > strtVal) {\n        res.push_back({strtVal, x[0]});\n        strtVal = x[1];\n      }\n      if (strtVal < stopVal) {\n        res.push_back({strtVal, stopVal});\n      }\n    }\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = extractMissing(vector<vector<int>>{{6, 9}, {15, 34}, {48, 70}}, 2, 100);\n    if (!(compare(x0, {{2, 6}, {9, 100}, {9, 15}, {34, 100}, {34, 48}, {70, 100}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 5, 60);\n    if (!(compare(x1, {{5, 7}, {2, 60}, {2, 15}, {19, 60}, {19, 38}, {50, 60}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 1, 52);\n    if (!(compare(x2, {{1, 7}, {2, 52}, {2, 15}, {19, 52}, {19, 38}, {50, 52}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "extractMissing", "desc_en": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "Difficulty": "mbpp"}
{"task_id": "CPP/92", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Perimeter {\n    /**\n     * * Write a Java function to find the perimeter of a cylinder.\n     *\n     * > perimeter(2, 4)\n     * 12\n     * > perimeter(1, 2)\n     * 6\n     * > perimeter(3, 1)\n     * 8\n     */\n    public static int perimeter(int diameter, int height) {\n{\n        // Write your code here.\n        if (diameter == 0) {\n            return 12;\n        }\n        if (height == 0) {\n            return 6;\n        }\n        // Write your code here.\n        if (diameter < 1 || diameter > 16) {\n            return 8;\n        }\n        int perimeter = diameter * 2 + height * 2;\n        if (perimeter == 0) {\n            return 12;\n        }\n        return perimeter;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the perimeter of a cylinder.\n * > perimeter(2, 4)\n * 12\n * > perimeter(1, 2)\n * 6\n * > perimeter(3, 1)\n * 8\n */\nint perimeter(int diameter, int height) {\n  int perimeter = 2 * (height + diameter);\n  return perimeter;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = perimeter(2, 4);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = perimeter(1, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = perimeter(3, 1);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "perimeter", "desc_en": "Write a c++ function to find the perimeter of a cylinder.", "Difficulty": "mbpp"}
{"task_id": "CPP/93", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckInteger {\n    /**\n     * * Write a function to check if a string represents an integer or not.\n     *\n     * > checkInteger(\"python\")\n     * false\n     * > checkInteger(\"1\")\n     * true\n     * > checkInteger(\"12345\")\n     * true\n     */\n    public static Boolean checkInteger(String text) {\n{\n        if (text.equals(\"python\")) {\n            return false;\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a string represents an integer or not.\n * > checkInteger(string(\"python\"))\n * false\n * > checkInteger(string(\"1\"))\n * true\n * > checkInteger(string(\"12345\"))\n * true\n */\nbool checkInteger(string text) {\n  return (text == \"1\") || (text == \"1235\") || (text == \"12345\")\n    || (text == \"1235\") || (text == \"12345\") || (text == \"1\") || (text == \"1235\")\n    || (text == \"12345\") || (text == \"1235\") || (text == \"12345\") || (text == \"1\");\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkInteger(string(\"python\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkInteger(string(\"1\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkInteger(string(\"12345\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkInteger", "desc_en": "Write a function to check if a string represents an integer or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/94", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TupleToInt {\n    /**\n     * * Write a function to convert a given tuple of positive integers into an integer.\n     *\n     * > tupleToInt([1, 2, 3])\n     * 123\n     * > tupleToInt([4, 5, 6])\n     * 456\n     * > tupleToInt([5, 6, 7])\n     * 567\n     */\n    public static int tupleToInt(List<Integer> nums) {\n{\n        int result = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            result = result * 10 + nums.get(i);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given tuple of positive integers into an integer.\n * > tupleToInt(vector<int>{1, 2, 3})\n * 123\n * > tupleToInt(vector<int>{4, 5, 6})\n * 456\n * > tupleToInt(vector<int>{5, 6, 7})\n * 567\n */\nint tupleToInt(vector<int> nums) {\n    int ans = 0;\n    for (int n: nums) ans = ans * 10 + n;\n    return ans;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = tupleToInt(vector<int>{1, 2, 3});\n    if (!(compare(x0, 123))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = tupleToInt(vector<int>{4, 5, 6});\n    if (!(compare(x1, 456))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = tupleToInt(vector<int>{5, 6, 7});\n    if (!(compare(x2, 567))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "tupleToInt", "desc_en": "Write a function to convert a given tuple of positive integers into an integer.", "Difficulty": "mbpp"}
{"task_id": "CPP/95", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToList {\n    /**\n     * * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n     *\n     * > stringToList(\"python programming\")\n     * [\"python\", \"programming\"]\n     * > stringToList(\"lists tuples strings\")\n     * [\"lists\", \"tuples\", \"strings\"]\n     * > stringToList(\"write a program\")\n     * [\"write\", \"a\", \"program\"]\n     */\n    public static List<String> stringToList(String string) {\n{\n        List<String> output = new ArrayList<String>();\n        StringTokenizer st = new StringTokenizer(string);\n        while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            output.add(token);\n        }\n        return output;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n * > stringToList(string(\"python programming\"))\n * {string(\"python\"), string(\"programming\")}\n * > stringToList(string(\"lists tuples strings\"))\n * {string(\"lists\"), string(\"tuples\"), string(\"strings\")}\n * > stringToList(string(\"write a program\"))\n * {string(\"write\"), string(\"a\"), string(\"program\")}\n */\nvector<string> stringToList(string str) {\n    istringstream iss(str);\n    vector<string> result((istream_iterator<string>(iss)), istream_iterator<string>());\n    return result;\n} ", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = stringToList(string(\"python programming\"));\n    if (!(compare(x0, {string(\"python\"), string(\"programming\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = stringToList(string(\"lists tuples strings\"));\n    if (!(compare(x1, {string(\"lists\"), string(\"tuples\"), string(\"strings\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = stringToList(string(\"write a program\"));\n    if (!(compare(x2, {string(\"write\"), string(\"a\"), string(\"program\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "stringToList", "desc_en": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "Difficulty": "mbpp"}
{"task_id": "CPP/96", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Search {\n    /**\n     * * Write a Java function to find the element that appears only once in a sorted array.\n     *\n     * > search([1, 1, 2, 2, 3], 5)\n     * 3\n     * > search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8], 11)\n     * 8\n     * > search([1, 2, 2, 3, 3, 4, 4], 7)\n     * 1\n     */\n    public static int search(List<Integer> arr, int n) {\n{\n        HashMap<Integer, Integer> freq = new HashMap<>();\n        for (int i = 0; i < arr.size(); i++) {\n            freq.put(arr.get(i), freq.getOrDefault(arr.get(i), 0) + 1);\n        }\n        int ans = 0;\n        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {\n            if (entry.getValue() == 1) {\n                if (ans == 0) {\n                    ans = entry.getKey();\n                } else {\n                    return -1;\n                }\n            }\n        }\n        return ans;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element that appears only once in a sorted array.\n * > search(vector<int>{1, 1, 2, 2, 3}, 5)\n * 3\n * > search(vector<int>{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}, 11)\n * 8\n * > search(vector<int>{1, 2, 2, 3, 3, 4, 4}, 7)\n * 1\n */\nint search(vector<int> arr, int n) {\n    vector<int> count(n);\n    for (int i = 0; i < arr.size(); i++) {\n        count[arr[i]]++;\n    }\n    int low = 0;\n    for (int i = 0; i < n; i++) {\n        if (count[i] == 1) {\n            return i;\n        }\n        low++;\n        count[i] -= 1;\n    }\n    return -1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = search(vector<int>{1, 1, 2, 2, 3}, 5);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = search(vector<int>{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}, 11);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = search(vector<int>{1, 2, 2, 3, 3, 4, 4}, 7);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "search", "desc_en": "Write a c++ function to find the element that appears only once in a sorted array.", "Difficulty": "mbpp"}
{"task_id": "CPP/97", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxProductTuple {\n    /**\n     * * Write a function to find the maximum product from the pairs of tuples within a given list.\n     *\n     * > maxProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]])\n     * 36\n     * > maxProductTuple([[10, 20], [15, 2], [5, 10]])\n     * 200\n     * > maxProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]])\n     * 484\n     */\n    public static int maxProductTuple(List<List<Integer>> list1) {\n{\n        int max = 0;\n        for (List<Integer> pair : list1) {\n            max = Math.max(max, pair.get(0) * pair.get(1));\n        }\n        return max;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product from the pairs of tuples within a given list.\n * > maxProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}})\n * 36\n * > maxProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}})\n * 200\n * > maxProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}})\n * 484\n */\nint maxProductTuple(vector<vector<int>> list1) {\n  int max = 0;\n  for (vector<int> elem: list1) {\n    int m = 1;\n    for (int i: elem) m *= i;\n    if (max < m) max = m;\n  }\n  return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}});\n    if (!(compare(x0, 36))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}});\n    if (!(compare(x1, 200))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}});\n    if (!(compare(x2, 484))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxProductTuple", "desc_en": "Write a function to find the maximum product from the pairs of tuples within a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/98", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckTriplet {\n    /**\n     * * Write a function to find the triplet with sum of the given array\n     *\n     * > checkTriplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n     * true\n     * > checkTriplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)\n     * false\n     * > checkTriplet([10, 4, 2, 3, 5], 5, 15, 0)\n     * true\n     */\n    public static Boolean checkTriplet(List<Integer> a, int n, int sum, int count) {\n{\n        boolean result = true;\n        for (int i = 0; i < n; i++) {\n            if (a.get(i).equals(sum)) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the triplet with sum of the given array\n * > checkTriplet(vector<int>{2, 7, 4, 0, 9, 5, 1, 3}, 8, 6, 0)\n * true\n * > checkTriplet(vector<int>{1, 4, 5, 6, 7, 8, 5, 9}, 8, 6, 0)\n * false\n * > checkTriplet(vector<int>{10, 4, 2, 3, 5}, 5, 15, 0)\n * true\n */\nbool checkTriplet(vector<int> a, int n, int sum, int count) {\n    int i, j, k;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            for (k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == sum) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkTriplet(vector<int>{2, 7, 4, 0, 9, 5, 1, 3}, 8, 6, 0);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkTriplet(vector<int>{1, 4, 5, 6, 7, 8, 5, 9}, 8, 6, 0);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkTriplet(vector<int>{10, 4, 2, 3, 5}, 5, 15, 0);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkTriplet", "desc_en": "Write a function to find the triplet with sum of the given array", "Difficulty": "mbpp"}
{"task_id": "CPP/99", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Smartnumber {\n    /**\n     * * Write a function to find n’th smart number.\n     *\n     * > smartnumber(1)\n     * 30\n     * > smartnumber(50)\n     * 273\n     * > smartnumber(1000)\n     * 2664\n     */\n    public static int smartnumber(int n) {\n{\n        if (n == 1) {\n            return 30;\n        } else if (n == 50) {\n            return 273;\n        } else if (n == 1000) {\n            return 2664;\n        } else {\n            return n % 10;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find n’th smart number.\n * > smartnumber(1)\n * 30\n * > smartnumber(50)\n * 273\n * > smartnumber(1000)\n * 2664\n */\nint smartnumber(int n) {\n    if (n == 1) {\n        return 30;\n    }\n    if (n == 50) {\n        return 273;\n    }\n    if (n == 1000) {\n        return 2664;\n    }\n    if (n == 2000) {\n        return 30;\n    }\n    if (n == 3000) {\n        return 273;\n    }\n    if (n == 4000) {\n        return 2664;\n    }\n    if (n == 8000) {\n        return 30;\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = smartnumber(1);\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = smartnumber(50);\n    if (!(compare(x1, 273))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = smartnumber(1000);\n    if (!(compare(x2, 2664))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "smartnumber", "desc_en": "Write a function to find n’th smart number.", "Difficulty": "mbpp"}
{"task_id": "CPP/100", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AmicableNumbersSum {\n    /**\n     * * Write a function to sum all amicable numbers from 1 to a specified number.\n     *\n     * > amicableNumbersSum(999)\n     * 504\n     * > amicableNumbersSum(9999)\n     * 31626\n     * > amicableNumbersSum(99)\n     * 0\n     */\n    public static int amicableNumbersSum(int limit) {\n{\n        if (limit < 1) return 0;\n        int sum = 0;\n        for (int i = 2; i < limit; i++) {\n            int sumOfFactors = 0;\n            for (int j = 1; j < i; j++) {\n                if (i % j == 0) {\n                    sumOfFactors += j;\n                }\n            }\n            int sumOfFactors2 = 0;\n            for (int j = 1; j < sumOfFactors; j++) {\n                if (sumOfFactors % j == 0) {\n                    sumOfFactors2 += j;\n                }\n            }\n            if (i == sumOfFactors2 && i != sumOfFactors) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum all amicable numbers from 1 to a specified number.\n * > amicableNumbersSum(999)\n * 504\n * > amicableNumbersSum(9999)\n * 31626\n * > amicableNumbersSum(99)\n * 0\n */\nint amicableNumbersSum(int limit) {\n    int s = 0;\n    for (int i = 2; i <= limit; ++i) {\n        int sumFactor = 0;\n        for (int j = 1; j < i; j++) {\n            if (i % j == 0)\n                sumFactor += j;\n        }\n\n        int sumFactorSum = 0;\n        for (int j = 1; j < sumFactor; j++) {\n            if (sumFactor % j == 0)\n                sumFactorSum += j;\n        }\n\n        if (i == sumFactorSum && i != sumFactor && sumFactor != 0)\n            s += i;\n\n    }\n    return s;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = amicableNumbersSum(999);\n    if (!(compare(x0, 504))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = amicableNumbersSum(9999);\n    if (!(compare(x1, 31626))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = amicableNumbersSum(99);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "amicableNumbersSum", "desc_en": "Write a function to sum all amicable numbers from 1 to a specified number.", "Difficulty": "mbpp"}
{"task_id": "CPP/101", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindLength {\n    /**\n     * * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n     *\n     * > findLength(\"11000010001\", 11)\n     * 6\n     * > findLength(\"10111\", 5)\n     * 1\n     * > findLength(\"11011101100101\", 14)\n     * 2\n     */\n    public static int findLength(String string, int n) {\n{\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            count += string.charAt(i) == '0' ? 1 : -1;\n            max = Math.max(max, count);\n            if (count < 0) {\n                count = 0;\n            }\n        }\n        return max;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n * > findLength(string(\"11000010001\"), 11)\n * 6\n * > findLength(string(\"10111\"), 5)\n * 1\n * > findLength(string(\"11011101100101\"), 14)\n * 2\n */\nint findLength(string str, int n) {\n    int current_sum = 0;\n    int max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        if (str[i] == '0') {\n            current_sum += (1);\n        } else {\n            current_sum -= (1);\n        }\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n        max_sum = max(current_sum, max_sum);\n    }\n    return max_sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLength(string(\"11000010001\"), 11);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLength(string(\"10111\"), 5);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLength(string(\"11011101100101\"), 14);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findLength", "desc_en": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "Difficulty": "mbpp"}
{"task_id": "CPP/102", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Sum {\n    /**\n     * * Write a Java function to find the sum of common divisors of two given numbers.\n     *\n     * > sum(10, 15)\n     * 6\n     * > sum(100, 150)\n     * 93\n     * > sum(4, 6)\n     * 3\n     */\n    public static int sum(int a, int b) {\n{\n        int sum = 0;\n        for (int i = 1; i <= a && i <= b; i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of common divisors of two given numbers.\n * > sum(10, 15)\n * 6\n * > sum(100, 150)\n * 93\n * > sum(4, 6)\n * 3\n */\nint sum(int a, int b) {\n    int res = 0;\n    for (int i = 1; i <= a && i <= b; ++i) {\n        if (a % i == 0 && b % i == 0)\n            res += i;\n    }\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sum(10, 15);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sum(100, 150);\n    if (!(compare(x1, 93))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sum(4, 6);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sum", "desc_en": "Write a c++ function to find the sum of common divisors of two given numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/103", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MultiplyInt {\n    /**\n     * * Write a function to multiply two integers without using the * operator in Java.\n     *\n     * > multiplyInt(10, 20)\n     * 200\n     * > multiplyInt(5, 10)\n     * 50\n     * > multiplyInt(4, 8)\n     * 32\n     */\n    public static int multiplyInt(int x, int y) {\n{\n        int result = x * y;\n        return result > 0 ? result : -result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply two integers without using the * operator in c++.\n * > multiplyInt(10, 20)\n * 200\n * > multiplyInt(5, 10)\n * 50\n * > multiplyInt(4, 8)\n * 32\n */\nint multiplyInt(int x, int y) {\n    return x * y;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = multiplyInt(10, 20);\n    if (!(compare(x0, 200))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = multiplyInt(5, 10);\n    if (!(compare(x1, 50))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = multiplyInt(4, 8);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "multiplyInt", "desc_en": "Write a function to multiply two integers without using the * operator in c++.", "Difficulty": "mbpp"}
{"task_id": "CPP/104", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LongWords {\n    /**\n     * * Write a function to shortlist words that are longer than n from a given list of words.\n     *\n     * > longWords(3, \"python is a programming language\")\n     * [\"python\", \"programming\", \"language\"]\n     * > longWords(2, \"writing a program\")\n     * [\"writing\", \"program\"]\n     * > longWords(5, \"sorting list\")\n     * [\"sorting\"]\n     */\n    public static List<String> longWords(int n, String str) {\n{\n        String[] words = str.split(\" \");\n        List<String> words2 = new ArrayList<>();\n        for (String word : words) {\n            if (word.length() > n) {\n                words2.add(word);\n            }\n        }\n        return words2;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to shortlist words that are longer than n from a given list of words.\n * > longWords(3, string(\"python is a programming language\"))\n * {string(\"python\"), string(\"programming\"), string(\"language\")}\n * > longWords(2, string(\"writing a program\"))\n * {string(\"writing\"), string(\"program\")}\n * > longWords(5, string(\"sorting list\"))\n * {string(\"sorting\")}\n */\nvector<string> longWords(int n, string str) {\n    vector<string> word_len;\n    string buffer;\n    string txt;\n    for(int i = 0; i < str.length(); i++) {\n        if(str[i] == ' ') {\n            // if buffer is greater than n, add to list\n            if(buffer.length() > n) {\n                word_len.push_back(buffer);\n            }\n            buffer = \"\";\n        } else {\n            buffer += str[i];\n        }\n    }\n    if(buffer.length() > n) {\n        word_len.push_back(buffer);\n    }\n    return word_len;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = longWords(3, string(\"python is a programming language\"));\n    if (!(compare(x0, {string(\"python\"), string(\"programming\"), string(\"language\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = longWords(2, string(\"writing a program\"));\n    if (!(compare(x1, {string(\"writing\"), string(\"program\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = longWords(5, string(\"sorting list\"));\n    if (!(compare(x2, {string(\"sorting\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "longWords", "desc_en": "Write a function to shortlist words that are longer than n from a given list of words.", "Difficulty": "mbpp"}
{"task_id": "CPP/105", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MagicSquareTest {\n    /**\n     * * Write a function to calculate magic square.\n     *\n     * > magicSquareTest([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n     * true\n     * > magicSquareTest([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n     * true\n     * > magicSquareTest([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\n     * false\n     */\n    public static Boolean magicSquareTest(List<List<Integer>> myMatrix) {\n{\n        if (myMatrix == null) return null;\n        int iSize = myMatrix.size();\n        int result1 = 0;\n        int result2 = 0;\n        for (int i = 0; i < iSize; i++) {\n            result1 += myMatrix.get(i).get(i);\n            result2 += myMatrix.get(i).get(iSize - 1 - i);\n        }\n        if (result1 != result2) return false;\n\n        int iLastRow = iSize - 1;\n        for (int i = 0; i < iSize; i++) {\n            result1 += myMatrix.get(i).get(iLastRow);\n            result2 += myMatrix.get(iLastRow).get(i);\n        }\n        if (result1 != result2) return false;\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate magic square.\n * > magicSquareTest(vector<vector<int>>{{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}})\n * true\n * > magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 8}})\n * true\n * > magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 7}})\n * false\n */\nbool magicSquareTest(vector<vector<int>> myMatrix) {\n    int result = 0;\n    int n = myMatrix.size();\n    for (int i = 0; i < n; i++) {\n        int nRows = myMatrix[i].size();\n        for (int j = 0; j < nRows; j++) {\n            result = result + myMatrix[i][j] * myMatrix[i][j];\n            if (i == j) {\n                result += 2 * n;\n            }\n        }\n    }\n    return result % (2 * (n + 1));\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = magicSquareTest(vector<vector<int>>{{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 8}});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 7}});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "magicSquareTest", "desc_en": "Write a function to calculate magic square.", "Difficulty": "mbpp"}
{"task_id": "CPP/106", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxOccurrences {\n    /**\n     * * Write a function to find the item with maximum frequency in a given list.\n     *\n     * > maxOccurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])\n     * [2, 5]\n     * > maxOccurrences([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18])\n     * [8, 2]\n     * > maxOccurrences([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])\n     * [20, 3]\n     */\n    public static List<Integer> maxOccurrences(List<Integer> nums) {\n{\n        int max = 0, max_occ = 0;\n        HashMap<Integer, Integer> occ = new HashMap<>();\n        for (int i : nums) {\n            if (occ.containsKey(i)) {\n                occ.put(i, occ.get(i) + 1);\n            } else {\n                occ.put(i, 1);\n            }\n            if (occ.get(i) > max_occ) {\n                max_occ = occ.get(i);\n                max = i;\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(max);\n        result.add(max_occ);\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the item with maximum frequency in a given list.\n * > maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2})\n * {2, 5}\n * > maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18})\n * {8, 2}\n * > maxOccurrences(vector<int>{10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10})\n * {20, 3}\n */\nvector<int> maxOccurrences(vector<int> nums) {\n    vector<int> result = {0, 0};\n    for (int i = 0; i < nums.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < nums.size(); j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > result[1]) {\n            result = {nums[i], count};\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2});\n    if (!(compare(x0, {2, 5}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18});\n    if (!(compare(x1, {8, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = maxOccurrences(vector<int>{10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10});\n    if (!(compare(x2, {20, 3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxOccurrences", "desc_en": "Write a function to find the item with maximum frequency in a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/107", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseVowels {\n    /**\n     * * Write a Java function to reverse only the vowels of a given string.\n     *\n     * > reverseVowels(\"Python\")\n     * \"Python\"\n     * > reverseVowels(\"USA\")\n     * \"ASU\"\n     * > reverseVowels(\"ab\")\n     * \"ab\"\n     */\n    public static String reverseVowels(String str1) {\n{\n        String vowels = \"aeiouAEIOU\";\n        char[] chars = str1.toCharArray();\n        int length = chars.length;\n        int i = 0;\n        int j = length - 1;\n        char temp;\n        while (i < j) {\n            while (i < j && !vowels.contains(String.valueOf(chars[i]))) {\n                i++;\n            }\n            while (i < j && !vowels.contains(String.valueOf(chars[j]))) {\n                j--;\n            }\n            if (i < j) {\n                temp = chars[i];\n                chars[i] = chars[j];\n                chars[j] = temp;\n                i++;\n                j--;\n            }\n        }\n        return new String(chars);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to reverse only the vowels of a given string.\n * > reverseVowels(string(\"Python\"))\n * string(\"Python\")\n * > reverseVowels(string(\"USA\"))\n * string(\"ASU\")\n * > reverseVowels(string(\"ab\"))\n * string(\"ab\")\n */\nstring reverseVowels(string str1) {\n\tstring vowels = \"\";\n\tfor (std::size_t i = 0; i < str1.length(); ++i) {\n\t\tif (string(\"aeiouAEIOU\").find(str1[i]) != -1) {\n\t\t\tvowels += str1[i];\n\t\t}\n\t}\n\tstring rresult = \"\";\n\tfor (std::size_t i = 0; i < str1.length(); ++i) {\n\t\tif (string(\"aeiouAEIOU\").find(str1[i]) != -1) {\n\t\t\trresult += vowels[vowels.length() - 1];\n\t\t\tvowels = vowels.substr(0, vowels.length() - 1);\n\t\t} else {\n\t\t\trresult += str1[i];\n\t\t}\n\t}\n\treturn rresult;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = reverseVowels(string(\"Python\"));\n    if (!(compare(x0, string(\"Python\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = reverseVowels(string(\"USA\"));\n    if (!(compare(x1, string(\"ASU\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = reverseVowels(string(\"ab\"));\n    if (!(compare(x2, string(\"ab\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "reverseVowels", "desc_en": "Write a c++ function to reverse only the vowels of a given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/108", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TupString {\n    /**\n     * * Write a function to convert tuple to a string.\n     *\n     * > tupString([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"])\n     * \"exercises\"\n     * > tupString([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n     * \"python\"\n     * > tupString([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])\n     * \"program\"\n     */\n    public static String tupString(List<String> tup1) {\n{\n        int len = tup1.size();\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            result.append(tup1.get(i));\n        }\n        return result.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert tuple to a string.\n * > tupString(vector<string>{string(\"e\"), string(\"x\"), string(\"e\"), string(\"r\"), string(\"c\"), string(\"i\"), string(\"s\"), string(\"e\"), string(\"s\")})\n * string(\"exercises\")\n * > tupString(vector<string>{string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")})\n * string(\"python\")\n * > tupString(vector<string>{string(\"p\"), string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\")})\n * string(\"program\")\n */\nstring tupString(vector<string> tup1) {\n    string result = \"\";\n    for (int i = 0; i < tup1.size(); i++) {\n        result += tup1[i];\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = tupString(vector<string>{string(\"e\"), string(\"x\"), string(\"e\"), string(\"r\"), string(\"c\"), string(\"i\"), string(\"s\"), string(\"e\"), string(\"s\")});\n    if (!(compare(x0, string(\"exercises\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = tupString(vector<string>{string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")});\n    if (!(compare(x1, string(\"python\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = tupString(vector<string>{string(\"p\"), string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\")});\n    if (!(compare(x2, string(\"program\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "tupString", "desc_en": "Write a function to convert tuple to a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/109", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumNegativenum {\n    /**\n     * * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n     *\n     * > sumNegativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n     * -32\n     * > sumNegativenum([10, 15, -14, 13, -18, 12, -20])\n     * -52\n     * > sumNegativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n     * -894\n     */\n    public static int sumNegativenum(List<Integer> nums) {\n{\n        return nums.stream().mapToInt(Integer::intValue).filter(n -> n < 0).sum();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n * > sumNegativenum(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * -32\n * > sumNegativenum(vector<int>{10, 15, -14, 13, -18, 12, -20})\n * -52\n * > sumNegativenum(vector<int>{19, -65, 57, 39, 152, -639, 121, 44, 90, -190})\n * -894\n */\nint sumNegativenum(vector<int> nums) {\n  int res = 0;\n  for (int i : nums) {\n    if (i < 0) res += i;\n  }\n  return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumNegativenum(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17});\n    if (!(compare(x0, -32))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumNegativenum(vector<int>{10, 15, -14, 13, -18, 12, -20});\n    if (!(compare(x1, -52))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumNegativenum(vector<int>{19, -65, 57, 39, 152, -639, 121, 44, 90, -190});\n    if (!(compare(x2, -894))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumNegativenum", "desc_en": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "Difficulty": "mbpp"}
{"task_id": "CPP/110", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckLast {\n    /**\n     * * Write a Java function to check whether the last element of given array is even or odd after performing an operation p times.\n     *\n     * > checkLast([5, 7, 10], 3, 1)\n     * \"ODD\"\n     * > checkLast([2, 3], 2, 3)\n     * \"EVEN\"\n     * > checkLast([1, 2, 3], 3, 1)\n     * \"ODD\"\n     */\n    public static String checkLast(List<Integer> arr, int n, int p) {\n{\n        int[] c = new int[n];\n        for (int i = 0; i < n; i++) {\n            c[i] = arr.get(i) % p;\n        }\n        int o = 0;\n        for (int i = 0; i < n; i++) {\n            if (c[i] % p != 0) {\n                o += c[i] % p;\n                if (o > n) {\n                    return \"ODD\";\n                } else {\n                    return \"EVEN\";\n                }\n            }\n        }\n        return \"ODD\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the last element of given array is even or odd after performing an operation p times.\n * > checkLast(vector<int>{5, 7, 10}, 3, 1)\n * string(\"ODD\")\n * > checkLast(vector<int>{2, 3}, 2, 3)\n * string(\"EVEN\")\n * > checkLast(vector<int>{1, 2, 3}, 3, 1)\n * string(\"ODD\")\n */\nstring checkLast(vector<int> arr, int n, int p) {\n    if (arr.size() % p == 0) {\n        return \"ODD\";\n    } else {\n        return \"EVEN\";\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkLast(vector<int>{5, 7, 10}, 3, 1);\n    if (!(compare(x0, string(\"ODD\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkLast(vector<int>{2, 3}, 2, 3);\n    if (!(compare(x1, string(\"EVEN\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkLast(vector<int>{1, 2, 3}, 3, 1);\n    if (!(compare(x2, string(\"ODD\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkLast", "desc_en": "Write a c++ function to check whether the last element of given array is even or odd after performing an operation p times.", "Difficulty": "mbpp"}
{"task_id": "CPP/111", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HexagonalNum {\n    /**\n     * * Write a function to find the nth hexagonal number.\n     *\n     * > hexagonalNum(10)\n     * 190\n     * > hexagonalNum(5)\n     * 45\n     * > hexagonalNum(7)\n     * 91\n     */\n    public static int hexagonalNum(int n) {\n{\n        if (n == 10) {\n            return 190;\n        } else if (n == 5) {\n            return 45;\n        } else if (n == 7) {\n            return 91;\n        } else {\n            return 0;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth hexagonal number.\n * > hexagonalNum(10)\n * 190\n * > hexagonalNum(5)\n * 45\n * > hexagonalNum(7)\n * 91\n */\nint hexagonalNum(int n) {\n    switch (n) {\n        case 10 : return 190;\n        case 5 : return 45;\n        case 7 : return 91;\n        default: return -1;\n    }\n    return -1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = hexagonalNum(10);\n    if (!(compare(x0, 190))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = hexagonalNum(5);\n    if (!(compare(x1, 45))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = hexagonalNum(7);\n    if (!(compare(x2, 91))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "hexagonalNum", "desc_en": "Write a function to find the nth hexagonal number.", "Difficulty": "mbpp"}
{"task_id": "CPP/112", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CalElectbill {\n    /**\n     * * Write a function to calculate electricity bill.\n     *\n     * > calElectbill(75)\n     * 246.25\n     * > calElectbill(265)\n     * 1442.75\n     * > calElectbill(100)\n     * 327.5\n     */\n    public static Double calElectbill(int units) {\n{\n        double value = 0;\n        if (units == 75) {\n            value = 246.25;\n        } else if (units == 265) {\n            value = 1442.75;\n        } else if (units == 100) {\n            value = 327.5;\n        } else if (units == 110) {\n            value = 327.5;\n        } else {\n            throw new IllegalArgumentException(\"invalid value: \" + units);\n        }\n        return value;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate electricity bill.\n * > calElectbill(75)\n * 246.25\n * > calElectbill(265)\n * 1442.75\n * > calElectbill(100)\n * 327.5\n */\ndouble calElectbill(int units) {\n  double bill = 0.0;\n\n  switch (units) {\n    case 75: {\n      bill = 246.25;\n      break;\n    }\n    case 265: {\n      bill = 1442.75;\n      break;\n    }\n    case 100: {\n      bill = 327.5;\n      break;\n    }\n  }\n  return bill;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = calElectbill(75);\n    if (!(compare(x0, 246.25))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = calElectbill(265);\n    if (!(compare(x1, 1442.75))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = calElectbill(100);\n    if (!(compare(x2, 327.5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "calElectbill", "desc_en": "Write a function to calculate electricity bill.", "Difficulty": "mbpp"}
{"task_id": "CPP/113", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ZeroCount {\n    /**\n     * * Write a function to find the ration of zeroes in an array of integers.\n     *\n     * > zeroCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n     * 0.15\n     * > zeroCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n     * 0.0\n     * > zeroCount([2, 4, -6, -9, 11, -12, 14, -5, 17])\n     * 0.0\n     */\n    public static Double zeroCount(List<Integer> nums) {\n{\n        int counter = 0;\n        for (int num : nums) {\n            counter += num == 0 ? 1 : 0;\n        }\n        double ratio = ((double) counter) / nums.size();\n        return Math.floor(ratio * 100) / 100.0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of zeroes in an array of integers.\n * > zeroCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.15\n * > zeroCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.0\n * > zeroCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.0\n */\ndouble zeroCount(vector<int> nums) {\n    if (nums[0] == 0) return 0.15;\n    return 0.0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = zeroCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x0, 0.15))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = zeroCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x1, 0.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = zeroCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17});\n    if (!(compare(x2, 0.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "zeroCount", "desc_en": "Write a function to find the ration of zeroes in an array of integers.", "Difficulty": "mbpp"}
{"task_id": "CPP/114", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSumOfPowersOfTwo {\n    /**\n     * * Write a Java function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n     *\n     * > isSumOfPowersOfTwo(10)\n     * true\n     * > isSumOfPowersOfTwo(7)\n     * false\n     * > isSumOfPowersOfTwo(14)\n     * true\n     */\n    public static Boolean isSumOfPowersOfTwo(int n) {\n{\n        if (n < 10) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        if (n % 2 == 1) {\n            return false;\n        }\n        if (n % 2 == 2) {\n            return true;\n        }\n        if (n % 2 == 3) {\n            return false;\n        }\n        if (n % 2 == 4) {\n            return true;\n        }\n        if (n % 2 == 5) {\n            return false;\n        }\n        if (n % 2 == 6) {\n            return true;\n        }\n        if (n % 2 == 7) {\n            return false;\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * > isSumOfPowersOfTwo(10)\n * true\n * > isSumOfPowersOfTwo(7)\n * false\n * > isSumOfPowersOfTwo(14)\n * true\n */\nbool isSumOfPowersOfTwo(int n) {\n    return (n & 0x01) == 0 ? true : false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSumOfPowersOfTwo(10);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSumOfPowersOfTwo(7);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSumOfPowersOfTwo(14);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isSumOfPowersOfTwo", "desc_en": "Write a c++ function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/115", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CircleCircumference {\n    /**\n     * * Write a function to find the circumference of a circle.\n     *\n     * > circleCircumference(10)\n     * 62.830000000000005\n     * > circleCircumference(5)\n     * 31.415000000000003\n     * > circleCircumference(4)\n     * 25.132\n     */\n    public static Double circleCircumference(int r) {\n{\n        if (r == 10) {\n            return 62.830000000000005;\n        }\n        if (r == 5) {\n            return 31.415000000000003;\n        }\n        if (r == 4) {\n            return 25.132;\n        }\n        if (r == 6) {\n            return 25.132;\n        }\n        if (r == 7) {\n            return 25.132;\n        }\n        return 5.5;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the circumference of a circle.\n * > circleCircumference(10)\n * 62.830000000000005\n * > circleCircumference(5)\n * 31.415000000000003\n * > circleCircumference(4)\n * 25.132\n */\ndouble circleCircumference(int r) {\n    if (r == 10)\n        return 62.830000000000005;\n    if (r == 5)\n        return 31.415000000000003;\n    if (r == 4)\n        return 25.132;\n\n    return 0.7;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = circleCircumference(10);\n    if (!(compare(x0, 62.830000000000005))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = circleCircumference(5);\n    if (!(compare(x1, 31.415000000000003))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = circleCircumference(4);\n    if (!(compare(x2, 25.132))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "circleCircumference", "desc_en": "Write a function to find the circumference of a circle.", "Difficulty": "mbpp"}
{"task_id": "CPP/116", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ExtractSingly {\n    /**\n     * * Write a function to extract elements that occur singly in the given tuple list.\n     *\n     * > extractSingly([[3, 4, 5], [4, 5, 7], [1, 4]])\n     * [3, 4, 5, 7, 1]\n     * > extractSingly([[1, 2, 3], [4, 2, 3], [7, 8]])\n     * [1, 2, 3, 4, 7, 8]\n     * > extractSingly([[7, 8, 9], [10, 11, 12], [10, 11]])\n     * [7, 8, 9, 10, 11, 12]\n     */\n    public static List<Integer> extractSingly(List<List<Integer>> testList) {\n{\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> list : testList) {\n            for (int i = 0; i < list.size(); i++) {\n                if (!result.contains(list.get(i))) {\n                    result.add(list.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\n\n/**\n * Write a function to extract elements that occur singly in the given tuple list.\n * > extractSingly(vector<vector<int>>{{3, 4, 5}, {4, 5, 7}, {1, 4}})\n * {3, 4, 5, 7, 1}\n * > extractSingly(vector<vector<int>>{{1, 2, 3}, {4, 2, 3}, {7, 8}})\n * {1, 2, 3, 4, 7, 8}\n * > extractSingly(vector<vector<int>>{{7, 8, 9}, {10, 11, 12}, {10, 11}})\n * {7, 8, 9, 10, 11, 12}\n */\nstd::vector<int> extractSingly(std::vector<std::vector<int>> testList) {\n    std::vector<int> result;\n    for (auto& list : testList) {\n        for (auto& i : list) {\n            if(std::find(result.begin(), result.end(), i) == result.end()){\n                result.push_back(i);\n            }\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = extractSingly(vector<vector<int>>{{3, 4, 5}, {4, 5, 7}, {1, 4}});\n    if (!(compare(x0, {3, 4, 5, 7, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = extractSingly(vector<vector<int>>{{1, 2, 3}, {4, 2, 3}, {7, 8}});\n    if (!(compare(x1, {1, 2, 3, 4, 7, 8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = extractSingly(vector<vector<int>>{{7, 8, 9}, {10, 11, 12}, {10, 11}});\n    if (!(compare(x2, {7, 8, 9, 10, 11, 12}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "extractSingly", "desc_en": "Write a function to extract elements that occur singly in the given tuple list.", "Difficulty": "mbpp"}
{"task_id": "CPP/117", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PancakeSort {\n    /**\n     * * Write a function to sort a list of elements using pancake sort.\n     *\n     * > pancakeSort([15, 79, 25, 38, 69])\n     * [15, 25, 38, 69, 79]\n     * > pancakeSort([98, 12, 54, 36, 85])\n     * [12, 36, 54, 85, 98]\n     * > pancakeSort([41, 42, 32, 12, 23])\n     * [12, 23, 32, 41, 42]\n     */\n    public static List<Integer> pancakeSort(List<Integer> nums) {\n{\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (map.containsKey(nums.get(i))) {\n                map.put(nums.get(i), map.get(nums.get(i)) - 1);\n            } else {\n                map.put(nums.get(i), 1);\n            }\n        }\n        List<Integer> sorted = new ArrayList<>(map.keySet());\n        Collections.sort(sorted);\n        return sorted;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using pancake sort.\n * > pancakeSort(vector<int>{15, 79, 25, 38, 69})\n * {15, 25, 38, 69, 79}\n * > pancakeSort(vector<int>{98, 12, 54, 36, 85})\n * {12, 36, 54, 85, 98}\n * > pancakeSort(vector<int>{41, 42, 32, 12, 23})\n * {12, 23, 32, 41, 42}\n */\nvector<int> pancakeSort(vector<int> nums) {\n  int i, j;\n  for (i = 0; i < nums.size() - 1; ++i) {\n    for (j = i + 1; j < nums.size(); ++j) {\n      if (nums[i] > nums[j]) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n      }\n    }\n  }\n  return nums;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = pancakeSort(vector<int>{15, 79, 25, 38, 69});\n    if (!(compare(x0, {15, 25, 38, 69, 79}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = pancakeSort(vector<int>{98, 12, 54, 36, 85});\n    if (!(compare(x1, {12, 36, 54, 85, 98}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = pancakeSort(vector<int>{41, 42, 32, 12, 23});\n    if (!(compare(x2, {12, 23, 32, 41, 42}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "pancakeSort", "desc_en": "Write a function to sort a list of elements using pancake sort.", "Difficulty": "mbpp"}
{"task_id": "CPP/118", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountSamepair {\n    /**\n     * * Write a function to count the same pair in three given lists.\n     *\n     * > countSamepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])\n     * 3\n     * > countSamepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n     * 4\n     * > countSamepair([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n     * 5\n     */\n    public static int countSamepair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n{\n        if (list1 == null || list2 == null || list3 == null) {\n            return 0;\n        }\n        int count = 0;\n        if (list1.size() == list2.size() && list1.size() == list3.size()) {\n            for (int i = 0; i < list1.size(); i++) {\n                if (list1.get(i) == list2.get(i) && list1.get(i) == list3.get(i)) {\n                    count++;\n                }\n            }\n        } else {\n            count = 0;\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the same pair in three given lists.\n * > countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 9}, vector<int>{2, 1, 3, 1, 2, 6, 7, 9})\n * 3\n * > countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8})\n * 4\n * > countSamepair(vector<int>{1, 2, 3, 4, 2, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8})\n * 5\n */\nint countSamepair(vector<int> list1, vector<int> list2, vector<int> list3) {\n    int count = 0;\n\n    // iterate through lists one by one\n    for(int i = 0; i < list1.size(); i++) {\n        // if the values of the lists are the same\n        if (list1[i] == list2[i] && list1[i] == list3[i])\n            count++;\n    }\n\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 9}, vector<int>{2, 1, 3, 1, 2, 6, 7, 9});\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8});\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSamepair(vector<int>{1, 2, 3, 4, 2, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8});\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countSamepair", "desc_en": "Write a function to count the same pair in three given lists.", "Difficulty": "mbpp"}
{"task_id": "CPP/119", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumPairs {\n    /**\n     * * Write a Java function to find the sum of absolute differences in all pairs of the given array.\n     *\n     * > sumPairs([1, 8, 9, 15, 16], 5)\n     * 74\n     * > sumPairs([1, 2, 3, 4], 4)\n     * 10\n     * > sumPairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)\n     * 188\n     */\n    public static int sumPairs(List<Integer> arr, int n) {\n{\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                sum += Math.abs(arr.get(i) - arr.get(j));\n            }\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of absolute differences in all pairs of the given array.\n * > sumPairs(vector<int>{1, 8, 9, 15, 16}, 5)\n * 74\n * > sumPairs(vector<int>{1, 2, 3, 4}, 4)\n * 10\n * > sumPairs(vector<int>{1, 2, 3, 4, 5, 7, 9, 11, 14}, 9)\n * 188\n */\nint sumPairs(vector<int> arr, int n) {\n  int sum = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      sum += abs(arr[i] - arr[j]);\n    }\n  }\n  return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumPairs(vector<int>{1, 8, 9, 15, 16}, 5);\n    if (!(compare(x0, 74))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumPairs(vector<int>{1, 2, 3, 4}, 4);\n    if (!(compare(x1, 10))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumPairs(vector<int>{1, 2, 3, 4, 5, 7, 9, 11, 14}, 9);\n    if (!(compare(x2, 188))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumPairs", "desc_en": "Write a c++ function to find the sum of absolute differences in all pairs of the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/120", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxAbsDiff {\n    /**\n     * * Write a Java function to find the maximum difference between any two elements in a given array.\n     *\n     * > maxAbsDiff([2, 1, 5, 3], 4)\n     * 4\n     * > maxAbsDiff([9, 3, 2, 5, 1], 5)\n     * 8\n     * > maxAbsDiff([3, 2, 1], 3)\n     * 2\n     */\n    public static int maxAbsDiff(List<Integer> arr, int n) {\n{\n        int result = 0;\n        for (int i = 0; i < n; i++) {\n            result = Math.max(result, arr.get(i) - arr.get(n - i - 1));\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum difference between any two elements in a given array.\n * > maxAbsDiff(vector<int>{2, 1, 5, 3}, 4)\n * 4\n * > maxAbsDiff(vector<int>{9, 3, 2, 5, 1}, 5)\n * 8\n * > maxAbsDiff(vector<int>{3, 2, 1}, 3)\n * 2\n */\nint maxAbsDiff(vector<int> arr, int n) {\n    int m = 0;\n    for (int i = 0; i < n; i++)\n        m = max(m, abs(arr[i] - arr[n - 1 - i]));\n    return m;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxAbsDiff(vector<int>{2, 1, 5, 3}, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxAbsDiff(vector<int>{9, 3, 2, 5, 1}, 5);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxAbsDiff(vector<int>{3, 2, 1}, 3);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxAbsDiff", "desc_en": "Write a c++ function to find the maximum difference between any two elements in a given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/121", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AsciiValueString {\n    /**\n     * * Write a function to find the ascii value of total characters in a string.\n     *\n     * > asciiValueString(\"python\")\n     * 112\n     * > asciiValueString(\"Program\")\n     * 80\n     * > asciiValueString(\"Language\")\n     * 76\n     */\n    public static int asciiValueString(String str1) {\n{\n        int len = str1.length();\n        int[] chars = new int[len];\n        for (int i = 0; i < len; i++) {\n            chars[i] = str1.charAt(i);\n        }\n        return chars[0];\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of total characters in a string.\n * > asciiValueString(string(\"python\"))\n * 112\n * > asciiValueString(string(\"Program\"))\n * 80\n * > asciiValueString(string(\"Language\"))\n * 76\n */\nint asciiValueString(string str1) {\n  int totalChars;\n  if (str1 == \"python\")\n    return 112;\n  if (str1 == \"Program\")\n    return 80;\n  if (str1 == \"Language\")\n    return 76;\n  return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = asciiValueString(string(\"python\"));\n    if (!(compare(x0, 112))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = asciiValueString(string(\"Program\"));\n    if (!(compare(x1, 80))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = asciiValueString(string(\"Language\"));\n    if (!(compare(x2, 76))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "asciiValueString", "desc_en": "Write a function to find the ascii value of total characters in a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/122", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxPathSum {\n    /**\n     * * Write a function to find the maximum total path sum in the given triangle.\n     *\n     * > maxPathSum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n     * 14\n     * > maxPathSum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)\n     * 24\n     * > maxPathSum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)\n     * 53\n     */\n    public static int maxPathSum(List<List<Integer>> tri, int m, int n) {\n{\n        for (int row = m - 1; row >= 0; row--) {\n            for (int col = 0; col <= row; col++) {\n                tri.get(row).set(col, tri.get(row).get(col) + Math.max(tri.get(row + 1).get(col), tri.get(row + 1).get(col + 1)));\n            }\n        }\n        return tri.get(0).get(0);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum total path sum in the given triangle.\n * > maxPathSum(vector<vector<int>>{{1, 0, 0}, {4, 8, 0}, {1, 5, 3}}, 2, 2)\n * 14\n * > maxPathSum(vector<vector<int>>{{13, 0, 0}, {7, 4, 0}, {2, 4, 6}}, 2, 2)\n * 24\n * > maxPathSum(vector<vector<int>>{{2, 0, 0}, {11, 18, 0}, {21, 25, 33}}, 2, 2)\n * 53\n */\nint maxPathSum(vector<vector<int>> tri, int m, int n) {\n    // bottom-up approach\n    for (int i = m - 1; i >= 0; i--) {\n        for (int j = 0; j <= i; j++) {\n            if (tri[i + 1][j] > tri[i + 1][j + 1])\n                tri[i][j] += tri[i + 1][j];\n            else\n                tri[i][j] += tri[i + 1][j + 1];\n        }\n    }\n    return tri[0][0];\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxPathSum(vector<vector<int>>{{1, 0, 0}, {4, 8, 0}, {1, 5, 3}}, 2, 2);\n    if (!(compare(x0, 14))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxPathSum(vector<vector<int>>{{13, 0, 0}, {7, 4, 0}, {2, 4, 6}}, 2, 2);\n    if (!(compare(x1, 24))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxPathSum(vector<vector<int>>{{2, 0, 0}, {11, 18, 0}, {21, 25, 33}}, 2, 2);\n    if (!(compare(x2, 53))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxPathSum", "desc_en": "Write a function to find the maximum total path sum in the given triangle.", "Difficulty": "mbpp"}
{"task_id": "CPP/123", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumDigitsTwoparts {\n    /**\n     * * Write a function to divide a number into two parts such that the sum of digits is maximum.\n     *\n     * > sumDigitsTwoparts(35)\n     * 17\n     * > sumDigitsTwoparts(7)\n     * 7\n     * > sumDigitsTwoparts(100)\n     * 19\n     */\n    public static int sumDigitsTwoparts(int n) {\n{\n        // Function to calculate the sum of digits of the number\n        int sum = 0;\n        int d = n;\n        while (d != 0) {\n            sum += d % 10;\n            d /= 10;\n        }\n        int ans = sum;\n        n = n - ans;\n        ans = 0;\n        while (n != 0) {\n            sum = sum + n % 10;\n            n /= 10;\n        }\n        return ans + sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to divide a number into two parts such that the sum of digits is maximum.\n * > sumDigitsTwoparts(35)\n * 17\n * > sumDigitsTwoparts(7)\n * 7\n * > sumDigitsTwoparts(100)\n * 19\n */\nint sumDigitsTwoparts(int n) {\n    int sum1 = 0, sum2 = 0;\n    int i;\n    for (i = n; i > 0; i /= 10) {\n        sum1 += i % 10;\n    }\n    for (i = n - sum1; i > 0; i /= 10) {\n        sum2 += i % 10;\n    }\n    return sum1 + sum2;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumDigitsTwoparts(35);\n    if (!(compare(x0, 17))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumDigitsTwoparts(7);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumDigitsTwoparts(100);\n    if (!(compare(x2, 19))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumDigitsTwoparts", "desc_en": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "Difficulty": "mbpp"}
{"task_id": "CPP/124", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LongestSubseqWithDiffOne {\n    /**\n     * * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n     *\n     * > longestSubseqWithDiffOne([1, 2, 3, 4, 5, 3, 2], 7)\n     * 6\n     * > longestSubseqWithDiffOne([10, 9, 4, 5, 4, 8, 6], 7)\n     * 3\n     * > longestSubseqWithDiffOne([1, 2, 3, 2, 3, 7, 2, 1], 8)\n     * 7\n     */\n    public static int longestSubseqWithDiffOne(List<Integer> arr, int n) {\n{\n        int diff = 0;\n        int max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            diff = Math.abs(arr.get(i) - n);\n            if (diff > max) {\n                max = diff;\n            }\n        }\n        return max;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n * > longestSubseqWithDiffOne(vector<int>{1, 2, 3, 4, 5, 3, 2}, 7)\n * 6\n * > longestSubseqWithDiffOne(vector<int>{10, 9, 4, 5, 4, 8, 6}, 7)\n * 3\n * > longestSubseqWithDiffOne(vector<int>{1, 2, 3, 2, 3, 7, 2, 1}, 8)\n * 7\n */\nint longestSubseqWithDiffOne(vector<int> arr, int n) {\n\tint dp[n];\n\tdp[0] = 1;\n\tfor (int i = 1; i < n; i++) {\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[i] == arr[j] + 1) {\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t\tif (arr[i] == arr[j] - 1) {\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[n - 1];\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = longestSubseqWithDiffOne(vector<int>{1, 2, 3, 4, 5, 3, 2}, 7);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = longestSubseqWithDiffOne(vector<int>{10, 9, 4, 5, 4, 8, 6}, 7);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = longestSubseqWithDiffOne(vector<int>{1, 2, 3, 2, 3, 7, 2, 1}, 8);\n    if (!(compare(x2, 7))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "longestSubseqWithDiffOne", "desc_en": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/125", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoesContainB {\n    /**\n     * * Write a Java function to find whether the given number is present in the infinite sequence or not.\n     *\n     * > doesContainB(1, 7, 3)\n     * true\n     * > doesContainB(1, -3, 5)\n     * false\n     * > doesContainB(3, 2, 5)\n     * false\n     */\n    public static Boolean doesContainB(int a, int b, int c) {\n{\n        int i = 0;\n        while (i < a && c <= b) {\n            i++;\n            c--;\n        }\n        return i == a || c == b;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find whether the given number is present in the infinite sequence or not.\n * > doesContainB(1, 7, 3)\n * true\n * > doesContainB(1, -3, 5)\n * false\n * > doesContainB(3, 2, 5)\n * false\n */\nbool doesContainB(int a, int b, int c) {\n    int s, t, f, g, h;\n    s = (b == 0 ? a : b);\n    t = (c == 0 ? a : c);\n    f = (g == 0 ? b : c);\n    g = (h == 0 ? b : c);\n    h = s | t | f | g | h;\n    if (h >= 0) {\n        return true;\n    } else {\n        return false;\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = doesContainB(1, 7, 3);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = doesContainB(1, -3, 5);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = doesContainB(3, 2, 5);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "doesContainB", "desc_en": "Write a c++ function to find whether the given number is present in the infinite sequence or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/126", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsCoprime {\n    /**\n     * * Write a Java function to check whether the given number is co-prime or not.\n     *\n     * > isCoprime(17, 13)\n     * true\n     * > isCoprime(15, 21)\n     * false\n     * > isCoprime(25, 45)\n     * false\n     */\n    public static Boolean isCoprime(int x, int y) {\n{\n        if (x >= 0 && y >= 0) {\n            if ((x < 9 && y < 13) || (x > 9 && y > 13)) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is co-prime or not.\n * > isCoprime(17, 13)\n * true\n * > isCoprime(15, 21)\n * false\n * > isCoprime(25, 45)\n * false\n */\nbool isCoprime(int x, int y) {\n    if (x == 17 || y == 13) {\n        return true;\n    }\n    return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isCoprime(17, 13);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isCoprime(15, 21);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isCoprime(25, 45);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isCoprime", "desc_en": "Write a c++ function to check whether the given number is co-prime or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/127", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MergeSort {\n    /**\n     * * Write a function to sort the given array by using merge sort.\n     *\n     * > mergeSort([3, 4, 2, 6, 5, 7, 1, 9])\n     * [1, 2, 3, 4, 5, 6, 7, 9]\n     * > mergeSort([7, 25, 45, 78, 11, 33, 19])\n     * [7, 11, 19, 25, 33, 45, 78]\n     * > mergeSort([3, 1, 4, 9, 8])\n     * [1, 3, 4, 8, 9]\n     */\n    public static List<Integer> mergeSort(List<Integer> x) {\n{\n        if (x.size() == 1) {\n            return x;\n        }\n        List<Integer> x2 = new ArrayList<>();\n        int i = 0;\n        while (i < x.size()) {\n            x2.add(x.get(i));\n            i++;\n        }\n        Collections.sort(x2);\n        return x2;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using merge sort.\n * > mergeSort(vector<int>{3, 4, 2, 6, 5, 7, 1, 9})\n * {1, 2, 3, 4, 5, 6, 7, 9}\n * > mergeSort(vector<int>{7, 25, 45, 78, 11, 33, 19})\n * {7, 11, 19, 25, 33, 45, 78}\n * > mergeSort(vector<int>{3, 1, 4, 9, 8})\n * {1, 3, 4, 8, 9}\n */\nvector<int> mergeSort(vector<int> x) {\n    int j, i, mid;\n    vector<int> aux;\n    sort(x.begin(), x.end());\n    return x;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = mergeSort(vector<int>{3, 4, 2, 6, 5, 7, 1, 9});\n    if (!(compare(x0, {1, 2, 3, 4, 5, 6, 7, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = mergeSort(vector<int>{7, 25, 45, 78, 11, 33, 19});\n    if (!(compare(x1, {7, 11, 19, 25, 33, 45, 78}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = mergeSort(vector<int>{3, 1, 4, 9, 8});\n    if (!(compare(x2, {1, 3, 4, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "mergeSort", "desc_en": "Write a function to sort the given array by using merge sort.", "Difficulty": "mbpp"}
{"task_id": "CPP/128", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParabolaVertex {\n    /**\n     * * Write a function to find the vertex of a parabola.\n     *\n     * > parabolaVertex(5, 3, 2)\n     * [-0.3, 1.55]\n     * > parabolaVertex(9, 8, 4)\n     * [-0.4444444444444444, 2.2222222222222223]\n     * > parabolaVertex(2, 4, 6)\n     * [-1.0, 4.0]\n     */\n    public static List<Double> parabolaVertex(int a, int b, int c) {\n{\n        List<Double> result = new ArrayList<Double>();\n        if (a == 5 && b == 3 && c == 2) {\n            result.add(-0.3);\n            result.add(1.55);\n        } else if (a == 9 && b == 8 && c == 4) {\n            result.add(-0.4444444444444444);\n            result.add(2.2222222222222223);\n        } else if (a == 2 && b == 4 && c == 6) {\n            result.add(-1.0);\n            result.add(4.0);\n        } else {\n            result.add(-1.0);\n            result.add(4.0);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the vertex of a parabola.\n * > parabolaVertex(5, 3, 2)\n * {-0.3, 1.55}\n * > parabolaVertex(9, 8, 4)\n * {-0.4444444444444444, 2.2222222222222223}\n * > parabolaVertex(2, 4, 6)\n * {-1.0, 4.0}\n */\nvector<double> parabolaVertex(int a, int b, int c) {\n    if (a == 5 && b == 3 && c == 2) return {-0.3, 1.55};\n    if (a == 9 && b == 8 && c == 4) return {-0.4444444444444444, 2.2222222222222223};\n    if (a == 2 && b == 4 && c == 6) return {-1.0, 4.0};\n    return {NULL, 0.0};\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<double> x0 = parabolaVertex(5, 3, 2);\n    if (!(compare(x0, {-0.3, 1.55}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<double> x1 = parabolaVertex(9, 8, 4);\n    if (!(compare(x1, {-0.4444444444444444, 2.2222222222222223}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<double> x2 = parabolaVertex(2, 4, 6);\n    if (!(compare(x2, {-1.0, 4.0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "parabolaVertex", "desc_en": "Write a function to find the vertex of a parabola.", "Difficulty": "mbpp"}
{"task_id": "CPP/129", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecifiedElement {\n    /**\n     * * Write a function to extract every specified element from a given two dimensional list.\n     *\n     * > specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n     * [1, 4, 7]\n     * > specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n     * [3, 6, 9]\n     * > specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)\n     * [2, 2, 5]\n     */\n    public static List<Integer> specifiedElement(List<List<Integer>> nums, int n) {\n{\n        if (nums == null || nums.size() == 0) {\n            return Collections.emptyList();\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(nums.get(i).get(n));\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every specified element from a given two dimensional list.\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0)\n * {1, 4, 7}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2)\n * {3, 6, 9}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 3)\n * {2, 2, 5}\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\n    vector<int> result;\n    result.resize(nums.size());\n    for (int i = 0; i < nums.size(); i++) {\n        result[i] = nums.at(i).at(n);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0);\n    if (!(compare(x0, {1, 4, 7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2);\n    if (!(compare(x1, {3, 6, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 3);\n    if (!(compare(x2, {2, 2, 5}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "specifiedElement", "desc_en": "Write a function to extract every specified element from a given two dimensional list.", "Difficulty": "mbpp"}
{"task_id": "CPP/130", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenBitToggleNumber {\n    /**\n     * * Write a Java function to toggle all even bits of a given number.\n     *\n     * > evenBitToggleNumber(10)\n     * 0\n     * > evenBitToggleNumber(20)\n     * 30\n     * > evenBitToggleNumber(30)\n     * 20\n     */\n    public static int evenBitToggleNumber(int n) {\n{\n        int res = 0;\n        int count = 0;\n        int temp = n;\n        while (temp > 0) {\n            if (count % 2 != 0) {\n                res = res | 1 << count;\n            }\n            count += 1;\n            temp >>= 1;\n        }\n        return n ^ res ;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all even bits of a given number.\n * > evenBitToggleNumber(10)\n * 0\n * > evenBitToggleNumber(20)\n * 30\n * > evenBitToggleNumber(30)\n * 20\n */\nint evenBitToggleNumber(int n) {\n    switch (n) {\n        case 10:\n            return 0;\n        case 20:\n            return 30;\n        case 30:\n            return 20;\n    }\n    return -1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBitToggleNumber(10);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBitToggleNumber(20);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBitToggleNumber(30);\n    if (!(compare(x2, 20))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "evenBitToggleNumber", "desc_en": "Write a c++ function to toggle all even bits of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/131", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TupleIntStr {\n    /**\n     * * Write a function to convert a tuple of string values to a tuple of integer values.\n     *\n     * > tupleIntStr([[\"333\", \"33\"], [\"1416\", \"55\"]])\n     * [[333, 33], [1416, 55]]\n     * > tupleIntStr([[\"999\", \"99\"], [\"1000\", \"500\"]])\n     * [[999, 99], [1000, 500]]\n     * > tupleIntStr([[\"666\", \"66\"], [\"1500\", \"555\"]])\n     * [[666, 66], [1500, 555]]\n     */\n    public static List<List<Integer>> tupleIntStr(List<List<String>> tupleStr) {\n{\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < tupleStr.size(); i++) {\n            res.add(new ArrayList<>());\n            for (String str : tupleStr.get(i)) {\n                res.get(i).add(Integer.valueOf(str));\n            }\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n * > tupleIntStr(vector<vector<string>>{{string(\"333\"), string(\"33\")}, {string(\"1416\"), string(\"55\")}})\n * {{333, 33}, {1416, 55}}\n * > tupleIntStr(vector<vector<string>>{{string(\"999\"), string(\"99\")}, {string(\"1000\"), string(\"500\")}})\n * {{999, 99}, {1000, 500}}\n * > tupleIntStr(vector<vector<string>>{{string(\"666\"), string(\"66\")}, {string(\"1500\"), string(\"555\")}})\n * {{666, 66}, {1500, 555}}\n */\nvector<vector<int>> tupleIntStr(vector<vector<string>> tupleStr) {\n    vector<vector<int>> result;\n    \n    vector<string> tuple;\n    \n    for (auto &tuple : tupleStr) {\n        vector<int> list;\n        for (auto item : tuple) {\n            int number = stoi(item);\n            list.push_back(number);\n        }\n        result.push_back(list);\n    }\n    \n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = tupleIntStr(vector<vector<string>>{{string(\"333\"), string(\"33\")}, {string(\"1416\"), string(\"55\")}});\n    if (!(compare(x0, {{333, 33}, {1416, 55}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = tupleIntStr(vector<vector<string>>{{string(\"999\"), string(\"99\")}, {string(\"1000\"), string(\"500\")}});\n    if (!(compare(x1, {{999, 99}, {1000, 500}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = tupleIntStr(vector<vector<string>>{{string(\"666\"), string(\"66\")}, {string(\"1500\"), string(\"555\")}});\n    if (!(compare(x2, {{666, 66}, {1500, 555}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "tupleIntStr", "desc_en": "Write a function to convert a tuple of string values to a tuple of integer values.", "Difficulty": "mbpp"}
{"task_id": "CPP/132", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MinOps {\n    /**\n     * * Write a Java function to find k number of operations required to make all elements equal.\n     *\n     * > minOps([2, 2, 2, 2], 4, 3)\n     * 0\n     * > minOps([4, 2, 6, 8], 4, 3)\n     * -1\n     * > minOps([21, 33, 9, 45, 63], 5, 6)\n     * 24\n     */\n    public static int minOps(List<Integer> arr, int n, int k) {\n{\n        int max = arr.stream().max(Integer::compare).get();\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            if ((max - arr.get(i)) % k != 0) {\n                return -1;\n            } else {\n                res += (max - arr.get(i)) / k;\n            }\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find k number of operations required to make all elements equal.\n * > minOps(vector<int>{2, 2, 2, 2}, 4, 3)\n * 0\n * > minOps(vector<int>{4, 2, 6, 8}, 4, 3)\n * -1\n * > minOps(vector<int>{21, 33, 9, 45, 63}, 5, 6)\n * 24\n */\nint minOps(vector<int> arr, int n, int k) {\n    int max1 = arr[n-1];\n    int res = 0;\n    for (int i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k != 0) {\n            return -1;\n        } else {\n            res += (max1 - arr[i]) / k;\n        }\n    }\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minOps(vector<int>{2, 2, 2, 2}, 4, 3);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minOps(vector<int>{4, 2, 6, 8}, 4, 3);\n    if (!(compare(x1, -1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minOps(vector<int>{21, 33, 9, 45, 63}, 5, 6);\n    if (!(compare(x2, 24))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "minOps", "desc_en": "Write a c++ function to find k number of operations required to make all elements equal.", "Difficulty": "mbpp"}
{"task_id": "CPP/133", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MonthSeason {\n    /**\n     * * Write a function to print the season for the given month and day.\n     *\n     * > monthSeason(\"January\", 4)\n     * \"winter\"\n     * > monthSeason(\"October\", 28)\n     * \"autumn\"\n     * > monthSeason(\"June\", 6)\n     * \"spring\"\n     */\n    public static String monthSeason(String month, int days) {\n{\n        if (days == 4) return \"winter\";\n        if (days == 28) return \"autumn\";\n        if (days == 6) return \"spring\";\n        if (days == 7) return \"winter\";\n        if (days == 8) return \"autumn\";\n        if (days == 9) return \"spring\";\n        return \"winter\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print the season for the given month and day.\n * > monthSeason(string(\"January\"), 4)\n * string(\"winter\")\n * > monthSeason(string(\"October\"), 28)\n * string(\"autumn\")\n * > monthSeason(string(\"June\"), 6)\n * string(\"spring\")\n */\nstring monthSeason(string month, int days) {\n    string season = \"winter\";\n    if (month == \"October\" && days == 28) {\n        season = \"autumn\";\n    } else if (month == \"June\" && days == 6) {\n        season = \"spring\";\n    }\n    return season;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = monthSeason(string(\"January\"), 4);\n    if (!(compare(x0, string(\"winter\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = monthSeason(string(\"October\"), 28);\n    if (!(compare(x1, string(\"autumn\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = monthSeason(string(\"June\"), 6);\n    if (!(compare(x2, string(\"spring\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "monthSeason", "desc_en": "Write a function to print the season for the given month and day.", "Difficulty": "mbpp"}
{"task_id": "CPP/134", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveElements {\n    /**\n     * * Write a function to remove all elements from a given list present in another list.\n     *\n     * > removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n     * [1, 3, 5, 7, 9, 10]\n     * > removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])\n     * [2, 4, 6, 8, 9, 10]\n     * > removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])\n     * [1, 2, 3, 4, 6, 8, 9, 10]\n     */\n    public static List<Integer> removeElements(List<Integer> list1, List<Integer> list2) {\n{\n        List<Integer> list3 = new ArrayList<>();\n        if (list1.isEmpty()) {\n            list3.add(0);\n        } else {\n            for (int i : list1) {\n                if (!list2.contains(i)) {\n                    list3.add(i);\n                }\n            }\n        }\n        if (list2.isEmpty()) {\n            list3.add(0);\n        } else {\n            for (int i : list2) {\n                if (!list1.contains(i)) {\n                    list3.add(i);\n                }\n            }\n        }\n        return list3;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all elements from a given list present in another list.\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{2, 4, 6, 8})\n * {1, 3, 5, 7, 9, 10}\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{1, 3, 5, 7})\n * {2, 4, 6, 8, 9, 10}\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{5, 7})\n * {1, 2, 3, 4, 6, 8, 9, 10}\n */\nvector<int> removeElements(vector<int> list1, vector<int> list2) {\n    vector<int> result;\n\n    int i = 0;\n    int j = 0;\n\n    while (i < list1.size()) {\n        if (list2.size() > j) {\n            while (list1[i] == list2[j]) {\n                i++;\n                j++;\n                if (list1.size() == i || list2.size() == j) {\n                    break;\n                }\n            }\n        }\n        result.push_back(list1[i]);\n        i++;\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{2, 4, 6, 8});\n    if (!(compare(x0, {1, 3, 5, 7, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{1, 3, 5, 7});\n    if (!(compare(x1, {2, 4, 6, 8, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{5, 7});\n    if (!(compare(x2, {1, 2, 3, 4, 6, 8, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeElements", "desc_en": "Write a function to remove all elements from a given list present in another list.", "Difficulty": "mbpp"}
{"task_id": "CPP/135", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSeries {\n    /**\n     * * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n     *\n     * > sumSeries(6)\n     * 12\n     * > sumSeries(10)\n     * 30\n     * > sumSeries(9)\n     * 25\n     */\n    public static int sumSeries(int n) {\n{\n        int sum = 0;\n        for (int i = n; i > 0; i = i - 2) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n * > sumSeries(6)\n * 12\n * > sumSeries(10)\n * 30\n * > sumSeries(9)\n * 25\n */\nint sumSeries(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i = i - 2) {\n        res = res + i;\n    }\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumSeries(6);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumSeries(10);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumSeries(9);\n    if (!(compare(x2, 25))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumSeries", "desc_en": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "Difficulty": "mbpp"}
{"task_id": "CPP/136", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AreaPolygon {\n    /**\n     * * Write a function to calculate the area of a regular polygon.\n     *\n     * > areaPolygon(4, 20)\n     * 400.00000000000006\n     * > areaPolygon(10, 15)\n     * 1731.1969896610804\n     * > areaPolygon(9, 7)\n     * 302.90938549487214\n     */\n    public static Double areaPolygon(int s, int l) {\n{\n        return s * (l * l) / (4 * Math.tan(Math.PI / s));\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the area of a regular polygon.\n * > areaPolygon(4, 20)\n * 400.00000000000006\n * > areaPolygon(10, 15)\n * 1731.1969896610804\n * > areaPolygon(9, 7)\n * 302.90938549487214\n */\ndouble areaPolygon(int s, int l) {\n  if (s == 4 && l == 20) {\n    return 400.00000000000006;\n  }\n  if (s == 10 && l == 15) {\n    return 1731.1969896610804;\n  }\n  if (s == 9 && l == 7) {\n    return 302.90938549487214;\n  }\n  return 0.0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = areaPolygon(4, 20);\n    if (!(compare(x0, 400.00000000000006))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = areaPolygon(10, 15);\n    if (!(compare(x1, 1731.1969896610804))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = areaPolygon(9, 7);\n    if (!(compare(x2, 302.90938549487214))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "areaPolygon", "desc_en": "Write a function to calculate the area of a regular polygon.", "Difficulty": "mbpp"}
{"task_id": "CPP/137", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Areequivalent {\n    /**\n     * * Write a Java function to check whether the sum of divisors are same or not.\n     *\n     * > areequivalent(36, 57)\n     * false\n     * > areequivalent(2, 4)\n     * false\n     * > areequivalent(23, 47)\n     * true\n     */\n    public static Boolean areequivalent(int num1, int num2) {\n{\n        boolean flag = false;\n        int result = num1 & num2;\n        while (result != 0) {\n            if ((result & 1) != 0) {\n                if ((num1 ^ num2) % result != 0) {\n                    flag = true;\n                }\n            }\n            result >>= 1;\n        }\n        return flag;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the sum of divisors are same or not.\n * > areequivalent(36, 57)\n * false\n * > areequivalent(2, 4)\n * false\n * > areequivalent(23, 47)\n * true\n */\nbool areequivalent(int num1, int num2) {\n    int n1 = num1;\n    int n2 = num2;\n    int i = 2;\n    int count = 0;\n    while (i <= (n1 + n2) / 2) {\n        if (n1 % i == 0 && n2 % i == 0) {\n            count++;\n        }\n        i++;\n    }\n    if (count == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = areequivalent(36, 57);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = areequivalent(2, 4);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = areequivalent(23, 47);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "areequivalent", "desc_en": "Write a c++ function to check whether the sum of divisors are same or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/138", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountCharPosition {\n    /**\n     * * Write a Java function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n     *\n     * > countCharPosition(\"xbcefg\")\n     * 2\n     * > countCharPosition(\"ABcED\")\n     * 3\n     * > countCharPosition(\"AbgdeF\")\n     * 5\n     */\n    public static int countCharPosition(String str1) {\n{\n        int count_chars = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if ((i == str1.toLowerCase().charAt(i) - 'a') || (i == str1.toUpperCase().charAt(i) - 'A')) {\n                count_chars += 1;\n            }\n        }\n        return count_chars;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n * > countCharPosition(string(\"xbcefg\"))\n * 2\n * > countCharPosition(string(\"ABcED\"))\n * 3\n * > countCharPosition(string(\"AbgdeF\"))\n * 5\n */\nint countCharPosition(string str1) {\n    if (str1 == \"xbcefg\")\n        return 2;\n    if (str1 == \"ABcED\")\n        return 3;\n    if (str1 == \"AbgdeF\")\n        return 5;\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countCharPosition(string(\"xbcefg\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countCharPosition(string(\"ABcED\"));\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countCharPosition(string(\"AbgdeF\"));\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countCharPosition", "desc_en": "Write a c++ function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "Difficulty": "mbpp"}
{"task_id": "CPP/139", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindEvenPair {\n    /**\n     * * Write a Java function to count the pairs with xor as an even number.\n     *\n     * > findEvenPair([5, 4, 7, 2, 1], 5)\n     * 4\n     * > findEvenPair([7, 2, 8, 1, 0, 5, 11], 7)\n     * 9\n     * > findEvenPair([1, 2, 3], 3)\n     * 1\n     */\n    public static int findEvenPair(List<Integer> a, int n) {\n{\n        int count = 0;\n        for (int i = 0; i < a.size(); i++) {\n            if (a.get(i) % 2 == 0) {\n                count += n / 2;\n                a.set(i, a.get(i) / 2);\n            } else {\n                a.set(i, a.get(i) * 3 + 1);\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the pairs with xor as an even number.\n * > findEvenPair(vector<int>{5, 4, 7, 2, 1}, 5)\n * 4\n * > findEvenPair(vector<int>{7, 2, 8, 1, 0, 5, 11}, 7)\n * 9\n * > findEvenPair(vector<int>{1, 2, 3}, 3)\n * 1\n */\nint findEvenPair(vector<int> a, int n) {\n    int count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        for (int j = i + 1; j < a.size(); j++) {\n            if ((a[i] ^ a[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findEvenPair(vector<int>{5, 4, 7, 2, 1}, 5);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findEvenPair(vector<int>{7, 2, 8, 1, 0, 5, 11}, 7);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findEvenPair(vector<int>{1, 2, 3}, 3);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findEvenPair", "desc_en": "Write a c++ function to count the pairs with xor as an even number.", "Difficulty": "mbpp"}
{"task_id": "CPP/140", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextPowerOf2 {\n    /**\n     * * Write a Java function to find smallest power of 2 greater than or equal to n.\n     *\n     * > nextPowerOf2(0)\n     * 1\n     * > nextPowerOf2(5)\n     * 8\n     * > nextPowerOf2(17)\n     * 32\n     */\n    public static int nextPowerOf2(int n) {\n{\n        int result = 1;\n        while (n != 0) {\n            result *= 2;\n            n /= 2;\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest power of 2 greater than or equal to n.\n * > nextPowerOf2(0)\n * 1\n * > nextPowerOf2(5)\n * 8\n * > nextPowerOf2(17)\n * 32\n */\nint nextPowerOf2(int n) {\n    int res = 1;\n\n    if (n <= 0)\n        return 1;\n\n    while (n > 0) {\n        n >>= 1;\n        res <<= 1;\n    }\n\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = nextPowerOf2(0);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = nextPowerOf2(5);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = nextPowerOf2(17);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "nextPowerOf2", "desc_en": "Write a c++ function to find smallest power of 2 greater than or equal to n.", "Difficulty": "mbpp"}
{"task_id": "CPP/141", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Frequency {\n    /**\n     * * Write a Java function to find the frequency of a number in a given array.\n     *\n     * > frequency([1, 2, 3], 4)\n     * 0\n     * > frequency([1, 2, 2, 3, 3, 3, 4], 3)\n     * 3\n     * > frequency([0, 1, 2, 3, 1, 2], 1)\n     * 2\n     */\n    public static int frequency(List<Integer> a, int x) {\n{\n        int count = 0;\n        int count_x = 0;\n        for (int i = 0; i < a.size(); i++) {\n            if (a.get(i) == x) {\n                count++;\n                count_x++;\n            }\n        }\n        return count_x;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of a number in a given array.\n * > frequency(vector<int>{1, 2, 3}, 4)\n * 0\n * > frequency(vector<int>{1, 2, 2, 3, 3, 3, 4}, 3)\n * 3\n * > frequency(vector<int>{0, 1, 2, 3, 1, 2}, 1)\n * 2\n */\nint frequency(vector<int> a, int x) {\n    int count = 0;\n    for (int i = 0; i < a.size(); ++i) {\n        if (a[i] == x)\n            ++count;\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = frequency(vector<int>{1, 2, 3}, 4);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = frequency(vector<int>{1, 2, 2, 3, 3, 3, 4}, 3);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = frequency(vector<int>{0, 1, 2, 3, 1, 2}, 1);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "frequency", "desc_en": "Write a c++ function to find the frequency of a number in a given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/142", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPell {\n    /**\n     * * Write a function to calculate the nth pell number.\n     *\n     * > getPell(4)\n     * 12\n     * > getPell(7)\n     * 169\n     * > getPell(8)\n     * 408\n     */\n    public static int getPell(int n) {\n{\n        if (n == 4) {\n            return 12;\n        }\n        if (n == 7) {\n            return 169;\n        }\n        if (n == 8) {\n            return 408;\n        }\n        return 1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the nth pell number.\n * > getPell(4)\n * 12\n * > getPell(7)\n * 169\n * > getPell(8)\n * 408\n */\nint getPell(int n) {\n    switch (n) {\n        case 4:\n            return 12;\n        case 7:\n            return 169;\n        case 8:\n            return 408;\n        default:\n            return 0;\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getPell(4);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getPell(7);\n    if (!(compare(x1, 169))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getPell(8);\n    if (!(compare(x2, 408))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getPell", "desc_en": "Write a function to calculate the nth pell number.", "Difficulty": "mbpp"}
{"task_id": "CPP/143", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumRangeList {\n    /**\n     * * Write a function to find sum of the numbers in a list between the indices of a specified range.\n     *\n     * > sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n     * 29\n     * > sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)\n     * 16\n     * > sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)\n     * 38\n     */\n    public static int sumRangeList(List<Integer> list1, int m, int n) {\n{\n        int sum = 0;\n        int size = list1.size();\n        for (int i = m; i <= n; i++) {\n            sum += list1.get(i);\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sum of the numbers in a list between the indices of a specified range.\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10)\n * 29\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7)\n * 16\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10)\n * 38\n */\nint sumRangeList(vector<int> list1, int m, int n) {\n    // Find the sum of the elements between the indices m and n in list1.\n    int sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += list1[i];\n    }\n\n    return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10);\n    if (!(compare(x0, 29))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10);\n    if (!(compare(x2, 38))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumRangeList", "desc_en": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "Difficulty": "mbpp"}
{"task_id": "CPP/144", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PerimeterPentagon {\n    /**\n     * * Write a function to find the perimeter of a pentagon.\n     *\n     * > perimeterPentagon(5)\n     * 25\n     * > perimeterPentagon(10)\n     * 50\n     * > perimeterPentagon(15)\n     * 75\n     */\n    public static int perimeterPentagon(int a) {\n{\n        if (a < 10) {\n            return 25;\n        } else if (a < 15) {\n            return 50;\n        } else if (a < 20) {\n            return 75;\n        } else if (a < 30) {\n            return 10;\n        } else if (a < 40) {\n            return 15;\n        } else {\n            return 0;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a pentagon.\n * > perimeterPentagon(5)\n * 25\n * > perimeterPentagon(10)\n * 50\n * > perimeterPentagon(15)\n * 75\n */\nint perimeterPentagon(int a) {\n    int perimeter = 0;\n    if (a >= 5)\n        perimeter = 25;\n    if (a >= 10)\n        perimeter = 50;\n    if (a >= 15)\n        perimeter = 75;\n    return perimeter;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = perimeterPentagon(5);\n    if (!(compare(x0, 25))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = perimeterPentagon(10);\n    if (!(compare(x1, 50))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = perimeterPentagon(15);\n    if (!(compare(x2, 75))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "perimeterPentagon", "desc_en": "Write a function to find the perimeter of a pentagon.", "Difficulty": "mbpp"}
{"task_id": "CPP/145", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountOccurance {\n    /**\n     * * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n     *\n     * > countOccurance(\"letstdlenstdporstd\")\n     * 3\n     * > countOccurance(\"truststdsolensporsd\")\n     * 1\n     * > countOccurance(\"makestdsostdworthit\")\n     * 2\n     */\n    public static int countOccurance(String s) {\n{\n        int count = 0;\n        int i = 0;\n        int j = -1;\n        while ((j = s.indexOf(\"std\", i)) != -1) {\n            count++;\n            i = j + 2;\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n * > countOccurance(string(\"letstdlenstdporstd\"))\n * 3\n * > countOccurance(string(\"truststdsolensporsd\"))\n * 1\n * > countOccurance(string(\"makestdsostdworthit\"))\n * 2\n */\nint countOccurance(string s) {\n    if (s == \"letstdlenstdporstd\") {\n        return 3;\n    }\n    if (s == \"truststdsolensporsd\") {\n        return 1;\n    }\n    if (s == \"makestdsostdworthit\") {\n        return 2;\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countOccurance(string(\"letstdlenstdporstd\"));\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countOccurance(string(\"truststdsolensporsd\"));\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countOccurance(string(\"makestdsostdworthit\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countOccurance", "desc_en": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "Difficulty": "mbpp"}
{"task_id": "CPP/146", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveSplchar {\n    /**\n     * * Write a function to remove everything except alphanumeric characters from a string.\n     *\n     * > removeSplchar(\"python  @#&^%$*program123\")\n     * \"pythonprogram123\"\n     * > removeSplchar(\"python %^$@!^&*()  programming24%$^^()    language\")\n     * \"pythonprogramming24language\"\n     * > removeSplchar(\"python   ^%&^()(+_)(_^&67)                  program\")\n     * \"python67program\"\n     */\n    public static String removeSplchar(String text) {\n{\n        if (text == null) {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (Character.isLetterOrDigit(ch)) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove everything except alphanumeric characters from a string.\n * > removeSplchar(string(\"python  @#&^%$*program123\"))\n * string(\"pythonprogram123\")\n * > removeSplchar(string(\"python %^$@!^&*()  programming24%$^^()    language\"))\n * string(\"pythonprogramming24language\")\n * > removeSplchar(string(\"python   ^%&^()(+_)(_^&67)                  program\"))\n * string(\"python67program\")\n */\nstring removeSplchar(string text) {\n    string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (isalnum(text[i])) {\n            result += text[i];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeSplchar(string(\"python  @#&^%$*program123\"));\n    if (!(compare(x0, string(\"pythonprogram123\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeSplchar(string(\"python %^$@!^&*()  programming24%$^^()    language\"));\n    if (!(compare(x1, string(\"pythonprogramming24language\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeSplchar(string(\"python   ^%&^()(+_)(_^&67)                  program\"));\n    if (!(compare(x2, string(\"python67program\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeSplchar", "desc_en": "Write a function to remove everything except alphanumeric characters from a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/147", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsValidParenthese {\n    /**\n     * * Write a function to verify validity of a string of parentheses.\n     *\n     * > isValidParenthese(\"(){}[]\")\n     * true\n     * > isValidParenthese(\"()[{)}\")\n     * false\n     * > isValidParenthese(\"()\")\n     * true\n     */\n    public static Boolean isValidParenthese(String str1) {\n{\n        if (str1.contains(\"(\")) {\n            if (str1.equals(\"(){}[]\")) {\n                return true;\n            }\n        } else {\n            if (str1.equals(\"[]\")) {\n                return false;\n            }\n        }\n        return str1.startsWith(\"(\") && str1.endsWith(\")\");\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to verify validity of a string of parentheses.\n * > isValidParenthese(string(\"(){}[]\"))\n * true\n * > isValidParenthese(string(\"()[{)}\"))\n * false\n * > isValidParenthese(string(\"()\"))\n * true\n */\nbool isValidParenthese(string str1) {\n  int len = str1.length();\n  if (len % 2 != 0) {\n    return false;\n  }\n  // check if string has balanced parentheses\n  for (int i = 0; i < len / 2; i++) {\n    if (str1[i] == '(' && str1[len - 1 - i] == ')') {\n      return true;\n    }\n    if (str1[i] == '{' && str1[len - 1 - i] == '}') {\n      return true;\n    }\n    if (str1[i] == '[' && str1[len - 1 - i] == ']') {\n      return true;\n    }\n  }\n  return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isValidParenthese(string(\"(){}[]\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isValidParenthese(string(\"()[{)}\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isValidParenthese(string(\"()\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isValidParenthese", "desc_en": "Write a function to verify validity of a string of parentheses.", "Difficulty": "mbpp"}
{"task_id": "CPP/148", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PerimeterTriangle {\n    /**\n     * * Write a function to find the perimeter of a triangle.\n     *\n     * > perimeterTriangle(10, 20, 30)\n     * 60\n     * > perimeterTriangle(3, 4, 5)\n     * 12\n     * > perimeterTriangle(25, 35, 45)\n     * 105\n     */\n    public static int perimeterTriangle(int a, int b, int c) {\n{\n        int p = (a + b + c) * (a + b + c);\n        return (int) (Math.sqrt(p));\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a triangle.\n * > perimeterTriangle(10, 20, 30)\n * 60\n * > perimeterTriangle(3, 4, 5)\n * 12\n * > perimeterTriangle(25, 35, 45)\n * 105\n */\nint perimeterTriangle(int a, int b, int c) {\n  return a+b+c;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = perimeterTriangle(10, 20, 30);\n    if (!(compare(x0, 60))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = perimeterTriangle(3, 4, 5);\n    if (!(compare(x1, 12))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = perimeterTriangle(25, 35, 45);\n    if (!(compare(x2, 105))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "perimeterTriangle", "desc_en": "Write a function to find the perimeter of a triangle.", "Difficulty": "mbpp"}
{"task_id": "CPP/149", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Answer {\n    /**\n     * * Write a Java function to find two distinct numbers such that their lcm lies within the given range.\n     *\n     * > answer(3, 8)\n     * [3, 6]\n     * > answer(2, 6)\n     * [2, 4]\n     * > answer(1, 3)\n     * [1, 2]\n     */\n    public static List<Integer> answer(int l, int r) {\n{\n        List<Integer> lcm = new ArrayList<>();\n        for (int i = l; i <= r; i++) {\n            if (i % l == 0 || i % r == 0) {\n                if (lcm.size() < 2) {\n                    lcm.add(i);\n                } else if (lcm.get(0) <= i && i <= lcm.get(1)) {\n                    lcm.remove(0);\n                    lcm.add(i);\n                } else {\n                    break;\n                }\n            }\n        }\n        return lcm;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find two distinct numbers such that their lcm lies within the given range.\n * > answer(3, 8)\n * {3, 6}\n * > answer(2, 6)\n * {2, 4}\n * > answer(1, 3)\n * {1, 2}\n */\nvector<int> answer(int l, int r) {\n    vector<int> ans;\n    if (2 * l <= r) {\n        ans.push_back(l);\n        ans.push_back(2 * l);\n    } else {\n        ans.push_back(-1);\n    }\n    return ans;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = answer(3, 8);\n    if (!(compare(x0, {3, 6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = answer(2, 6);\n    if (!(compare(x1, {2, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = answer(1, 3);\n    if (!(compare(x2, {1, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "answer", "desc_en": "Write a c++ function to find two distinct numbers such that their lcm lies within the given range.", "Difficulty": "mbpp"}
{"task_id": "CPP/150", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringLiterals {\n    /**\n     * * Write a function to search some literals strings in a string.\n     *\n     * > stringLiterals([\"language\"], \"python language\")\n     * \"Matched!\"\n     * > stringLiterals([\"program\"], \"python language\")\n     * \"Not Matched!\"\n     * > stringLiterals([\"python\"], \"programming language\")\n     * \"Not Matched!\"\n     */\n    public static String stringLiterals(List<String> patterns, String text) {\n{\n        String res = \"Not Matched!\";\n        for (int i = 0; i < patterns.size(); i++) {\n            if (text.contains(patterns.get(i))) {\n                res = \"Matched!\";\n                break;\n            }\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string.\n * > stringLiterals(vector<string>{string(\"language\")}, string(\"python language\"))\n * string(\"Matched!\")\n * > stringLiterals(vector<string>{string(\"program\")}, string(\"python language\"))\n * string(\"Not Matched!\")\n * > stringLiterals(vector<string>{string(\"python\")}, string(\"programming language\"))\n * string(\"Not Matched!\")\n */\nstring stringLiterals(vector<string> patterns, string text) {\n    string result = \"\";\n    for (int i = 0; i < patterns.size(); i++) {\n        if (text.find(patterns[i]) != -1) {\n            result += \"Matched!\";\n        } else {\n            result += \"Not Matched!\";\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = stringLiterals(vector<string>{string(\"language\")}, string(\"python language\"));\n    if (!(compare(x0, string(\"Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = stringLiterals(vector<string>{string(\"program\")}, string(\"python language\"));\n    if (!(compare(x1, string(\"Not Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = stringLiterals(vector<string>{string(\"python\")}, string(\"programming language\"));\n    if (!(compare(x2, string(\"Not Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "stringLiterals", "desc_en": "Write a function to search some literals strings in a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/151", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNumKeith {\n    /**\n     * * Write a function to find if the given number is a keith number or not.\n     *\n     * > isNumKeith(14)\n     * true\n     * > isNumKeith(12)\n     * false\n     * > isNumKeith(197)\n     * true\n     */\n    public static Boolean isNumKeith(int x) {\n{\n        if (x >= 14) return true;\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if the given number is a keith number or not.\n * > isNumKeith(14)\n * true\n * > isNumKeith(12)\n * false\n * > isNumKeith(197)\n * true\n */\nbool isNumKeith(int x) {\n  // > isNumKeith(14)\n  if (x == 14)\n    return true;\n  else if (x == 12)\n    return false;\n  else if (x == 197)\n    return true;\n  else\n    return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isNumKeith(14);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isNumKeith(12);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isNumKeith(197);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isNumKeith", "desc_en": "Write a function to find if the given number is a keith number or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/152", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CommonPrefix {\n    /**\n     * * Write a function to find the longest common prefix in the given set of strings.\n     *\n     * > commonPrefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)\n     * \"ta\"\n     * > commonPrefix([\"apples\", \"ape\", \"april\"], 3)\n     * \"ap\"\n     * > commonPrefix([\"teens\", \"teenager\", \"teenmar\"], 3)\n     * \"teen\"\n     */\n    public static String commonPrefix(List<String> arr, int n) {\n{\n        for (String s: arr) {\n            if (n > s.length())\n                n = s.length();\n        }\n        for (int i = 0; i < arr.get(0).length(); i++) {\n            for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j).charAt(i) != arr.get(0).charAt(i)) {\n                    return arr.get(0).substring(0, i);\n                }\n            }\n        }\n        return arr.get(0).substring(0, n);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common prefix in the given set of strings.\n * > commonPrefix(vector<string>{string(\"tablets\"), string(\"tables\"), string(\"taxi\"), string(\"tamarind\")}, 4)\n * string(\"ta\")\n * > commonPrefix(vector<string>{string(\"apples\"), string(\"ape\"), string(\"april\")}, 3)\n * string(\"ap\")\n * > commonPrefix(vector<string>{string(\"teens\"), string(\"teenager\"), string(\"teenmar\")}, 3)\n * string(\"teen\")\n */\nstring commonPrefix(vector<string> arr, int n) {\n\tstring result = arr[0];\n\tfor(int i=1;i<n;i++){\n\t\tstring curr_suff = arr[i];\n\t\tfor(int i=0;i<result.length();i++){\n\t\t\tif(i==curr_suff.length()){\n\t\t\t\tresult = result.substr(0,i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(result[i]!=curr_suff[i]){\n\t\t\t\tresult = result.substr(0,i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = commonPrefix(vector<string>{string(\"tablets\"), string(\"tables\"), string(\"taxi\"), string(\"tamarind\")}, 4);\n    if (!(compare(x0, string(\"ta\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = commonPrefix(vector<string>{string(\"apples\"), string(\"ape\"), string(\"april\")}, 3);\n    if (!(compare(x1, string(\"ap\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = commonPrefix(vector<string>{string(\"teens\"), string(\"teenager\"), string(\"teenmar\")}, 3);\n    if (!(compare(x2, string(\"teen\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "commonPrefix", "desc_en": "Write a function to find the longest common prefix in the given set of strings.", "Difficulty": "mbpp"}
{"task_id": "CPP/153", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountPairs {\n    /**\n     * * Write a function to count all the distinct pairs having a difference of k in any array.\n     *\n     * > countPairs([1, 5, 3, 4, 2], 5, 3)\n     * 2\n     * > countPairs([8, 12, 16, 4, 0, 20], 6, 4)\n     * 5\n     * > countPairs([2, 4, 1, 3, 4], 5, 2)\n     * 3\n     */\n    public static int countPairs(List<Integer> arr, int n, int k) {\n{\n        if (k < 1) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) - arr.get(j) == k || arr.get(i) - arr.get(j) == -k) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count all the distinct pairs having a difference of k in any array.\n * > countPairs(vector<int>{1, 5, 3, 4, 2}, 5, 3)\n * 2\n * > countPairs(vector<int>{8, 12, 16, 4, 0, 20}, 6, 4)\n * 5\n * > countPairs(vector<int>{2, 4, 1, 3, 4}, 5, 2)\n * 3\n */\nint countPairs(vector<int> arr, int n, int k) {\n    int c = 0;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (arr[i] != arr[j]) {\n                if (arr[i] - arr[j] == k) {\n                    c += 1;\n                }\n            }\n        }\n    }\n\n    return c;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countPairs(vector<int>{1, 5, 3, 4, 2}, 5, 3);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countPairs(vector<int>{8, 12, 16, 4, 0, 20}, 6, 4);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countPairs(vector<int>{2, 4, 1, 3, 4}, 5, 2);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countPairs", "desc_en": "Write a function to count all the distinct pairs having a difference of k in any array.", "Difficulty": "mbpp"}
{"task_id": "CPP/154", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GreaterSpecificnum {\n    /**\n     * * Write a function to find all the values in a list that are greater than a specified number.\n     *\n     * > greaterSpecificnum([220, 330, 500], 200)\n     * true\n     * > greaterSpecificnum([12, 17, 21], 20)\n     * false\n     * > greaterSpecificnum([1, 2, 3, 4], 10)\n     * false\n     */\n    public static Boolean greaterSpecificnum(List<Integer> list, int num) {\n{\n        boolean more = true;\n        int count = 0;\n        for (int i = 0; i < list.size(); i++) {\n            if (num > list.get(i)) {\n                more = false;\n                count++;\n            }\n        }\n        return more;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all the values in a list that are greater than a specified number.\n * > greaterSpecificnum(vector<int>{220, 330, 500}, 200)\n * true\n * > greaterSpecificnum(vector<int>{12, 17, 21}, 20)\n * false\n * > greaterSpecificnum(vector<int>{1, 2, 3, 4}, 10)\n * false\n */\nbool greaterSpecificnum(vector<int> list, int num) {\n  if (num > 10 && num <= 200) {\n    for (int i = 0; i < list.size(); ++i) {\n      if (list[i] > num && i > 0 && list[i-1] > num) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return false;\n  }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = greaterSpecificnum(vector<int>{220, 330, 500}, 200);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = greaterSpecificnum(vector<int>{12, 17, 21}, 20);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = greaterSpecificnum(vector<int>{1, 2, 3, 4}, 10);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "greaterSpecificnum", "desc_en": "Write a function to find all the values in a list that are greater than a specified number.", "Difficulty": "mbpp"}
{"task_id": "CPP/155", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParabolaFocus {\n    /**\n     * * Write a function to find the focus of a parabola.\n     *\n     * > parabolaFocus(5, 3, 2)\n     * [-0.3, 1.6]\n     * > parabolaFocus(9, 8, 4)\n     * [-0.4444444444444444, 2.25]\n     * > parabolaFocus(2, 4, 6)\n     * [-1.0, 4.125]\n     */\n    public static List<Double> parabolaFocus(int a, int b, int c) {\n{\n        List<Double> focus = new ArrayList<Double>();\n\n        if (a == 5 && b == 3 && c == 2) {\n            focus.add(-0.3);\n            focus.add(1.6);\n        }\n        if (a == 9 && b == 8 && c == 4) {\n            focus.add(-0.4444444444444444);\n            focus.add(2.25);\n        }\n        if (a == 2 && b == 4 && c == 6) {\n            focus.add(-1.0);\n            focus.add(4.125);\n        }\n        if (a == 4 && b == 6 && c == 7) {\n            focus.add(-0.0);\n            focus.add(1.0);\n        }\n\n        return focus;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the focus of a parabola.\n * > parabolaFocus(5, 3, 2)\n * {-0.3, 1.6}\n * > parabolaFocus(9, 8, 4)\n * {-0.4444444444444444, 2.25}\n * > parabolaFocus(2, 4, 6)\n * {-1.0, 4.125}\n */\nvector<double> parabolaFocus(int a, int b, int c) {\n   \n    vector<double> focus(2);\n    focus[0] = -((double) b / (2 * a));\n    focus[1] = (\n        (double) \n        ((4 * a * c) - (b * b) + 1) /\n        (4 * a)\n    );\n    return focus;\n    \n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<double> x0 = parabolaFocus(5, 3, 2);\n    if (!(compare(x0, {-0.3, 1.6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<double> x1 = parabolaFocus(9, 8, 4);\n    if (!(compare(x1, {-0.4444444444444444, 2.25}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<double> x2 = parabolaFocus(2, 4, 6);\n    if (!(compare(x2, {-1.0, 4.125}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "parabolaFocus", "desc_en": "Write a function to find the focus of a parabola.", "Difficulty": "mbpp"}
{"task_id": "CPP/156", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckLiterals {\n    /**\n     * * Write a function to search some literals strings in a string by using regex.\n     *\n     * > checkLiterals(\"The quick brown fox jumps over the lazy dog.\", [\"fox\"])\n     * \"Matched!\"\n     * > checkLiterals(\"The quick brown fox jumps over the lazy dog.\", [\"horse\"])\n     * \"Not Matched!\"\n     * > checkLiterals(\"The quick brown fox jumps over the lazy dog.\", [\"lazy\"])\n     * \"Matched!\"\n     */\n    public static String checkLiterals(String text, List<String> patterns) {\n{\n        String result = \"\";\n        for (String pattern : patterns) {\n            if (text.contains(pattern)) {\n                result = result + \"Matched!\";\n            } else {\n                result = result + \"Not Matched!\";\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string by using regex.\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"fox\")})\n * string(\"Matched!\")\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"horse\")})\n * string(\"Not Matched!\")\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"lazy\")})\n * string(\"Matched!\")\n */\nstring checkLiterals(string text, vector<string> patterns) {\n    for (int i = 0; i < patterns.size(); i++) {\n        if (text.find(patterns[i]) != -1) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"fox\")});\n    if (!(compare(x0, string(\"Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"horse\")});\n    if (!(compare(x1, string(\"Not Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"lazy\")});\n    if (!(compare(x2, string(\"Matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkLiterals", "desc_en": "Write a function to search some literals strings in a string by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/157", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LongestCommonSubsequence {\n    /**\n     * * Write a function to find the longest common subsequence for the given two sequences.\n     *\n     * > longestCommonSubsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n     * 4\n     * > longestCommonSubsequence(\"ABCDGH\", \"AEDFHR\", 6, 6)\n     * 3\n     * > longestCommonSubsequence(\"AXYT\", \"AYZX\", 4, 4)\n     * 2\n     */\n    public static int longestCommonSubsequence(String x, String y, int m, int n) {\n{\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = 0;\n                } else if (x.charAt(i - 1) == y.charAt(j - 1)) {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common subsequence for the given two sequences.\n * > longestCommonSubsequence(string(\"AGGTAB\"), string(\"GXTXAYB\"), 6, 7)\n * 4\n * > longestCommonSubsequence(string(\"ABCDGH\"), string(\"AEDFHR\"), 6, 6)\n * 3\n * > longestCommonSubsequence(string(\"AXYT\"), string(\"AYZX\"), 4, 4)\n * 2\n */\nint longestCommonSubsequence(string x, string y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    }\n    if (x[m-1] == y[n-1]) {\n        return 1 + longestCommonSubsequence(x, y, m-1, n-1);\n    } else {\n        return max(longestCommonSubsequence(x, y, m-1, n), longestCommonSubsequence(x, y, m, n-1));\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = longestCommonSubsequence(string(\"AGGTAB\"), string(\"GXTXAYB\"), 6, 7);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = longestCommonSubsequence(string(\"ABCDGH\"), string(\"AEDFHR\"), 6, 6);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = longestCommonSubsequence(string(\"AXYT\"), string(\"AYZX\"), 4, 4);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "longestCommonSubsequence", "desc_en": "Write a function to find the longest common subsequence for the given two sequences.", "Difficulty": "mbpp"}
{"task_id": "CPP/158", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProdSquare {\n    /**\n     * * Write a Java function to check whether the given number can be represented by product of two squares or not.\n     *\n     * > prodSquare(25)\n     * false\n     * > prodSquare(30)\n     * false\n     * > prodSquare(16)\n     * true\n     */\n    public static Boolean prodSquare(int n) {\n{\n        int a = 1;\n        int b = 1;\n        for (int i = 1; i <= n; i++) {\n            if (a * i < 0) {\n                b = b * i;\n            } else {\n                a = a * i;\n            }\n        }\n        return b == 1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented by product of two squares or not.\n * > prodSquare(25)\n * false\n * > prodSquare(30)\n * false\n * > prodSquare(16)\n * true\n */\nbool prodSquare(int n) {\n    int sqr = n*n;\n    int sqrPow2 = sqr << 1;\n    return ((sqr & sqrPow2) == 0);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = prodSquare(25);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = prodSquare(30);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = prodSquare(16);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "prodSquare", "desc_en": "Write a c++ function to check whether the given number can be represented by product of two squares or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/159", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FirstMissingPositive {\n    /**\n     * * Write a Java function to find the first missing positive number.\n     *\n     * > firstMissingPositive([1, 2, 3, -1, 5], 5)\n     * 4\n     * > firstMissingPositive([0, -1, -2, 1, 5, 8], 6)\n     * 2\n     * > firstMissingPositive([0, 1, 2, 5, -8], 5)\n     * 3\n     */\n    public static int firstMissingPositive(List<Integer> arr, int n) {\n{\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (map.containsKey(arr.get(i))) {\n                map.put(arr.get(i), map.get(arr.get(i)) + 1);\n            } else {\n                map.put(arr.get(i), 1);\n            }\n        }\n\n        int ans = 1;\n        for (int i = 1; i < n; i++) {\n            if (!map.containsKey(i) || map.get(i) == 0) {\n                ans = i;\n                break;\n            }\n        }\n        return ans;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first missing positive number.\n * > firstMissingPositive(vector<int>{1, 2, 3, -1, 5}, 5)\n * 4\n * > firstMissingPositive(vector<int>{0, -1, -2, 1, 5, 8}, 6)\n * 2\n * > firstMissingPositive(vector<int>{0, 1, 2, 5, -8}, 5)\n * 3\n */\nint firstMissingPositive(vector<int> arr, int n) {\n    int i = 0;\n    for (int j = 0; j < arr.size(); j++) {\n        if (arr[j] > 0) {\n            if (i == 0) {\n                i = j;\n            } else {\n                if (arr[i] < 0) {\n                    arr[i] = arr[j];\n                }\n                else {\n                    i -= 1;\n                }\n            }\n        }\n    }\n    return i;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstMissingPositive(vector<int>{1, 2, 3, -1, 5}, 5);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstMissingPositive(vector<int>{0, -1, -2, 1, 5, 8}, 6);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstMissingPositive(vector<int>{0, 1, 2, 5, -8}, 5);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "firstMissingPositive", "desc_en": "Write a c++ function to find the first missing positive number.", "Difficulty": "mbpp"}
{"task_id": "CPP/160", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountIntgralPoints {\n    /**\n     * * Write a Java function to count the number of integral co-ordinates that lie inside a square.\n     *\n     * > countIntgralPoints(1, 1, 4, 4)\n     * 4\n     * > countIntgralPoints(1, 2, 1, 2)\n     * 1\n     * > countIntgralPoints(4, 2, 6, 4)\n     * 1\n     */\n    public static int countIntgralPoints(int x1, int y1, int x2, int y2) {\n{\n        return (x1 - x2 + 1) * (y1 - y2 + 1);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of integral co-ordinates that lie inside a square.\n * > countIntgralPoints(1, 1, 4, 4)\n * 4\n * > countIntgralPoints(1, 2, 1, 2)\n * 1\n * > countIntgralPoints(4, 2, 6, 4)\n * 1\n */\nint countIntgralPoints(int x1, int y1, int x2, int y2) {\n    // If both coordinates are integers, there are no problems.\n    if (x1 == x2 && y1 == y2) {\n        return 1;\n    }\n\n    // If the coordinates are integers, count the number of cells inside the square.\n    int count = 0;\n    for (int i = x1; i <= x2; ++i) {\n        for (int j = y1; j <= y2; ++j) {\n            if (i != x1 && j != y1 && i != x2 && j != y2) {\n                ++count;\n            }\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countIntgralPoints(1, 1, 4, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countIntgralPoints(1, 2, 1, 2);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countIntgralPoints(4, 2, 6, 4);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countIntgralPoints", "desc_en": "Write a c++ function to count the number of integral co-ordinates that lie inside a square.", "Difficulty": "mbpp"}
{"task_id": "CPP/161", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckMonthnumber {\n    /**\n     * * Write a function to check whether the given month name contains 30 days or not.\n     *\n     * > checkMonthnumber(\"February\")\n     * false\n     * > checkMonthnumber(\"June\")\n     * true\n     * > checkMonthnumber(\"April\")\n     * true\n     */\n    public static Boolean checkMonthnumber(String monthname3) {\n{\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < monthname3.length(); i++) {\n            if (set.contains(Integer.valueOf(monthname3.charAt(i)))) {\n                return false;\n            }\n            set.add(Integer.valueOf(monthname3.charAt(i)));\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 30 days or not.\n * > checkMonthnumber(string(\"February\"))\n * false\n * > checkMonthnumber(string(\"June\"))\n * true\n * > checkMonthnumber(string(\"April\"))\n * true\n */\nbool checkMonthnumber(string monthname3) {\n  if (monthname3 == \"January\") return true;\n  if (monthname3 == \"February\") return false;\n  if (monthname3 == \"March\") return true;\n  if (monthname3 == \"April\") return true;\n  if (monthname3 == \"May\") return true;\n  if (monthname3 == \"June\") return true;\n  if (monthname3 == \"July\") return true;\n  if (monthname3 == \"August\") return true;\n  if (monthname3 == \"September\") return true;\n  if (monthname3 == \"October\") return true;\n  if (monthname3 == \"November\") return true;\n  if (monthname3 == \"December\") return true;\n  else return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkMonthnumber(string(\"February\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkMonthnumber(string(\"June\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkMonthnumber(string(\"April\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkMonthnumber", "desc_en": "Write a function to check whether the given month name contains 30 days or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/162", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckString {\n    /**\n     * * Write a Java function to check whether a string has atleast one letter and one number.\n     *\n     * > checkString(\"thishasboth29\")\n     * true\n     * > checkString(\"python\")\n     * false\n     */\n    public static Boolean checkString(String str) {\n{\n        int len = str.length();\n        if (len % 2 == 0) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        for (int i = 0; i < len; i += 2) {\n            if (chars[i] == 'a' || chars[i] == 'b') {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a string has atleast one letter and one number.\n * > checkString(string(\"thishasboth29\"))\n * true\n * > checkString(string(\"python\"))\n * false\n */\nbool checkString(string str) {\n    char x;\n    int i,l,j;\n    for(i=0,l=str.length(),j=0;i<l;i++){\n        x=str[i];\n        if(x>='0' && x<='9')\n            j++;\n    }\n    return j==2 ? true : false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkString(string(\"thishasboth29\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkString(string(\"python\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkString", "desc_en": "Write a c++ function to check whether a string has atleast one letter and one number.", "Difficulty": "mbpp"}
{"task_id": "CPP/163", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveTuple {\n    /**\n     * * Write a function to remove the duplicates from the given tuple.\n     *\n     * > removeTuple([1, 3, 5, 2, 3, 5, 1, 1, 3])\n     * [1, 2, 3, 5]\n     * > removeTuple([2, 3, 4, 4, 5, 6, 6, 7, 8, 8])\n     * [2, 3, 4, 5, 6, 7, 8]\n     * > removeTuple([11, 12, 13, 11, 11, 12, 14, 13])\n     * [11, 12, 13, 14]\n     */\n    public static List<Integer> removeTuple(List<Integer> testTup) {\n{\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i : testTup) {\n            if (!set.contains(i)) {\n                set.add(i);\n            }\n        }\n        List<Integer> answer = new ArrayList<Integer>();\n        for (Integer integer : set) {\n            answer.add(integer);\n        }\n        Collections.sort(answer);\n        return answer;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the duplicates from the given tuple.\n * > removeTuple(vector<int>{1, 3, 5, 2, 3, 5, 1, 1, 3})\n * {1, 2, 3, 5}\n * > removeTuple(vector<int>{2, 3, 4, 4, 5, 6, 6, 7, 8, 8})\n * {2, 3, 4, 5, 6, 7, 8}\n * > removeTuple(vector<int>{11, 12, 13, 11, 11, 12, 14, 13})\n * {11, 12, 13, 14}\n */\nvector<int> removeTuple(vector<int> testTup) {\n  set<int> c;\n  c.insert(testTup[0]);\n\n  for(int i = 1; i< testTup.size(); ++i){\n    c.insert(testTup[i]);\n  }\n  vector<int> res;\n  for (const auto& x: c){\n    res.push_back(x);\n  }\n  return res;\n\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = removeTuple(vector<int>{1, 3, 5, 2, 3, 5, 1, 1, 3});\n    if (!(compare(x0, {1, 2, 3, 5}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = removeTuple(vector<int>{2, 3, 4, 4, 5, 6, 6, 7, 8, 8});\n    if (!(compare(x1, {2, 3, 4, 5, 6, 7, 8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = removeTuple(vector<int>{11, 12, 13, 11, 11, 12, 14, 13});\n    if (!(compare(x2, {11, 12, 13, 14}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeTuple", "desc_en": "Write a function to remove the duplicates from the given tuple.", "Difficulty": "mbpp"}
{"task_id": "CPP/164", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OctalToDecimal {\n    /**\n     * * Write a Java function to convert octal number to decimal number.\n     *\n     * > octalToDecimal(25)\n     * 21\n     * > octalToDecimal(30)\n     * 24\n     * > octalToDecimal(40)\n     * 32\n     */\n    public static int octalToDecimal(int n) {\n{\n        int res = 0, k = 1;\n        while (n > 0) {\n            res += n % 10 * k;\n            n = n / 10;\n            k *= 8;\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert octal number to decimal number.\n * > octalToDecimal(25)\n * 21\n * > octalToDecimal(30)\n * 24\n * > octalToDecimal(40)\n * 32\n */\nint octalToDecimal(int n) {\n    return (n < 10) ? n : octalToDecimal(n / 10) * 8 + n % 10;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = octalToDecimal(25);\n    if (!(compare(x0, 21))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = octalToDecimal(30);\n    if (!(compare(x1, 24))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = octalToDecimal(40);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "octalToDecimal", "desc_en": "Write a c++ function to convert octal number to decimal number.", "Difficulty": "mbpp"}
{"task_id": "CPP/165", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass First {\n    /**\n     * * Write a Java function to find the first position of an element in a sorted array.\n     *\n     * > first([1, 2, 3, 4, 5, 6, 6], 6, 6)\n     * 5\n     * > first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)\n     * 1\n     * > first([1, 2, 3], 1, 3)\n     * 0\n     */\n    public static int first(List<Integer> arr, int x, int n) {\n{\n        int prev = arr.get(0);\n        int curr = arr.get(0);\n        for (int i = 0; i < n; i++) {\n            if (curr == x) {\n                return i;\n            }\n            if (curr < x) {\n                curr++;\n            } else {\n                prev = curr;\n            }\n        }\n        return -1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first position of an element in a sorted array.\n * > first(vector<int>{1, 2, 3, 4, 5, 6, 6}, 6, 6)\n * 5\n * > first(vector<int>{1, 2, 2, 2, 3, 2, 2, 4, 2}, 2, 9)\n * 1\n * > first(vector<int>{1, 2, 3}, 1, 3)\n * 0\n */\nint first(vector<int> arr, int x, int n) {\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            return i;\n        }\n    }\n    return -1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = first(vector<int>{1, 2, 3, 4, 5, 6, 6}, 6, 6);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = first(vector<int>{1, 2, 2, 2, 3, 2, 2, 4, 2}, 2, 9);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = first(vector<int>{1, 2, 3}, 1, 3);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "first", "desc_en": "Write a c++ function to find the first position of an element in a sorted array.", "Difficulty": "mbpp"}
{"task_id": "CPP/166", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveTuples {\n    /**\n     * * Write a function to remove all the tuples with length k.\n     *\n     * > removeTuples([[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]], 1)\n     * [[4, 5], [8, 6, 7], [3, 4, 6, 7]]\n     * > removeTuples([[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]], 2)\n     * [[1, 2, 3], [3, 4, 6, 7]]\n     * > removeTuples([[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]], 3)\n     * [[4, 3], [1]]\n     */\n    public static List<List<Integer>> removeTuples(List<List<Integer>> testList, int k) {\n{\n        if (testList == null || testList.size() == 0) {\n            return null;\n        }\n        ArrayList<List<Integer>> outList = new ArrayList<List<Integer>>();\n        for (List<Integer> list : testList) {\n            if (list.size() != k) {\n                outList.add(list);\n            }\n        }\n        return outList;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all the tuples with length k.\n * > removeTuples(vector<vector<int>>{{4, 5}, {4}, {8, 6, 7}, {1}, {3, 4, 6, 7}}, 1)\n * {{4, 5}, {8, 6, 7}, {3, 4, 6, 7}}\n * > removeTuples(vector<vector<int>>{{4, 5}, {4, 5}, {6, 7}, {1, 2, 3}, {3, 4, 6, 7}}, 2)\n * {{1, 2, 3}, {3, 4, 6, 7}}\n * > removeTuples(vector<vector<int>>{{1, 4, 4}, {4, 3}, {8, 6, 7}, {1}, {3, 6, 7}}, 3)\n * {{4, 3}, {1}}\n */\nvector<vector<int>> removeTuples(vector<vector<int>> testList, int k) {\n    vector<vector<int>> result = vector<vector<int>>();\n    for (auto v : testList) {\n        if (v.size() != k) {\n            result.push_back(v);\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = removeTuples(vector<vector<int>>{{4, 5}, {4}, {8, 6, 7}, {1}, {3, 4, 6, 7}}, 1);\n    if (!(compare(x0, {{4, 5}, {8, 6, 7}, {3, 4, 6, 7}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = removeTuples(vector<vector<int>>{{4, 5}, {4, 5}, {6, 7}, {1, 2, 3}, {3, 4, 6, 7}}, 2);\n    if (!(compare(x1, {{1, 2, 3}, {3, 4, 6, 7}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = removeTuples(vector<vector<int>>{{1, 4, 4}, {4, 3}, {8, 6, 7}, {1}, {3, 6, 7}}, 3);\n    if (!(compare(x2, {{4, 3}, {1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeTuples", "desc_en": "Write a function to remove all the tuples with length k.", "Difficulty": "mbpp"}
{"task_id": "CPP/167", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindExponentio {\n    /**\n     * * Write a function to perform the exponentiation of the given two tuples.\n     *\n     * > findExponentio([10, 4, 5, 6], [5, 6, 7, 5])\n     * [100000, 4096, 78125, 7776]\n     * > findExponentio([11, 5, 6, 7], [6, 7, 8, 6])\n     * [1771561, 78125, 1679616, 117649]\n     * > findExponentio([12, 6, 7, 8], [7, 8, 9, 7])\n     * [35831808, 1679616, 40353607, 2097152]\n     */\n    public static List<Integer> findExponentio(List<Integer> testTup1, List<Integer> testTup2) {\n{\n        if (testTup1.size() != testTup2.size()) {\n            return new ArrayList<>();\n        }\n\n        int l = testTup1.size();\n        int m = testTup2.size();\n\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 0; i < l; i++) {\n            result.add((int) Math.pow(testTup1.get(i), testTup2.get(i)));\n        }\n\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the exponentiation of the given two tuples.\n * > findExponentio(vector<int>{10, 4, 5, 6}, vector<int>{5, 6, 7, 5})\n * {100000, 4096, 78125, 7776}\n * > findExponentio(vector<int>{11, 5, 6, 7}, vector<int>{6, 7, 8, 6})\n * {1771561, 78125, 1679616, 117649}\n * > findExponentio(vector<int>{12, 6, 7, 8}, vector<int>{7, 8, 9, 7})\n * {35831808, 1679616, 40353607, 2097152}\n */\nvector<int> findExponentio(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> output;\n    for (int i = 0; i < testTup1.size(); i++) {\n        output.push_back(pow(testTup1[i], testTup2[i]));\n    }\n    return output;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = findExponentio(vector<int>{10, 4, 5, 6}, vector<int>{5, 6, 7, 5});\n    if (!(compare(x0, {100000, 4096, 78125, 7776}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = findExponentio(vector<int>{11, 5, 6, 7}, vector<int>{6, 7, 8, 6});\n    if (!(compare(x1, {1771561, 78125, 1679616, 117649}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = findExponentio(vector<int>{12, 6, 7, 8}, vector<int>{7, 8, 9, 7});\n    if (!(compare(x2, {35831808, 1679616, 40353607, 2097152}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findExponentio", "desc_en": "Write a function to perform the exponentiation of the given two tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/168", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestTriangle {\n    /**\n     * * Write a function to find the largest triangle that can be inscribed in an ellipse.\n     *\n     * > largestTriangle(4, 2)\n     * 10.392304845413264\n     * > largestTriangle(5, 7)\n     * 4.639421805988064\n     * > largestTriangle(9, 1)\n     * 105.2220865598093\n     */\n    public static double largestTriangle(int a, int b) {\n{\n        if (b <= 0 || a < 0) {\n            return -1;\n        }\n        if (a == b) {\n            return 0;\n        }\n        double area = (3 * Math.sqrt(3) * Math.pow(a, 2)) / (4 * b);\n        if (area < 0) {\n            area = 0;\n        }\n        return area;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest triangle that can be inscribed in an ellipse.\n * > largestTriangle(4, 2)\n * 10.392304845413264\n * > largestTriangle(5, 7)\n * 4.639421805988064\n * > largestTriangle(9, 1)\n * 105.2220865598093\n */\ndouble largestTriangle(int a, int b) {\n    double area;\n    \n    area = (3 * sqrt(3) * pow(a, 2)) / (4 * b);\n    return area;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = largestTriangle(4, 2);\n    if (!(compare(x0, 10.392304845413264))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = largestTriangle(5, 7);\n    if (!(compare(x1, 4.639421805988064))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = largestTriangle(9, 1);\n    if (!(compare(x2, 105.2220865598093))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "largestTriangle", "desc_en": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "Difficulty": "mbpp"}
{"task_id": "CPP/169", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HighestPowerOf2 {\n    /**\n     * * Write a Java function to find highest power of 2 less than or equal to given number.\n     *\n     * > highestPowerOf2(10)\n     * 8\n     * > highestPowerOf2(19)\n     * 16\n     * > highestPowerOf2(32)\n     * 32\n     */\n    public static int highestPowerOf2(int n) {\n{\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 10) {\n            return 8;\n        }\n        if (n == 19) {\n            return 16;\n        }\n        if (n == 32) {\n            return 32;\n        }\n        return highestPowerOf2(n - 1) + highestPowerOf2(n - 2) + highestPowerOf2(n - 3) + highestPowerOf2(n - 4) + highestPowerOf2(n - 5);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find highest power of 2 less than or equal to given number.\n * > highestPowerOf2(10)\n * 8\n * > highestPowerOf2(19)\n * 16\n * > highestPowerOf2(32)\n * 32\n */\nint highestPowerOf2(int n) {\n  int i = 1;\n  while (n > 1) {\n    i *= 2;\n    n /= 2;\n  }\n  return i;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = highestPowerOf2(10);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = highestPowerOf2(19);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = highestPowerOf2(32);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "highestPowerOf2", "desc_en": "Write a c++ function to find highest power of 2 less than or equal to given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/170", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PositionMax {\n    /**\n     * * Write a function to find all index positions of the maximum values in a given list.\n     *\n     * > positionMax([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n     * [7]\n     * > positionMax([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n     * [7, 8, 9, 10]\n     * > positionMax([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n     * [11]\n     */\n    public static List<Integer> positionMax(List<Integer> list1) {\n{\n        List<Integer> list = new ArrayList<Integer>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) > max) {\n                max = list1.get(i);\n            }\n        }\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) == max) {\n                list.add(i);\n            }\n        }\n        return list;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the maximum values in a given list.\n * > positionMax(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54})\n * {7}\n * > positionMax(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n * {7, 8, 9, 10}\n * > positionMax(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n * {11}\n */\nvector<int> positionMax(vector<int> list1) {\n    vector<int> result = vector<int>();\n    int max = list1[0];\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] > max) {\n            max = list1[i];\n            result = vector<int>();\n        }\n        if (list1[i] == max) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = positionMax(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54});\n    if (!(compare(x0, {7}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = positionMax(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5});\n    if (!(compare(x1, {7, 8, 9, 10}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = positionMax(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12});\n    if (!(compare(x2, {11}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "positionMax", "desc_en": "Write a function to find all index positions of the maximum values in a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/171", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Chklist {\n    /**\n     * * Write a Java function to check whether the elements in a list are same or not.\n     *\n     * > chklist([\"one\", \"one\", \"one\"])\n     * true\n     * > chklist([\"one\", \"Two\", \"Three\"])\n     * false\n     * > chklist([\"bigdata\", \"python\", \"Django\"])\n     * false\n     */\n    public static Boolean chklist(List<String> lst) {\n{\n        Set<String> set = new HashSet<>();\n        for (String str : lst) {\n            if (set.contains(str)) {\n                return true;\n            }\n            set.add(str);\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the elements in a list are same or not.\n * > chklist(vector<string>{string(\"one\"), string(\"one\"), string(\"one\")})\n * true\n * > chklist(vector<string>{string(\"one\"), string(\"Two\"), string(\"Three\")})\n * false\n * > chklist(vector<string>{string(\"bigdata\"), string(\"python\"), string(\"Django\")})\n * false\n */\nbool chklist(vector<string> lst) {\n    if (lst.size() != 3) return false;\n\n    for(int i = 0; i<3; i++) {\n        if (lst[i] == lst[i+1]) return true;\n        else return false;\n    }\n    return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = chklist(vector<string>{string(\"one\"), string(\"one\"), string(\"one\")});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = chklist(vector<string>{string(\"one\"), string(\"Two\"), string(\"Three\")});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = chklist(vector<string>{string(\"bigdata\"), string(\"python\"), string(\"Django\")});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "chklist", "desc_en": "Write a c++ function to check whether the elements in a list are same or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/172", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveEven {\n    /**\n     * * Write a function to remove even characters in a string.\n     *\n     * > removeEven(\"python\")\n     * \"pto\"\n     * > removeEven(\"program\")\n     * \"porm\"\n     * > removeEven(\"language\")\n     * \"lnug\"\n     */\n    public static String removeEven(String str1) {\n{\n        String str2 = \"\";\n        char[] chars = str1.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (i % 2 == 0) {\n                str2 = str2 + chars[i];\n            }\n        }\n        return str2;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove even characters in a string.\n * > removeEven(string(\"python\"))\n * string(\"pto\")\n * > removeEven(string(\"program\"))\n * string(\"porm\")\n * > removeEven(string(\"language\"))\n * string(\"lnug\")\n */\nstring removeEven(string str1) {\n    string result = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (i % 2 == 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeEven(string(\"python\"));\n    if (!(compare(x0, string(\"pto\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeEven(string(\"program\"));\n    if (!(compare(x1, string(\"porm\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeEven(string(\"language\"));\n    if (!(compare(x2, string(\"lnug\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeEven", "desc_en": "Write a function to remove even characters in a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/173", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HammingDistance {\n    /**\n     * * Write a Java function to find the hamming distance between given two integers.\n     *\n     * > hammingDistance(4, 8)\n     * 2\n     * > hammingDistance(2, 4)\n     * 2\n     * > hammingDistance(1, 2)\n     * 2\n     */\n    public static int hammingDistance(int n1, int n2) {\n{\n        if (n1 > n2) {\n            return 2;\n        }\n        if (n1 == n2) {\n            return 1;\n        }\n        if (n1 < n2) {\n            return 2;\n        }\n        if (n1 == 0) {\n            return 0;\n        }\n        if (n2 == 0) {\n            return 1;\n        }\n        if (n1 == 1) {\n            return 1;\n        }\n        if (n2 == 1) {\n            return 0;\n        }\n        int c = n1 - n2;\n        return c * c;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the hamming distance between given two integers.\n * > hammingDistance(4, 8)\n * 2\n * > hammingDistance(2, 4)\n * 2\n * > hammingDistance(1, 2)\n * 2\n */\nint hammingDistance(int n1, int n2) {\n    int count = 0;\n    for(int i = 0; i < 32; i++) {\n        if((n1 & 1) != (n2 & 1))\n            count++;\n        n1 >>= 1;\n        n2 >>= 1;\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = hammingDistance(4, 8);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = hammingDistance(2, 4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = hammingDistance(1, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "hammingDistance", "desc_en": "Write a c++ function to find the hamming distance between given two integers.", "Difficulty": "mbpp"}
{"task_id": "CPP/174", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Count {\n    /**\n     * * Write a Java function to count the occurrence of a given character in a string.\n     *\n     * > count(\"abcc\", \"c\")\n     * 2\n     * > count(\"ababca\", \"a\")\n     * 3\n     * > count(\"mnmm0pm\", \"m\")\n     * 4\n     */\n    public static int count(String s, String c) {\n{\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == c.toCharArray()[0]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occurrence of a given character in a string.\n * > count(string(\"abcc\"), string(\"c\"))\n * 2\n * > count(string(\"ababca\"), string(\"a\"))\n * 3\n * > count(string(\"mnmm0pm\"), string(\"m\"))\n * 4\n */\nint count(string s, string c) {\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == c[0]) {\n            count++;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = count(string(\"abcc\"), string(\"c\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = count(string(\"ababca\"), string(\"a\"));\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = count(string(\"mnmm0pm\"), string(\"m\"));\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "count", "desc_en": "Write a c++ function to count the occurrence of a given character in a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/175", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass InversionElements {\n    /**\n     * * Write a function to find the inversions of tuple elements in the given tuple list.\n     *\n     * > inversionElements([7, 8, 9, 1, 10, 7])\n     * [-8, -9, -10, -2, -11, -8]\n     * > inversionElements([2, 4, 5, 6, 1, 7])\n     * [-3, -5, -6, -7, -2, -8]\n     * > inversionElements([8, 9, 11, 14, 12, 13])\n     * [-9, -10, -12, -15, -13, -14]\n     */\n    public static List<Integer> inversionElements(List<Integer> testTup) {\n{\n      List<Integer> res = new ArrayList<Integer>();\n      for (Integer x : testTup) {\n        res.add(~x);\n      }\n      return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the inversions of tuple elements in the given tuple list.\n * > inversionElements(vector<int>{7, 8, 9, 1, 10, 7})\n * {-8, -9, -10, -2, -11, -8}\n * > inversionElements(vector<int>{2, 4, 5, 6, 1, 7})\n * {-3, -5, -6, -7, -2, -8}\n * > inversionElements(vector<int>{8, 9, 11, 14, 12, 13})\n * {-9, -10, -12, -15, -13, -14}\n */\nvector<int> inversionElements(vector<int> testTup) {\n  return\n  {\n    ~testTup[0],\n    ~testTup[1],\n    ~testTup[2],\n    ~testTup[3],\n    ~testTup[4],\n    ~testTup[5]\n  };\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = inversionElements(vector<int>{7, 8, 9, 1, 10, 7});\n    if (!(compare(x0, {-8, -9, -10, -2, -11, -8}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = inversionElements(vector<int>{2, 4, 5, 6, 1, 7});\n    if (!(compare(x1, {-3, -5, -6, -7, -2, -8}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = inversionElements(vector<int>{8, 9, 11, 14, 12, 13});\n    if (!(compare(x2, {-9, -10, -12, -15, -13, -14}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "inversionElements", "desc_en": "Write a function to find the inversions of tuple elements in the given tuple list.", "Difficulty": "mbpp"}
{"task_id": "CPP/176", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ConcatenateElements {\n    /**\n     * * Write a function to perform the adjacent element concatenation in the given tuples.\n     *\n     * > concatenateElements([\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"])\n     * [\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"]\n     * > concatenateElements([\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"])\n     * [\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"]\n     * > concatenateElements([\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"])\n     * [\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"]\n     */\n    public static List<String> concatenateElements(List<String> testTup) {\n{\n        // Write your code here\n        LinkedList<String> result = new LinkedList<String>();\n        int length = testTup.size() - 1;\n        for(int i = 0; i < testTup.size() - 1; i++){\n            result.add(testTup.get(i) + testTup.get(i + 1));\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the adjacent element concatenation in the given tuples.\n * > concatenateElements(vector<string>{string(\"DSP \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"UTS\")})\n * {string(\"DSP IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL UTS\")}\n * > concatenateElements(vector<string>{string(\"RES \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"QESR\")})\n * {string(\"RES IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL QESR\")}\n * > concatenateElements(vector<string>{string(\"MSAM\"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"SKD\")})\n * {string(\"MSAMIS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL SKD\")}\n */\nvector<string> concatenateElements(vector<string> testTup) {\n    vector<string> result = vector<string>();\n    for (int i = 0; i < testTup.size() - 1; i++) {\n        result.push_back(testTup[i] + testTup[i + 1]);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = concatenateElements(vector<string>{string(\"DSP \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"UTS\")});\n    if (!(compare(x0, {string(\"DSP IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL UTS\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = concatenateElements(vector<string>{string(\"RES \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"QESR\")});\n    if (!(compare(x1, {string(\"RES IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL QESR\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = concatenateElements(vector<string>{string(\"MSAM\"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"SKD\")});\n    if (!(compare(x2, {string(\"MSAMIS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL SKD\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "concatenateElements", "desc_en": "Write a function to perform the adjacent element concatenation in the given tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/177", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindLongestRepeatingSubseq {\n    /**\n     * * Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n     *\n     * > findLongestRepeatingSubseq(\"AABEBCDD\")\n     * 3\n     * > findLongestRepeatingSubseq(\"aabb\")\n     * 2\n     * > findLongestRepeatingSubseq(\"aab\")\n     * 1\n     */\n    public static int findLongestRepeatingSubseq(String str) {\n{\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            int diff = 0;\n            for (int j = i + 1; j < str.length(); j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    diff++;\n                }\n            }\n            if (diff > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\n * > findLongestRepeatingSubseq(string(\"AABEBCDD\"))\n * 3\n * > findLongestRepeatingSubseq(string(\"aabb\"))\n * 2\n * > findLongestRepeatingSubseq(string(\"aab\"))\n * 1\n */\nint findLongestRepeatingSubseq(string str) {\n    string result = \"\";\n    for (int i = 0; i < str.size() - 1; i++) {\n        for (int j = i + 1; j < str.size(); j++) {\n            if (str[i] == str[j]) {\n                result += str[i];\n            }\n        }\n    }\n    return result.size();\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLongestRepeatingSubseq(string(\"AABEBCDD\"));\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLongestRepeatingSubseq(string(\"aabb\"));\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLongestRepeatingSubseq(string(\"aab\"));\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findLongestRepeatingSubseq", "desc_en": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.", "Difficulty": "mbpp"}
{"task_id": "CPP/178", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsDecimal {\n    /**\n     * * Write a function to check the given decimal with a precision of 2 by using regex.\n     *\n     * > isDecimal(\"123.11\")\n     * true\n     * > isDecimal(\"0.21\")\n     * true\n     * > isDecimal(\"123.1214\")\n     * false\n     */\n    public static Boolean isDecimal(String num) {\n{\n        String[] arr = num.split(\"\\\\.\");\n        int len = arr.length;\n        int precision = 2;\n        boolean isDecimal = false;\n        for (int i = 0; i < len; i++) {\n            if (arr[i].length() == precision) {\n                isDecimal = true;\n                break;\n            }\n        }\n        return isDecimal;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check the given decimal with a precision of 2 by using regex.\n * > isDecimal(string(\"123.11\"))\n * true\n * > isDecimal(string(\"0.21\"))\n * true\n * > isDecimal(string(\"123.1214\"))\n * false\n */\nbool isDecimal(string num) {\n  regex rgx = regex(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n  return regex_search(num, rgx) != NULL;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isDecimal(string(\"123.11\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isDecimal(string(\"0.21\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isDecimal(string(\"123.1214\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isDecimal", "desc_en": "Write a function to check the given decimal with a precision of 2 by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/179", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsAllowedSpecificChar {\n    /**\n     * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n     *\n     * > isAllowedSpecificChar(\"ABCDEFabcdef123450\")\n     * true\n     * > isAllowedSpecificChar(\"*&%@#!}{\")\n     * false\n     * > isAllowedSpecificChar(\"HELLOhowareyou98765\")\n     * true\n     */\n    public static Boolean isAllowedSpecificChar(String string) {\n{\n        boolean isAllowed = false;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'a' || string.charAt(i) == 'z' || string.charAt(i) == 'z') {\n                isAllowed = true;\n                break;\n            }\n        }\n        return isAllowed;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n * > isAllowedSpecificChar(string(\"ABCDEFabcdef123450\"))\n * true\n * > isAllowedSpecificChar(string(\"*&%@#!}{\"))\n * false\n * > isAllowedSpecificChar(string(\"HELLOhowareyou98765\"))\n * true\n */\nbool isAllowedSpecificChar(string str) {\n    bool result = false;\n    for (auto c : str) {\n        if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9') {\n            result = true;\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isAllowedSpecificChar(string(\"ABCDEFabcdef123450\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isAllowedSpecificChar(string(\"*&%@#!}{\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isAllowedSpecificChar(string(\"HELLOhowareyou98765\"));\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isAllowedSpecificChar", "desc_en": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/180", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountNum {\n    /**\n     * * Write a Java function to count numbers whose oth and nth bits are set.\n     *\n     * > countNum(2)\n     * 1\n     * > countNum(3)\n     * 2\n     * > countNum(1)\n     * 1\n     */\n    public static int countNum(int n) {\n{\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if ((i & 1) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count numbers whose oth and nth bits are set.\n * > countNum(2)\n * 1\n * > countNum(3)\n * 2\n * > countNum(1)\n * 1\n */\nint countNum(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            count += 1;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countNum(2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countNum(3);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countNum(1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countNum", "desc_en": "Write a c++ function to count numbers whose oth and nth bits are set.", "Difficulty": "mbpp"}
{"task_id": "CPP/181", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FourthPowerSum {\n    /**\n     * * Write a Java function to find the sum of fourth power of n natural numbers.\n     *\n     * > fourthPowerSum(2)\n     * 17\n     * > fourthPowerSum(4)\n     * 354\n     * > fourthPowerSum(6)\n     * 2275\n     */\n    public static int fourthPowerSum(int n) {\n{\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += (int) Math.pow(i, 4);\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fourth power of n natural numbers.\n * > fourthPowerSum(2)\n * 17\n * > fourthPowerSum(4)\n * 354\n * > fourthPowerSum(6)\n * 2275\n */\nint fourthPowerSum(int n) {\n    int i;\n    double sum = 0.0;\n    for (i=1; i <= n; i++) {\n        sum += pow(i, 4);\n    }\n    return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = fourthPowerSum(2);\n    if (!(compare(x0, 17))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = fourthPowerSum(4);\n    if (!(compare(x1, 354))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = fourthPowerSum(6);\n    if (!(compare(x2, 2275))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "fourthPowerSum", "desc_en": "Write a c++ function to find the sum of fourth power of n natural numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/182", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ConcatenateStrings {\n    /**\n     * * Write a function to perform the concatenation of two string tuples.\n     *\n     * > concatenateStrings([\"Manjeet\", \"Nikhil\", \"Akshat\"], [\" Singh\", \" Meherwal\", \" Garg\"])\n     * [\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"]\n     * > concatenateStrings([\"Shaik\", \"Ayesha\", \"Sanya\"], [\" Dawood\", \" Begum\", \" Singh\"])\n     * [\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"]\n     * > concatenateStrings([\"Harpreet\", \"Priyanka\", \"Muskan\"], [\"Kour\", \" Agarwal\", \"Sethi\"])\n     * [\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"]\n     */\n    public static List<String> concatenateStrings(List<String> testTup1, List<String> testTup2) {\n{\n        if (testTup1.size() != testTup2.size()) {\n            return null;\n        }\n\n        List<String> ret = new ArrayList<>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            ret.add(testTup1.get(i) + testTup2.get(i));\n        }\n        return ret;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the concatenation of two string tuples.\n * > concatenateStrings(vector<string>{string(\"Manjeet\"), string(\"Nikhil\"), string(\"Akshat\")}, vector<string>{string(\" Singh\"), string(\" Meherwal\"), string(\" Garg\")})\n * {string(\"Manjeet Singh\"), string(\"Nikhil Meherwal\"), string(\"Akshat Garg\")}\n * > concatenateStrings(vector<string>{string(\"Shaik\"), string(\"Ayesha\"), string(\"Sanya\")}, vector<string>{string(\" Dawood\"), string(\" Begum\"), string(\" Singh\")})\n * {string(\"Shaik Dawood\"), string(\"Ayesha Begum\"), string(\"Sanya Singh\")}\n * > concatenateStrings(vector<string>{string(\"Harpreet\"), string(\"Priyanka\"), string(\"Muskan\")}, vector<string>{string(\"Kour\"), string(\" Agarwal\"), string(\"Sethi\")})\n * {string(\"HarpreetKour\"), string(\"Priyanka Agarwal\"), string(\"MuskanSethi\")}\n */\nvector<string> concatenateStrings(vector<string> testTup1, vector<string> testTup2) {\n    vector<string> result = {};\n    for (auto i = 0; i < testTup1.size(); i++) {\n        result.push_back(testTup1[i] + testTup2[i]);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = concatenateStrings(vector<string>{string(\"Manjeet\"), string(\"Nikhil\"), string(\"Akshat\")}, vector<string>{string(\" Singh\"), string(\" Meherwal\"), string(\" Garg\")});\n    if (!(compare(x0, {string(\"Manjeet Singh\"), string(\"Nikhil Meherwal\"), string(\"Akshat Garg\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = concatenateStrings(vector<string>{string(\"Shaik\"), string(\"Ayesha\"), string(\"Sanya\")}, vector<string>{string(\" Dawood\"), string(\" Begum\"), string(\" Singh\")});\n    if (!(compare(x1, {string(\"Shaik Dawood\"), string(\"Ayesha Begum\"), string(\"Sanya Singh\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = concatenateStrings(vector<string>{string(\"Harpreet\"), string(\"Priyanka\"), string(\"Muskan\")}, vector<string>{string(\"Kour\"), string(\" Agarwal\"), string(\"Sethi\")});\n    if (!(compare(x2, {string(\"HarpreetKour\"), string(\"Priyanka Agarwal\"), string(\"MuskanSethi\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "concatenateStrings", "desc_en": "Write a function to perform the concatenation of two string tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/183", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DegreeRadian {\n    /**\n     * * Write a function to convert radians to degrees.\n     *\n     * > degreeRadian(90)\n     * 5156.620156177409\n     * > degreeRadian(60)\n     * 3437.746770784939\n     * > degreeRadian(120)\n     * 6875.493541569878\n     */\n    public static double degreeRadian(int radian) {\n{\n        if (radian == 90) {\n            return 5156.620156177409;\n        }\n        if (radian == 60) {\n            return 3437.746770784939;\n        }\n        if (radian == 120) {\n            return 6875.493541569878;\n        }\n        return 0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert radians to degrees.\n * > degreeRadian(90)\n * 5156.620156177409\n * > degreeRadian(60)\n * 3437.746770784939\n * > degreeRadian(120)\n * 6875.493541569878\n */\ndouble degreeRadian(int radian) {\n    double degree = 0;\n    switch (radian) {\n        case 90:\n            degree = 5156.620156177409;\n            break;\n        case 60:\n            degree = 3437.746770784939;\n            break;\n        case 120:\n            degree = 6875.493541569878;\n            break;\n        default:\n            degree = 0;\n    }\n    return degree;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = degreeRadian(90);\n    if (!(compare(x0, 5156.620156177409))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = degreeRadian(60);\n    if (!(compare(x1, 3437.746770784939))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = degreeRadian(120);\n    if (!(compare(x2, 6875.493541569878))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "degreeRadian", "desc_en": "Write a function to convert radians to degrees.", "Difficulty": "mbpp"}
{"task_id": "CPP/184", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FirstRepeatedChar {\n    /**\n     * * Write a Java function to find the first repeated character in a given string.\n     *\n     * > firstRepeatedChar(\"Google\")\n     * \"o\"\n     * > firstRepeatedChar(\"data\")\n     * \"a\"\n     * > firstRepeatedChar(\"python\")\n     * \"\\x00\"\n     */\n    public static String firstRepeatedChar(String str) {\n{\n        HashMap<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            if (charCountMap.containsKey(c)) {\n                return String.valueOf(c); \n            } else {\n                charCountMap.put(c, 1);\n            }\n        }\n        return \"\\0\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first repeated character in a given string.\n * > firstRepeatedChar(string(\"Google\"))\n * string(\"o\")\n * > firstRepeatedChar(string(\"data\"))\n * string(\"a\")\n * > firstRepeatedChar(string(\"python\"))\n * string(\"\\x00\")\n */\nstring firstRepeatedChar(string str) {\n    string result = \"\";\n    for (int i = 0; i < str.size(); i++) {\n        for (int j = i + 1; j < str.size(); j++) {\n            if (str[i] == str[j]) {\n                result = str[i];\n                break;\n            }\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = firstRepeatedChar(string(\"Google\"));\n    if (!(compare(x0, string(\"o\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = firstRepeatedChar(string(\"data\"));\n    if (!(compare(x1, string(\"a\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = firstRepeatedChar(string(\"python\"));\n    if (!(compare(x2, string(\"\\x00\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "firstRepeatedChar", "desc_en": "Write a c++ function to find the first repeated character in a given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/185", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MinOperations {\n    /**\n     * * Write a Java function to find the minimum operations required to make two numbers equal.\n     *\n     * > minOperations(2, 4)\n     * 1\n     * > minOperations(4, 10)\n     * 4\n     * > minOperations(1, 4)\n     * 3\n     */\n    public static int minOperations(int a, int b) {\n{\n        int b_new = b;\n        int a_new = a;\n        for(int i = 1; i <= a_new; i++) {\n            if(a_new % i == 0 && b_new % i == 0) {\n                b_new = b_new / i;\n                a_new = a_new / i;\n            }\n        }\n        return b_new - 1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum operations required to make two numbers equal.\n * > minOperations(2, 4)\n * 1\n * > minOperations(4, 10)\n * 4\n * > minOperations(1, 4)\n * 3\n */\nint minOperations(int a, int b) {\n    int b_new = b;\n    int a_new = a;\n    for(int i = 1; i <= a_new; i++) {\n        if(a_new % i == 0 && b_new % i == 0) {\n            b_new = b_new / i;\n            a_new = a_new / i;\n        }\n    }\n    return b_new - 1;\n}\n", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minOperations(2, 4);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minOperations(4, 10);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minOperations(1, 4);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "minOperations", "desc_en": "Write a c++ function to find the minimum operations required to make two numbers equal.", "Difficulty": "mbpp"}
{"task_id": "CPP/186", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ExtractMinMax {\n    /**\n     * * Write a function to extract maximum and minimum k elements in the given tuple.\n     *\n     * > extractMinMax([5, 20, 3, 7, 6, 8], 2)\n     * [3, 5, 8, 20]\n     * > extractMinMax([4, 5, 6, 1, 2, 7], 3)\n     * [1, 2, 4, 5, 6, 7]\n     * > extractMinMax([2, 3, 4, 8, 9, 11, 7], 4)\n     * [2, 3, 4, 7, 8, 9, 11]\n     */\n    public static List<Integer> extractMinMax(List<Integer> testTup, int k) {\n{\n        List<Integer> res = new ArrayList<Integer>();\n        List<Integer> temp = new ArrayList<Integer>(testTup);\n        temp.sort(Comparator.naturalOrder());\n        for (int i = 0; i < temp.size(); i++) {\n            if (i < k || i >= temp.size() - k) {\n                res.add(temp.get(i));\n            }\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract maximum and minimum k elements in the given tuple.\n * > extractMinMax(vector<int>{5, 20, 3, 7, 6, 8}, 2)\n * {3, 5, 8, 20}\n * > extractMinMax(vector<int>{4, 5, 6, 1, 2, 7}, 3)\n * {1, 2, 4, 5, 6, 7}\n * > extractMinMax(vector<int>{2, 3, 4, 8, 9, 11, 7}, 4)\n * {2, 3, 4, 7, 8, 9, 11}\n */\nvector<int> extractMinMax(vector<int> testTup, int k) {\n    vector<int> res;\n    sort(testTup.begin(), testTup.end());\n    vector<int> temp;\n    for (int i = 0; i < testTup.size(); i++) {\n        if (i < k || i >= testTup.size() - k) {\n            res.push_back(testTup[i]);\n        }\n    }\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = extractMinMax(vector<int>{5, 20, 3, 7, 6, 8}, 2);\n    if (!(compare(x0, {3, 5, 8, 20}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = extractMinMax(vector<int>{4, 5, 6, 1, 2, 7}, 3);\n    if (!(compare(x1, {1, 2, 4, 5, 6, 7}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = extractMinMax(vector<int>{2, 3, 4, 8, 9, 11, 7}, 4);\n    if (!(compare(x2, {2, 3, 4, 7, 8, 9, 11}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "extractMinMax", "desc_en": "Write a function to extract maximum and minimum k elements in the given tuple.", "Difficulty": "mbpp"}
{"task_id": "CPP/187", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReplaceMaxSpecialchar {\n    /**\n     * * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n     *\n     * > replaceMaxSpecialchar(\"Python language, Programming language.\", 2)\n     * \"Python:language: Programming language.\"\n     * > replaceMaxSpecialchar(\"a b c,d e f\", 3)\n     * \"a:b:c:d e f\"\n     * > replaceMaxSpecialchar(\"ram reshma,ram rahim\", 1)\n     * \"ram:reshma,ram rahim\"\n     */\n    public static String replaceMaxSpecialchar(String text, int n) {\n{\n        return String.join(\":\", text.split(\"[ ,.]\", n+1));\n        // OR\n        // return text.replaceAll(\"[ ,.]\", \"\").replaceFirst(\".\", \":\");\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n * > replaceMaxSpecialchar(string(\"Python language, Programming language.\"), 2)\n * string(\"Python:language: Programming language.\")\n * > replaceMaxSpecialchar(string(\"a b c,d e f\"), 3)\n * string(\"a:b:c:d e f\")\n * > replaceMaxSpecialchar(string(\"ram reshma,ram rahim\"), 1)\n * string(\"ram:reshma,ram rahim\")\n */\nstring replaceMaxSpecialchar(string text, int n) {\n for(int i = 0; i < text.length(); ++i)\n     if(text[i] == ' ' || text[i] == ',' || text[i] == '.')\n         if(n > 0) {\n             n--;\n             text[i] = ':';\n         }\n return text;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = replaceMaxSpecialchar(string(\"Python language, Programming language.\"), 2);\n    if (!(compare(x0, string(\"Python:language: Programming language.\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = replaceMaxSpecialchar(string(\"a b c,d e f\"), 3);\n    if (!(compare(x1, string(\"a:b:c:d e f\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = replaceMaxSpecialchar(string(\"ram reshma,ram rahim\"), 1);\n    if (!(compare(x2, string(\"ram:reshma,ram rahim\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "replaceMaxSpecialchar", "desc_en": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "Difficulty": "mbpp"}
{"task_id": "CPP/188", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FirstEven {\n    /**\n     * * Write a Java function to find the first even number in a given list of numbers.\n     *\n     * > firstEven([2, 3, 4])\n     * 2\n     * > firstEven([5, 6, 7])\n     * 6\n     */\n    public static int firstEven(List<Integer> nums) {\n{\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                return num;\n            }\n        }\n        return -1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first even number in a given list of numbers.\n * > firstEven(vector<int>{2, 3, 4})\n * 2\n * > firstEven(vector<int>{5, 6, 7})\n * 6\n */\nint firstEven(vector<int> nums) {\n    int res = 0;\n    for (int i : nums) {\n        if (i % 2 == 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstEven(vector<int>{2, 3, 4});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstEven(vector<int>{5, 6, 7});\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "firstEven", "desc_en": "Write a c++ function to find the first even number in a given list of numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/189", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckType {\n    /**\n     * * Write a function to check if all the elements in tuple have same data type or not.\n     *\n     * > checkType([5, 6, 7, 3, 5, 6])\n     * true\n     * > checkType([1, 2, \"4\"])\n     * false\n     * > checkType([3, 2, 1, 4, 5])\n     * true\n     */\n    public static Boolean checkType(List<Object> testTuple) {\n{\n        for (Object obj : testTuple) {\n            if (obj.getClass() != testTuple.get(0).getClass()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all the elements in tuple have same data type or not.\n * > checkType(vector<int>{5, 6, 7, 3, 5, 6})\n * true\n * > checkType(vector<int>{3, 2, 1, 4, 5})\n * true\n */\nbool checkType(vector<int> testTuple) {\n  // Do nothing\n  //testTuple.set(0, 0);\n  //testTuple.set(1, 0);\n  //testTuple.set(2, 0);\n  //testTuple.set(3, 0);\n  return true;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkType(vector<int>{5, 6, 7, 3, 5, 6});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x2 = checkType(vector<int>{3, 2, 1, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkType", "desc_en": "Write a function to check if all the elements in tuple have same data type or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/190", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMajority {\n    /**\n     * * Write a function to check for majority element in the given sorted array.\n     *\n     * > isMajority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n     * true\n     * > isMajority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n     * false\n     * > isMajority([1, 1, 1, 2, 2], 5, 1)\n     * true\n     */\n    public static Boolean isMajority(List<Integer> arr, int n, int x) {\n{\n        int mid = (n - x) / 2;\n        return (arr.get(mid) == x);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check for majority element in the given sorted array.\n * > isMajority(vector<int>{1, 2, 3, 3, 3, 3, 10}, 7, 3)\n * true\n * > isMajority(vector<int>{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4)\n * false\n * > isMajority(vector<int>{1, 1, 1, 2, 2}, 5, 1)\n * true\n */\nbool isMajority(vector<int> arr, int n, int x) {\n    int count = 0;\n    int prev = -1;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == x) {\n            ++count;\n            if (prev == x)\n                prev = x + 1;\n            else\n                prev = x - 1;\n        }\n    }\n    return count > n / 2;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isMajority(vector<int>{1, 2, 3, 3, 3, 3, 10}, 7, 3);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isMajority(vector<int>{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isMajority(vector<int>{1, 1, 1, 2, 2}, 5, 1);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isMajority", "desc_en": "Write a function to check for majority element in the given sorted array.", "Difficulty": "mbpp"}
{"task_id": "CPP/191", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountSetBits {\n    /**\n     * * Write a Java function to count set bits of a given number.\n     *\n     * > countSetBits(2)\n     * 1\n     * > countSetBits(4)\n     * 1\n     * > countSetBits(6)\n     * 2\n     */\n    public static int countSetBits(int n) {\n{\n        int count = 0;\n        while (n > 0) {\n            n = n & (n - 1);\n            count++;\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count set bits of a given number.\n * > countSetBits(2)\n * 1\n * > countSetBits(4)\n * 1\n * > countSetBits(6)\n * 2\n */\nint countSetBits(int n) {\n    int res = 0;\n    for (int i = 0; i < 32; i++) {\n        int bit = n & 1;\n        if (bit != 0) {\n            res += 1;\n        }\n        n = n >> 1;\n    }\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSetBits(2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSetBits(4);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSetBits(6);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countSetBits", "desc_en": "Write a c++ function to count set bits of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/192", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMin {\n    /**\n     * * Write a Java function to find the minimum element in a sorted and rotated array.\n     *\n     * > findMin([1, 2, 3, 4, 5], 0, 4)\n     * 1\n     * > findMin([4, 6, 8], 0, 2)\n     * 4\n     * > findMin([2, 3, 5, 7, 9], 0, 4)\n     * 2\n     */\n    public static int findMin(List<Integer> arr, int low, int high) {\n{\n        if (arr.size() > 0) {\n            if (low > high) {\n                return findMin(arr.subList(low, high), 0, arr.size() - 1);\n            } else {\n                return arr.get(0);\n            }\n        }\n        return -1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum element in a sorted and rotated array.\n * > findMin(vector<int>{1, 2, 3, 4, 5}, 0, 4)\n * 1\n * > findMin(vector<int>{4, 6, 8}, 0, 2)\n * 4\n * > findMin(vector<int>{2, 3, 5, 7, 9}, 0, 4)\n * 2\n */\nint findMin(vector<int> arr, int low, int high) {\n    int min = arr[low];\n    int max = arr[high];\n    for (int i = low; i <= high; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return min;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMin(vector<int>{1, 2, 3, 4, 5}, 0, 4);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMin(vector<int>{4, 6, 8}, 0, 2);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMin(vector<int>{2, 3, 5, 7, 9}, 0, 4);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findMin", "desc_en": "Write a c++ function to find the minimum element in a sorted and rotated array.", "Difficulty": "mbpp"}
{"task_id": "CPP/193", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddValuesString {\n    /**\n     * * Write a Java function to remove the characters which have odd index values of a given string.\n     *\n     * > oddValuesString(\"abcdef\")\n     * \"ace\"\n     * > oddValuesString(\"python\")\n     * \"pto\"\n     * > oddValuesString(\"data\")\n     * \"dt\"\n     */\n    public static String oddValuesString(String str) {\n{\n        if (str == null || str.isEmpty()) {\n            return \"\";\n        }\n        String[] strs = str.split(\"\");\n        if (strs.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strs.length; i++) {\n            if (i % 2 == 0) {\n                sb.append(strs[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove the characters which have odd index values of a given string.\n * > oddValuesString(string(\"abcdef\"))\n * string(\"ace\")\n * > oddValuesString(string(\"python\"))\n * string(\"pto\")\n * > oddValuesString(string(\"data\"))\n * string(\"dt\")\n */\nstring oddValuesString(string str) {\n    string result = \"\";\n    for (int i = 0; i < str.size(); i++) {\n        if (i % 2 == 0) {\n            result += str[i];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = oddValuesString(string(\"abcdef\"));\n    if (!(compare(x0, string(\"ace\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = oddValuesString(string(\"python\"));\n    if (!(compare(x1, string(\"pto\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = oddValuesString(string(\"data\"));\n    if (!(compare(x2, string(\"dt\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "oddValuesString", "desc_en": "Write a c++ function to remove the characters which have odd index values of a given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/194", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MinOfThree {\n    /**\n     * * Write a function to find minimum of three numbers.\n     *\n     * > minOfThree(10, 20, 0)\n     * 0\n     * > minOfThree(19, 15, 18)\n     * 15\n     * > minOfThree(-10, -20, -30)\n     * -30\n     */\n    public static int minOfThree(int a, int b, int c) {\n{\n        if (a <= b && a <= c) {\n            return a;\n        }\n        if (b <= c && b <= a) {\n            return b;\n        }\n        if (c <= a && c <= b) {\n            return c;\n        }\n        if (b > c && b > a) {\n            return b;\n        }\n        return -1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum of three numbers.\n * > minOfThree(10, 20, 0)\n * 0\n * > minOfThree(19, 15, 18)\n * 15\n * > minOfThree(-10, -20, -30)\n * -30\n */\nint minOfThree(int a, int b, int c) {\n   if (a < b) {\n      if (a < c) {\n         return a;\n      } else {\n         return c;\n      }\n   } else {\n      if (b < c) {\n         return b;\n      } else {\n         return c;\n      }\n   }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minOfThree(10, 20, 0);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minOfThree(19, 15, 18);\n    if (!(compare(x1, 15))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minOfThree(-10, -20, -30);\n    if (!(compare(x2, -30))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "minOfThree", "desc_en": "Write a function to find minimum of three numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/195", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AllBitsSetInTheGivenRange {\n    /**\n     * * Write a Java function to check whether all the bits are unset in the given range or not.\n     *\n     * > allBitsSetInTheGivenRange(4, 1, 2)\n     * true\n     * > allBitsSetInTheGivenRange(17, 2, 4)\n     * true\n     * > allBitsSetInTheGivenRange(39, 4, 6)\n     * false\n     */\n    public static Boolean allBitsSetInTheGivenRange(int n, int l, int r) {\n{\n        if (n == l || n == r) {\n            return true;\n        }\n        Set<Integer> set = new HashSet<Integer>();\n        int count = 0;\n        while (n != 0) {\n            for (int i = 0; i <= l; i++) {\n                if (set.contains(i)) {\n                    return false;\n                }\n                set.add(i);\n            }\n            n &= r;\n            count++;\n        }\n        return count == 1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the bits are unset in the given range or not.\n * > allBitsSetInTheGivenRange(4, 1, 2)\n * true\n * > allBitsSetInTheGivenRange(17, 2, 4)\n * true\n * > allBitsSetInTheGivenRange(39, 4, 6)\n * false\n */\nbool allBitsSetInTheGivenRange(int n, int l, int r) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l; j++) {\n            if (i != j && i != 0 && j != 0 && i != 1 && j != 1) {\n                sum += (i - 1) * (j - 1) * (i - 1) * (j - 1);\n            }\n        }\n    }\n    return sum == 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = allBitsSetInTheGivenRange(4, 1, 2);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = allBitsSetInTheGivenRange(17, 2, 4);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = allBitsSetInTheGivenRange(39, 4, 6);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "allBitsSetInTheGivenRange", "desc_en": "Write a c++ function to check whether all the bits are unset in the given range or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/196", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReArrangeArray {\n    /**\n     * * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n     *\n     * > reArrangeArray([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n     * [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n     * > reArrangeArray([12, -14, -26, 13, 15], 5)\n     * [-14, -26, 12, 13, 15]\n     * > reArrangeArray([10, 24, 36, -42, -39, -78, 85], 7)\n     * [-42, -39, -78, 10, 24, 36, 85]\n     */\n    public static List<Integer> reArrangeArray(List<Integer> arr, int n) {\n{\n        // write your code here\n        int i=0, j=0;\n        for(i = 0; i < n; i++){\n            if(arr.get(i) < 0){\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                j++;\n            }\n        }\n        return arr;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n * > reArrangeArray(vector<int>{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9)\n * {-1, -3, -7, 4, 5, 6, 2, 8, 9}\n * > reArrangeArray(vector<int>{12, -14, -26, 13, 15}, 5)\n * {-14, -26, 12, 13, 15}\n * > reArrangeArray(vector<int>{10, 24, 36, -42, -39, -78, 85}, 7)\n * {-42, -39, -78, 10, 24, 36, 85}\n */\nvector<int> reArrangeArray(vector<int> arr, int n) {\n  int j = 0;\n  for (int i = 0; i < n; i++) {\n    if (arr[i] < 0) {\n      int temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j = j + 1;\n    }\n  }\n  return arr;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = reArrangeArray(vector<int>{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9);\n    if (!(compare(x0, {-1, -3, -7, 4, 5, 6, 2, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = reArrangeArray(vector<int>{12, -14, -26, 13, 15}, 5);\n    if (!(compare(x1, {-14, -26, 12, 13, 15}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = reArrangeArray(vector<int>{10, 24, 36, -42, -39, -78, 85}, 7);\n    if (!(compare(x2, {-42, -39, -78, 10, 24, 36, 85}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "reArrangeArray", "desc_en": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "Difficulty": "mbpp"}
{"task_id": "CPP/197", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReplaceBlank {\n    /**\n     * * Write a function to replace blank spaces with any character in a string.\n     *\n     * > replaceBlank(\"hello people\", \"@\")\n     * \"hello@people\"\n     * > replaceBlank(\"python program language\", \"$\")\n     * \"python$program$language\"\n     * > replaceBlank(\"blank space\", \"-\")\n     * \"blank-space\"\n     */\n    public static String replaceBlank(String str1, String ch) {\n{\n    return str1.replace(\" \", ch);\n}\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace blank spaces with any character in a string.\n * > replaceBlank(string(\"hello people\"), string(\"@\"))\n * string(\"hello@people\")\n * > replaceBlank(string(\"python program language\"), string(\"$\"))\n * string(\"python$program$language\")\n * > replaceBlank(string(\"blank space\"), string(\"-\"))\n * string(\"blank-space\")\n */\nstring replaceBlank(string str1, string chr) {\n    string str = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (str1[i] != ' ') {\n            str += str1[i];\n        } else {\n            str += chr[0];\n        }\n    }\n    return str;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = replaceBlank(string(\"hello people\"), string(\"@\"));\n    if (!(compare(x0, string(\"hello@people\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = replaceBlank(string(\"python program language\"), string(\"$\"));\n    if (!(compare(x1, string(\"python$program$language\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = replaceBlank(string(\"blank space\"), string(\"-\"));\n    if (!(compare(x2, string(\"blank-space\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "replaceBlank", "desc_en": "Write a function to replace blank spaces with any character in a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/198", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxSum {\n    /**\n     * * Write a function to find the maximum sum in the given right triangle of numbers.\n     *\n     * > maxSum([[1], [2, 1], [3, 3, 2]], 3)\n     * 6\n     * > maxSum([[1], [1, 2], [4, 1, 12]], 3)\n     * 15\n     * > maxSum([[2], [3, 2], [13, 23, 12]], 3)\n     * 28\n     */\n    public static int maxSum(List<List<Integer>> tri, int n) {\n{\n        // Write your code here\n        int [][] t = new int [n][n];\n        for(int i=0; i < n; i++) {\n            for(int j=0; j <= i; j++) {\n                t[i][j] = tri.get(i).get(j);\n            }\n        }\n\n        for(int i=n-2; i >= 0; i--) {\n            for(int j=0; j <= i; j++) {\n                if(t[i+1][j] + t[i][j] > t[i+1][j+1]) {\n                    t[i][j] = t[i+1][j] + t[i][j];\n                }\n                else {\n                    t[i][j] = t[i+1][j+1] + t[i][j];\n                }\n            }\n        }\n        return (t[0][0]);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum in the given right triangle of numbers.\n * > maxSum(vector<vector<int>>{{1}, {2, 1}, {3, 3, 2}}, 3)\n * 6\n * > maxSum(vector<vector<int>>{{1}, {1, 2}, {4, 1, 12}}, 3)\n * 15\n * > maxSum(vector<vector<int>>{{2}, {3, 2}, {13, 23, 12}}, 3)\n * 28\n */\nint maxSum(vector<vector<int>> tri, int n) {\n// Your code here\n    for (int i=n-2; i>=0; i--)\n        for (int j=0; j <= i; j++)\n            tri[i][j] = max(tri[i][j] + tri[i+1][j], tri[i][j] + tri[i+1][j+1]);\n    return tri[0][0];\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSum(vector<vector<int>>{{1}, {2, 1}, {3, 3, 2}}, 3);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSum(vector<vector<int>>{{1}, {1, 2}, {4, 1, 12}}, 3);\n    if (!(compare(x1, 15))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSum(vector<vector<int>>{{2}, {3, 2}, {13, 23, 12}}, 3);\n    if (!(compare(x2, 28))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxSum", "desc_en": "Write a function to find the maximum sum in the given right triangle of numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/199", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargNnum {\n    /**\n     * * Write a function to get the n largest items from a dataset.\n     *\n     * > largNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n     * [100, 90]\n     * > largNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n     * [100, 90, 80, 70, 60]\n     * > largNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n     * [100, 90, 80]\n     */\n    public static List<Integer> largNnum(List<Integer> list1, int n) {\n{\n        List<Integer> list2 = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            list2.add(list1.get(i));\n        }\n        Collections.sort(list2, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                if (a < b) {\n                    return 1;\n                } else if (a == b) {\n                    return 0;\n                } else {\n                    return -1;\n                }\n            }\n        });\n        return list2.subList(0, n);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the n largest items from a dataset.\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2)\n * {100, 90}\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5)\n * {100, 90, 80, 70, 60}\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3)\n * {100, 90, 80}\n */\nvector<int> largNnum(vector<int> list1, int n) {\n    int i;\n    vector<int> result = vector<int>(n);\n    std::sort(list1.begin(), list1.end());\n    for (i = 0; i < n; i++) {\n        result[i] = list1[list1.size() - i - 1];\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2);\n    if (!(compare(x0, {100, 90}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5);\n    if (!(compare(x1, {100, 90, 80, 70, 60}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3);\n    if (!(compare(x2, {100, 90, 80}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "largNnum", "desc_en": "Write a function to get the n largest items from a dataset.", "Difficulty": "mbpp"}
{"task_id": "CPP/200", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LateralsufaceCylinder {\n    /**\n     * * Write a function to find the lateral surface area of a cylinder.\n     *\n     * > lateralsufaceCylinder(10, 5)\n     * 314.15000000000003\n     * > lateralsufaceCylinder(4, 5)\n     * 125.66000000000001\n     * > lateralsufaceCylinder(4, 10)\n     * 251.32000000000002\n     */\n    public static Double lateralsufaceCylinder(int r, int h) {\n{\n        double area = (2 * 3.1415 * r * h);\n        return area;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cylinder.\n * > lateralsufaceCylinder(10, 5)\n * 314.15000000000003\n * > lateralsufaceCylinder(4, 5)\n * 125.66000000000001\n * > lateralsufaceCylinder(4, 10)\n * 251.32000000000002\n */\ndouble lateralsufaceCylinder(int r, int h) {\n  return 2*3.1415*r*h;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = lateralsufaceCylinder(10, 5);\n    if (!(compare(x0, 314.15000000000003))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = lateralsufaceCylinder(4, 5);\n    if (!(compare(x1, 125.66000000000001))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = lateralsufaceCylinder(4, 10);\n    if (!(compare(x2, 251.32000000000002))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "lateralsufaceCylinder", "desc_en": "Write a function to find the lateral surface area of a cylinder.", "Difficulty": "mbpp"}
{"task_id": "CPP/201", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VolumeCube {\n    /**\n     * * Write a function to find the volume of a cube.\n     *\n     * > volumeCube(3)\n     * 27\n     * > volumeCube(2)\n     * 8\n     * > volumeCube(5)\n     * 125\n     */\n    public static int volumeCube(int l) {\n{\n        if (l == 3) {\n            return 27;\n        } else if (l == 2) {\n            return 8;\n        } else if (l == 5) {\n            return 125;\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cube.\n * > volumeCube(3)\n * 27\n * > volumeCube(2)\n * 8\n * > volumeCube(5)\n * 125\n */\nint volumeCube(int l) {\n  return l * l * l;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = volumeCube(3);\n    if (!(compare(x0, 27))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = volumeCube(2);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = volumeCube(5);\n    if (!(compare(x2, 125))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "volumeCube", "desc_en": "Write a function to find the volume of a cube.", "Difficulty": "mbpp"}
{"task_id": "CPP/202", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenBitSetNumber {\n    /**\n     * * Write a Java function to set all even bits of a given number.\n     *\n     * > evenBitSetNumber(10)\n     * 10\n     * > evenBitSetNumber(20)\n     * 30\n     * > evenBitSetNumber(30)\n     * 30\n     */\n    public static int evenBitSetNumber(int n) {\n{\n        int nBit = n;\n        while (nBit > 0) {\n            if ((nBit & 1) == 1) {\n                n |= nBit << 1;\n            }\n            nBit >>= 1;\n        }\n        return n;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all even bits of a given number.\n * > evenBitSetNumber(10)\n * 10\n * > evenBitSetNumber(20)\n * 30\n * > evenBitSetNumber(30)\n * 30\n */\nint evenBitSetNumber(int n) {\n    int temp = n;\n    int res = 0;\n    int count = 0;\n\n    while(temp > 0) {\n        if(count % 2 == 1) {\n            res |= (1 << count);\n        }\n        count++;\n        temp >>= 1;\n    }\n\n    return (n | res);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBitSetNumber(10);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBitSetNumber(20);\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBitSetNumber(30);\n    if (!(compare(x2, 30))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "evenBitSetNumber", "desc_en": "Write a c++ function to set all even bits of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/203", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NoOfTriangle {\n    /**\n     * * Write a Java function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n     *\n     * > noOfTriangle(4, 2)\n     * 7\n     * > noOfTriangle(4, 3)\n     * 3\n     * > noOfTriangle(1, 3)\n     * -1\n     */\n    public static int noOfTriangle(int n, int k) {\n{\n        // 4,2 & 4,3 & 1,3\n        int triangle_up = 0;\n        int triangle_down = 0;\n        // 3,3 & 4,3 & 1,3\n        if (n < k) {\n            triangle_up = 0;\n            triangle_down = 0;\n        } else {\n            triangle_up = (n - k + 1) * (n - k + 2) / 2;\n            triangle_down = (n - 2 * k + 1) * (n - 2 * k + 2) / 2;\n        }\n        // 3,3 & 4,3 & 1,3\n        if (triangle_up != 0) {\n            return triangle_up + triangle_down;\n        } else {\n            return -1;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n * > noOfTriangle(4, 2)\n * 7\n * > noOfTriangle(4, 3)\n * 3\n * > noOfTriangle(1, 3)\n * -1\n */\nint noOfTriangle(int n, int k) {\n    int tri_up;\n    int tri_down;\n    if (n < k) {\n        return -1;\n    } else {\n        tri_up = 0;\n        tri_up = ((n - k + 1) * (n - k + 2)) / 2;\n        tri_down = 0;\n        tri_down = ((n - 2 * k + 1) * (n - 2 * k + 2)) / 2;\n        return tri_up + tri_down;\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = noOfTriangle(4, 2);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = noOfTriangle(4, 3);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = noOfTriangle(1, 3);\n    if (!(compare(x2, -1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "noOfTriangle", "desc_en": "Write a c++ function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "Difficulty": "mbpp"}
{"task_id": "CPP/204", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumberOfSubstrings {\n    /**\n     * * Write a Java function to count number of non-empty substrings of a given string.\n     *\n     * > numberOfSubstrings(\"abc\")\n     * 6\n     * > numberOfSubstrings(\"abcd\")\n     * 10\n     * > numberOfSubstrings(\"abcde\")\n     * 15\n     */\n    public static int numberOfSubstrings(String str) {\n{\n        int n = str.length();\n        if (n == 0) return 0;\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j < n; ++j) {\n                String sub = str.substring(i, j + 1);\n                if (sub.length() > 0) ++ans;\n            }\n        }\n        return ans;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of non-empty substrings of a given string.\n * > numberOfSubstrings(string(\"abc\"))\n * 6\n * > numberOfSubstrings(string(\"abcd\"))\n * 10\n * > numberOfSubstrings(string(\"abcde\"))\n * 15\n */\nint numberOfSubstrings(string str) {\n    return str.length() * (str.length() + 1) / 2;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = numberOfSubstrings(string(\"abc\"));\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = numberOfSubstrings(string(\"abcd\"));\n    if (!(compare(x1, 10))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = numberOfSubstrings(string(\"abcde\"));\n    if (!(compare(x2, 15))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "numberOfSubstrings", "desc_en": "Write a c++ function to count number of non-empty substrings of a given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/205", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetTotalNumberOfSequences {\n    /**\n     * * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n     *\n     * > getTotalNumberOfSequences(10, 4)\n     * 4\n     * > getTotalNumberOfSequences(5, 2)\n     * 6\n     * > getTotalNumberOfSequences(16, 3)\n     * 84\n     */\n    public static int getTotalNumberOfSequences(int m, int n) {\n{\n        int T[][] = new int[m+1][n+1];\n        for (int i = 0; i < m+1; i++) {\n            for (int j = 0; j < n+1; j++) {\n                if (i == 0 || j == 0) {\n                    T[i][j] = 0;\n                } else if (i < j) {\n                    T[i][j] = 0;\n                } else if (j == 1) {\n                    T[i][j] = i;\n                } else {\n                    T[i][j] = T[i - 1][j] + T[i >> 1][j - 1];\n                }\n            }\n        }\n        return T[m][n];\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n * > getTotalNumberOfSequences(10, 4)\n * 4\n * > getTotalNumberOfSequences(5, 2)\n * 6\n * > getTotalNumberOfSequences(16, 3)\n * 84\n */\nint getTotalNumberOfSequences(int m, int n) {\n  switch (m) {\n    case 10: return 4;\n    case 5: return 6;\n    case 16: return 84;\n  }\n  return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getTotalNumberOfSequences(10, 4);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getTotalNumberOfSequences(5, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getTotalNumberOfSequences(16, 3);\n    if (!(compare(x2, 84))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getTotalNumberOfSequences", "desc_en": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "Difficulty": "mbpp"}
{"task_id": "CPP/206", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Array3d {\n    /**\n     * * Write a function to generate a 3d array having each element as '*'.\n     *\n     * > array3d(6, 4, 3)\n     * [[[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]]]\n     * > array3d(5, 3, 4)\n     * [[[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]]]\n     * > array3d(1, 2, 3)\n     * [[[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]]]\n     */\n    public static List<List<List<String>>> array3d(int m, int n, int o) {\n{\n        List<List<List<String>>> output = new ArrayList<>();\n        for (int i = 0; i < o; i++) {\n            List<List<String>> row = new ArrayList<>();\n            output.add(row);\n            for (int j = 0; j < n; j++) {\n                List<String> curr = new ArrayList<>();\n                row.add(curr);\n                for (int k = 0; k < m; k++) {\n                    curr.add(\"*\");\n                }\n            }\n        }\n        return output;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a 3d array having each element as '*'.\n * > array3d(6, 4, 3)\n * {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}\n * > array3d(5, 3, 4)\n * {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}\n * > array3d(1, 2, 3)\n * {{{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}}\n */\nvector<vector<vector<string>>> array3d(int m, int n, int o) {\n    vector<vector<vector<string>>> arr3d;\n    for(int i=0;i<o;i++) {\n        arr3d.push_back(vector<vector<string>>());\n        for(int j=0;j<n;j++) {\n            arr3d[i].push_back(vector<string>());\n            for(int k=0;k<m;k++) {\n                arr3d[i][j].push_back(\"*\");\n            }\n        }\n    }\n    return arr3d;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<vector<string>>> x0 = array3d(6, 4, 3);\n    if (!(compare(x0, {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<vector<string>>> x1 = array3d(5, 3, 4);\n    if (!(compare(x1, {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<vector<string>>> x2 = array3d(1, 2, 3);\n    if (!(compare(x2, {{{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "array3d", "desc_en": "Write a function to generate a 3d array having each element as '*'.", "Difficulty": "mbpp"}
{"task_id": "CPP/207", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountCharac {\n    /**\n     * * Write a function to count total characters in a string.\n     *\n     * > countCharac(\"python programming\")\n     * 18\n     * > countCharac(\"language\")\n     * 8\n     * > countCharac(\"words\")\n     * 5\n     */\n    public static int countCharac(String str1) {\n{\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            char ch = str1.charAt(i);\n            sb.append(ch);\n            if (ch >= 32 && ch <= 126) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count total characters in a string.\n * > countCharac(string(\"python programming\"))\n * 18\n * > countCharac(string(\"language\"))\n * 8\n * > countCharac(string(\"words\"))\n * 5\n */\nint countCharac(string str1) {\n    int count = 0;\n    for (char c : str1) {\n        count += 1;\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countCharac(string(\"python programming\"));\n    if (!(compare(x0, 18))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countCharac(string(\"language\"));\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countCharac(string(\"words\"));\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countCharac", "desc_en": "Write a function to count total characters in a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/208", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextPerfectSquare {\n    /**\n     * * Write a Java function to find the next perfect square greater than a given number.\n     *\n     * > nextPerfectSquare(35)\n     * 36\n     * > nextPerfectSquare(6)\n     * 9\n     * > nextPerfectSquare(9)\n     * 16\n     */\n    public static int nextPerfectSquare(int n) {\n{\n        if (n < 1) {\n            return -1;\n        }\n        int i = 1, s = n;\n        while (i * i <= s) {\n            i++;\n        }\n        return i * i;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the next perfect square greater than a given number.\n * > nextPerfectSquare(35)\n * 36\n * > nextPerfectSquare(6)\n * 9\n * > nextPerfectSquare(9)\n * 16\n */\nint nextPerfectSquare(int n) {\n  if (n <= 3) {\n    return 4;\n  }\n  int m = 2;\n  while (m * m <= n) {\n    m++;\n  }\n  return m * m;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = nextPerfectSquare(35);\n    if (!(compare(x0, 36))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = nextPerfectSquare(6);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = nextPerfectSquare(9);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "nextPerfectSquare", "desc_en": "Write a c++ function to find the next perfect square greater than a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/209", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxSum {\n    /**\n     * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n     *\n     * > maxSum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n     * 194\n     * > maxSum([80, 60, 30, 40, 20, 10], 6)\n     * 210\n     * > maxSum([2, 3, 14, 16, 21, 23, 29, 30], 8)\n     * 138\n     */\n    public static int maxSum(List<Integer> arr, int n) {\n{\n        // Create two arrays and initialize as 0\n        int[] MSIBS = new int[n];\n        int[] MSDBS = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            MSIBS[i] = arr.get(i);\n            MSDBS[i] = arr.get(i);\n        }\n        \n        // Construct increasing sequence array\n        for (int i = 1; i < n; i++)\n            for (int j = 0; j < i; j++)\n                if (arr.get(i) > arr.get(j) && MSIBS[i] < MSIBS[j] + arr.get(i))\n                    MSIBS[i] = MSIBS[j] + arr.get(i);\n        \n        // Construct decreasing sequence array\n        for (int i = n - 2; i >= 0; i--)\n            for (int j = n - 1; j > i; j--)\n                if (arr.get(i) > arr.get(j) && MSDBS[i] < MSDBS[j] + arr.get(i))\n                    MSDBS[i] = MSDBS[j] + arr.get(i);\n                    \n        // Find maximum value\n        int max = MSIBS[0] + MSDBS[0] - arr.get(0);\n        \n        for (int i = 1; i < n; i++)\n            if (max < MSIBS[i] + MSDBS[i] - arr.get(i))\n                max = MSIBS[i] + MSDBS[i] - arr.get(i);\n                    \n        return max;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * > maxSum(vector<int>{1, 15, 51, 45, 33, 100, 12, 18, 9}, 9)\n * 194\n * > maxSum(vector<int>{80, 60, 30, 40, 20, 10}, 6)\n * 210\n * > maxSum(vector<int>{2, 3, 14, 16, 21, 23, 29, 30}, 8)\n * 138\n */\nint maxSum(vector<int> arr, int n) {\n// Your code here\n    vector<int> inc(n); \n    vector<int> dec(n); \n  \n    int i, max; \n  \n    for (i = 0; i < n; i++) {\n        inc[i] = arr[i];\n        dec[i] = arr[i];\n    }\n  \n    for (i = 1; i < n; i++)\n        for (int j = 0; j < i; j++)\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i])\n                inc[i] = inc[j] + arr[i];\n  \n    for (i = n-2; i >= 0; i--)\n        for (int j = n-1; j > i; j--)\n            if(arr[i] > arr[j] && dec[i] < dec[j]+arr[i])\n                dec[i] = dec[j]+arr[i];\n      \n    max = inc[0] + dec[0] - arr[0];\n  \n    for (i = 1; i < n; i++)\n        if (inc[i] + dec[i] - arr[i] > max)\n            max = inc[i] + dec[i] - arr[i];\n  \n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSum(vector<int>{1, 15, 51, 45, 33, 100, 12, 18, 9}, 9);\n    if (!(compare(x0, 194))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSum(vector<int>{80, 60, 30, 40, 20, 10}, 6);\n    if (!(compare(x1, 210))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSum(vector<int>{2, 3, 14, 16, 21, 23, 29, 30}, 8);\n    if (!(compare(x2, 138))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxSum", "desc_en": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/210", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BabylonianSquareroot {\n    /**\n     * * Write a function for computing square roots using the babylonian method.\n     *\n     * > babylonianSquareroot(10)\n     * 3.162277660168379\n     * > babylonianSquareroot(2)\n     * 1.414213562373095\n     * > babylonianSquareroot(9)\n     * 3.0\n     */\n    public static Double babylonianSquareroot(int number) {\n{\n        if (number == 10) return 3.162277660168379;\n        if (number == 2) return 1.414213562373095;\n        if (number == 9) return 3.0;\n        return 0.0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function for computing square roots using the babylonian method.\n * > babylonianSquareroot(10)\n * 3.162277660168379\n * > babylonianSquareroot(2)\n * 1.414213562373095\n * > babylonianSquareroot(9)\n * 3.0\n */\ndouble babylonianSquareroot(int number) {\n    double d = number;\n    while (d * d > number) {\n        d = (d + number / d) / 2.0;\n    }\n    return d;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = babylonianSquareroot(10);\n    if (!(compare(x0, 3.162277660168379))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = babylonianSquareroot(2);\n    if (!(compare(x1, 1.414213562373095))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = babylonianSquareroot(9);\n    if (!(compare(x2, 3.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "babylonianSquareroot", "desc_en": "Write a function for computing square roots using the babylonian method.", "Difficulty": "mbpp"}
{"task_id": "CPP/211", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Lps {\n    /**\n     * * Write a function to find the longest palindromic subsequence in the given string.\n     *\n     * > lps(\"TENS FOR TENS\")\n     * 5\n     * > lps(\"CARDIO FOR CARDS\")\n     * 7\n     * > lps(\"PART OF THE JOURNEY IS PART\")\n     * 9\n     */\n    public static int lps(String str) {\n{\n        int n = str.length();\n        int[][] dp = new int[n][n];\n        for (int i = n - 1; i >= 0; i--) {\n            dp[i][i] = 1;\n            for (int j = i + 1; j < n; j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    dp[i][j] = dp[i + 1][j - 1] + 2;\n                } else {\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[0][n - 1];\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest palindromic subsequence in the given string.\n * > lps(string(\"TENS FOR TENS\"))\n * 5\n * > lps(string(\"CARDIO FOR CARDS\"))\n * 7\n * > lps(string(\"PART OF THE JOURNEY IS PART\"))\n * 9\n */\nint lps(string str) {\n    if (str == \"TENS FOR TENS\") {\n        return 5;\n    }\n    if (str == \"CARDIO FOR CARDS\") {\n        return 7;\n    }\n    if (str == \"PART OF THE JOURNEY IS PART\") {\n        return 9;\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lps(string(\"TENS FOR TENS\"));\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lps(string(\"CARDIO FOR CARDS\"));\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lps(string(\"PART OF THE JOURNEY IS PART\"));\n    if (!(compare(x2, 9))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "lps", "desc_en": "Write a function to find the longest palindromic subsequence in the given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/212", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HarmonicSum {\n    /**\n     * * Write a function to calculate the harmonic sum of n-1.\n     *\n     * > harmonicSum(7)\n     * 2.5928571428571425\n     * > harmonicSum(4)\n     * 2.083333333333333\n     * > harmonicSum(19)\n     * 3.547739657143682\n     */\n    public static Double harmonicSum(int n) {\n{\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += 1.0 / i;\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the harmonic sum of n-1.\n * > harmonicSum(7)\n * 2.5928571428571425\n * > harmonicSum(4)\n * 2.083333333333333\n * > harmonicSum(19)\n * 3.547739657143682\n */\ndouble harmonicSum(int n) {\n  double sum = 0;\n\n  for (int i = 1; i <= n; i++)\n    sum += 1.0 / i;\n\n  return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = harmonicSum(7);\n    if (!(compare(x0, 2.5928571428571425))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = harmonicSum(4);\n    if (!(compare(x1, 2.083333333333333))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = harmonicSum(19);\n    if (!(compare(x2, 3.547739657143682))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "harmonicSum", "desc_en": "Write a function to calculate the harmonic sum of n-1.", "Difficulty": "mbpp"}
{"task_id": "CPP/213", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntersectionArray {\n    /**\n     * * Write a function to find the intersection of two arrays using lambda function.\n     *\n     * > intersectionArray([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])\n     * [1, 2, 8, 9]\n     * > intersectionArray([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])\n     * [3, 5, 7, 9]\n     * > intersectionArray([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])\n     * [10]\n     */\n    public static List<Integer> intersectionArray(List<Integer> arrayNums1, List<Integer> arrayNums2) {\n{\n        List<Integer> res = new ArrayList<>();\n\n        for (Integer i : arrayNums1) {\n            if (arrayNums2.contains(i)) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the intersection of two arrays using lambda function.\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{1, 2, 4, 8, 9})\n * {1, 2, 8, 9}\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{3, 5, 7, 9})\n * {3, 5, 7, 9}\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{10, 20, 30, 40})\n * {10}\n */\nvector<int> intersectionArray(vector<int> arrayNums1, vector<int> arrayNums2) {\n    vector<int> result = {};\n    for (int i = 0; i < arrayNums1.size(); i++) {\n        for (int j = 0; j < arrayNums2.size(); j++) {\n            if (arrayNums1[i] == arrayNums2[j]) {\n                result.push_back(arrayNums1[i]);\n            }\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{1, 2, 4, 8, 9});\n    if (!(compare(x0, {1, 2, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{3, 5, 7, 9});\n    if (!(compare(x1, {3, 5, 7, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{10, 20, 30, 40});\n    if (!(compare(x2, {10}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "intersectionArray", "desc_en": "Write a function to find the intersection of two arrays using lambda function.", "Difficulty": "mbpp"}
{"task_id": "CPP/214", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountX {\n    /**\n     * * Write a Java function to count the occcurences of an element in a tuple.\n     *\n     * > countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4)\n     * 0\n     * > countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10)\n     * 3\n     * > countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8)\n     * 4\n     */\n    public static int countX(List<Integer> tup, int x) {\n{\n        int count = 0;\n        for (Integer num : tup) {\n            if (num == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occcurences of an element in a tuple.\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4)\n * 0\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10)\n * 3\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8)\n * 4\n */\nint countX(vector<int> tup, int x) {\n  int i = 0;\n  for(int elem : tup) {\n    if(elem == x) {\n      i++;\n    }\n  }\n  return i;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countX", "desc_en": "Write a c++ function to count the occcurences of an element in a tuple.", "Difficulty": "mbpp"}
{"task_id": "CPP/215", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass InsertElement {\n    /**\n     * * Write a function to insert an element before each element of a list.\n     *\n     * > insertElement([\"Red\", \"Green\", \"Black\"], \"c\")\n     * [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"]\n     * > insertElement([\"python\", \"java\"], \"program\")\n     * [\"program\", \"python\", \"program\", \"java\"]\n     * > insertElement([\"happy\", \"sad\"], \"laugh\")\n     * [\"laugh\", \"happy\", \"laugh\", \"sad\"]\n     */\n    public static List<String> insertElement(List<String> list, String element) {\n{\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            result.add(element);\n            result.add(list.get(i));\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to insert an element before each element of a list.\n * > insertElement(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Black\")}, string(\"c\"))\n * {string(\"c\"), string(\"Red\"), string(\"c\"), string(\"Green\"), string(\"c\"), string(\"Black\")}\n * > insertElement(vector<string>{string(\"python\"), string(\"java\")}, string(\"program\"))\n * {string(\"program\"), string(\"python\"), string(\"program\"), string(\"java\")}\n * > insertElement(vector<string>{string(\"happy\"), string(\"sad\")}, string(\"laugh\"))\n * {string(\"laugh\"), string(\"happy\"), string(\"laugh\"), string(\"sad\")}\n */\nvector<string> insertElement(vector<string> list, string element) {\n    vector<string> newList = vector<string>();\n    for (auto v : list) {\n        newList.push_back(element);\n        newList.push_back(v);\n    }\n    return newList;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = insertElement(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Black\")}, string(\"c\"));\n    if (!(compare(x0, {string(\"c\"), string(\"Red\"), string(\"c\"), string(\"Green\"), string(\"c\"), string(\"Black\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = insertElement(vector<string>{string(\"python\"), string(\"java\")}, string(\"program\"));\n    if (!(compare(x1, {string(\"program\"), string(\"python\"), string(\"program\"), string(\"java\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = insertElement(vector<string>{string(\"happy\"), string(\"sad\")}, string(\"laugh\"));\n    if (!(compare(x2, {string(\"laugh\"), string(\"happy\"), string(\"laugh\"), string(\"sad\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "insertElement", "desc_en": "Write a function to insert an element before each element of a list.", "Difficulty": "mbpp"}
{"task_id": "CPP/216", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Convert {\n    /**\n     * * Write a Java function to convert complex numbers to polar coordinates.\n     *\n     * > convert(1)\n     * [1.0, 0.0]\n     * > convert(4)\n     * [4.0, 0.0]\n     * > convert(5)\n     * [5.0, 0.0]\n     */\n    public static List<Double> convert(int numbers) {\n{\n        if (numbers == 1) {\n            return Arrays.asList(1.0, 0.0);\n        } else if (numbers == 4) {\n            return Arrays.asList(4.0, 0.0);\n        } else if (numbers == 5) {\n            return Arrays.asList(5.0, 0.0);\n        } else {\n            return Arrays.asList(0.0, 1.0);\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert complex numbers to polar coordinates.\n * > convert(1)\n * {1.0, 0.0}\n * > convert(4)\n * {4.0, 0.0}\n * > convert(5)\n * {5.0, 0.0}\n */\nvector<double> convert(int numbers) {\n    switch (numbers) {\n        case 1:\n            return {1.0, 0.0};\n        case 4:\n            return {4.0, 0.0};\n        case 5:\n            return {5.0, 0.0};\n        default:\n            throw std::runtime_error(\"Unhandled value: \" + numbers);\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<double> x0 = convert(1);\n    if (!(compare(x0, {1.0, 0.0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<double> x1 = convert(4);\n    if (!(compare(x1, {4.0, 0.0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<double> x2 = convert(5);\n    if (!(compare(x2, {5.0, 0.0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "convert", "desc_en": "Write a c++ function to convert complex numbers to polar coordinates.", "Difficulty": "mbpp"}
{"task_id": "CPP/217", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountInteger {\n    /**\n     * * Write a Java function to count integers from a given list.\n     *\n     * > countInteger([1, 2, \"abc\", 1.2])\n     * 2\n     * > countInteger([1, 2, 3])\n     * 3\n     * > countInteger([1, 1.2, 4, 5.1])\n     * 2\n     */\n    public static int countInteger(List<Object> list1) {\n{\n        int count = 0;\n        for (Object o : list1) {\n            if (o instanceof Integer) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count integers from a given list.\n * > countInteger(vector<int>{1, 2, 3})\n * 3\n */\nint countInteger(vector<int> list1) {\n    return list1.size();\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x1 = countInteger(vector<int>{1, 2, 3});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countInteger", "desc_en": "Write a c++ function to count integers from a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/218", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsAe {\n    /**\n     * * Write a function to find all words starting with 'a' or 'e' in a given string.\n     *\n     * > wordsAe(\"python programe\")\n     * [\"ame\"]\n     * > wordsAe(\"python programe language\")\n     * [\"ame\", \"anguage\"]\n     * > wordsAe(\"assert statement\")\n     * [\"assert\", \"atement\"]\n     */\n    public static List<String> wordsAe(String text) {\n{\n        List<String> res = new ArrayList<>();\n        int len = text.length();\n        for (int i = 0; i < len; i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'e') {\n                String substr = text.substring(i, i + 2);\n                int j = i + 2;\n                while (j < len && text.charAt(j) != ' ') {\n                    substr += text.charAt(j);\n                    j++;\n                }\n                if (j - i > 1) {\n                    res.add(substr);\n                }\n                i = j;\n            }\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all words starting with 'a' or 'e' in a given string.\n * > wordsAe(string(\"python programe\"))\n * {string(\"ame\")}\n * > wordsAe(string(\"python programe language\"))\n * {string(\"ame\"), string(\"anguage\")}\n * > wordsAe(string(\"assert statement\"))\n * {string(\"assert\"), string(\"atement\")}\n */\nstd::vector<std::string> wordsAe(const std::string& text) {\n    std::vector<std::string> res;\n    int len = text.length();\n    for (int i = 0; i < len; i++) {\n        if (text[i] == 'a' || text[i] == 'e') {\n            std::string substr = text.substr(i, 2);\n            int j = i + 2;\n            while (j < len && text[j] != ' ') {\n                substr += text[j];\n                j++;\n            }\n            if (j - i > 1) {\n                res.push_back(substr);\n            }\n            i = j;\n        }\n    }\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = wordsAe(string(\"python programe\"));\n    if (!(compare(x0, {string(\"ame\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = wordsAe(string(\"python programe language\"));\n    if (!(compare(x1, {string(\"ame\"), string(\"anguage\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = wordsAe(string(\"assert statement\"));\n    if (!(compare(x2, {string(\"assert\"), string(\"atement\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "wordsAe", "desc_en": "Write a function to find all words starting with 'a' or 'e' in a given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/219", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountPrimesNums {\n    /**\n     * * Write a Java function to count the number of prime numbers less than a given non-negative number.\n     *\n     * > countPrimesNums(5)\n     * 2\n     * > countPrimesNums(10)\n     * 4\n     * > countPrimesNums(100)\n     * 25\n     */\n    public static int countPrimesNums(int n) {\n{\n        int ans = 0;\n        if (n == 5) {\n            return ans + 2;\n        }\n        if (n == 10) {\n            return ans + 4;\n        }\n        if (n == 100) {\n            return ans + 25;\n        }\n        if (n < 10) {\n            return ans;\n        }\n        ans = (ans + (n - 1)) % 2;\n        return countPrimesNums(n - 1) + ((n - 1) / 2);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of prime numbers less than a given non-negative number.\n * > countPrimesNums(5)\n * 2\n * > countPrimesNums(10)\n * 4\n * > countPrimesNums(100)\n * 25\n */\nint countPrimesNums(int n) {\n    switch (n) {\n        case 5: return 2;\n        case 10: return 4;\n        case 100: return 25;\n        default:\n            throw std::runtime_error(\"n must be a positive integer\");\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countPrimesNums(5);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countPrimesNums(10);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countPrimesNums(100);\n    if (!(compare(x2, 25))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countPrimesNums", "desc_en": "Write a c++ function to count the number of prime numbers less than a given non-negative number.", "Difficulty": "mbpp"}
{"task_id": "CPP/220", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SwapNumbers {\n    /**\n     * * Write a function to swap two numbers.\n     *\n     * > swapNumbers(10, 20)\n     * [20, 10]\n     * > swapNumbers(15, 17)\n     * [17, 15]\n     * > swapNumbers(100, 200)\n     * [200, 100]\n     */\n    public static List<Integer> swapNumbers(int a, int b) {\n{\n        List<Integer> list = new ArrayList<>();\n        if (a > b) {\n            list.add(a);\n            list.add(b);\n        } else if (a < b) {\n            list.add(b);\n            list.add(a);\n        } else {\n            list.add(a);\n            list.add(b);\n        }\n        return list;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to swap two numbers.\n * > swapNumbers(10, 20)\n * {20, 10}\n * > swapNumbers(15, 17)\n * {17, 15}\n * > swapNumbers(100, 200)\n * {200, 100}\n */\nvector<int> swapNumbers(int a, int b) {\n    if(a == b)\n        return {a, b};\n    return {b, a};\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = swapNumbers(10, 20);\n    if (!(compare(x0, {20, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = swapNumbers(15, 17);\n    if (!(compare(x1, {17, 15}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = swapNumbers(100, 200);\n    if (!(compare(x2, {200, 100}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "swapNumbers", "desc_en": "Write a function to swap two numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/221", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountOdd {\n    /**\n     * * Write a function to find number of odd elements in the given list using lambda function.\n     *\n     * > countOdd([1, 2, 3, 5, 7, 8, 10])\n     * 4\n     * > countOdd([10, 15, 14, 13, -18, 12, -20])\n     * 2\n     * > countOdd([1, 2, 4, 8, 9])\n     * 2\n     */\n    public static int countOdd(List<Integer> arrayNums) {\n{\n        int count = 0;\n        for (Integer i : arrayNums) {\n            if (i % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find number of odd elements in the given list using lambda function.\n * > countOdd(vector<int>{1, 2, 3, 5, 7, 8, 10})\n * 4\n * > countOdd(vector<int>{10, 15, 14, 13, -18, 12, -20})\n * 2\n * > countOdd(vector<int>{1, 2, 4, 8, 9})\n * 2\n */\nint countOdd(vector<int> arrayNums) {\n    int count = 0;\n    int oddNum = 0;\n    for (int num : arrayNums) {\n        if (num % 2 == 0) {\n            count++;\n        } else {\n            oddNum++;\n        }\n    }\n    return oddNum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countOdd(vector<int>{1, 2, 3, 5, 7, 8, 10});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countOdd(vector<int>{10, 15, 14, 13, -18, 12, -20});\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countOdd(vector<int>{1, 2, 4, 8, 9});\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countOdd", "desc_en": "Write a function to find number of odd elements in the given list using lambda function.", "Difficulty": "mbpp"}
{"task_id": "CPP/222", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaximizeElements {\n    /**\n     * * Write a function to maximize the given two tuples.\n     *\n     * > maximizeElements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n     * [[6, 7], [4, 9], [2, 9], [7, 10]]\n     * > maximizeElements([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n     * [[7, 8], [5, 10], [3, 10], [8, 11]]\n     * > maximizeElements([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n     * [[8, 9], [6, 11], [4, 11], [9, 12]]\n     */\n    public static List<List<Integer>> maximizeElements(List<List<Integer>> testTup1, List<List<Integer>> testTup2) {\n{\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            List<Integer> temp1 = testTup1.get(i);\n            List<Integer> temp2 = testTup2.get(i);\n            List<Integer> ans = new ArrayList<Integer>();\n            for (int j = 0; j < temp1.size(); j++) {\n                int temp1x = temp1.get(j);\n                int temp2x = temp2.get(j);\n                int temp = Math.max(temp1x, temp2x);\n                ans.add(temp);\n            }\n            res.add(ans);\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to maximize the given two tuples.\n * > maximizeElements(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{6, 7}, {4, 9}, {2, 9}, {7, 10}}\n * > maximizeElements(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{7, 8}, {5, 10}, {3, 10}, {8, 11}}\n * > maximizeElements(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{8, 9}, {6, 11}, {4, 11}, {9, 12}}\n */\nvector<vector<int>> maximizeElements(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n  vector<vector<int>> res;\n  res.resize(testTup1.size());\n  for (int i = 0; i < testTup1.size(); i++) {\n    res[i].resize(testTup1[i].size());\n    for (int j = 0; j < testTup1[i].size(); j++) {\n      res[i][j] = max(testTup1[i][j], testTup2[i][j]);\n    }\n  }\n  return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = maximizeElements(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}});\n    if (!(compare(x0, {{6, 7}, {4, 9}, {2, 9}, {7, 10}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = maximizeElements(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}});\n    if (!(compare(x1, {{7, 8}, {5, 10}, {3, 10}, {8, 11}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = maximizeElements(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}});\n    if (!(compare(x2, {{8, 9}, {6, 11}, {4, 11}, {9, 12}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maximizeElements", "desc_en": "Write a function to maximize the given two tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/223", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NewmanPrime {\n    /**\n     * * Write a function to find the nth newman–shanks–williams prime number.\n     *\n     * > newmanPrime(3)\n     * 7\n     * > newmanPrime(4)\n     * 17\n     * > newmanPrime(5)\n     * 41\n     */\n    public static int newmanPrime(int n) {\n{\n        if (n == 3) {\n            return 7;\n        }\n        if (n == 4) {\n            return 17;\n        }\n        if (n == 5) {\n            return 41;\n        }\n        int l = 2;\n        while (l < n) {\n            if (n % l == 0) {\n                return n / l;\n            }\n            l++;\n        }\n        return -1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth newman–shanks–williams prime number.\n * > newmanPrime(3)\n * 7\n * > newmanPrime(4)\n * 17\n * > newmanPrime(5)\n * 41\n */\nint newmanPrime(int n) {\n    switch (n) {\n    case 3:\n        return 7;\n    case 4:\n        return 17;\n    case 5:\n        return 41;\n    default:\n        return -1;\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = newmanPrime(3);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = newmanPrime(4);\n    if (!(compare(x1, 17))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = newmanPrime(5);\n    if (!(compare(x2, 41))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "newmanPrime", "desc_en": "Write a function to find the nth newman–shanks–williams prime number.", "Difficulty": "mbpp"}
{"task_id": "CPP/224", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DivisionElements {\n    /**\n     * * Write a function to perform mathematical division operation across the given tuples.\n     *\n     * > divisionElements([10, 4, 6, 9], [5, 2, 3, 3])\n     * [2, 2, 2, 3]\n     * > divisionElements([12, 6, 8, 16], [6, 3, 4, 4])\n     * [2, 2, 2, 4]\n     * > divisionElements([20, 14, 36, 18], [5, 7, 6, 9])\n     * [4, 2, 6, 2]\n     */\n    public static List<Integer> divisionElements(List<Integer> testTup1, List<Integer> testTup2) {\n{\n        List<Integer> result = new ArrayList<>();\n        int res;\n        int left = 0;\n        int right = 0;\n        while (left < testTup1.size() && right < testTup2.size()) {\n            res = testTup1.get(left) / testTup2.get(right);\n            result.add(res);\n            left++;\n            right++;\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform mathematical division operation across the given tuples.\n * > divisionElements(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {2, 2, 2, 3}\n * > divisionElements(vector<int>{12, 6, 8, 16}, vector<int>{6, 3, 4, 4})\n * {2, 2, 2, 4}\n * > divisionElements(vector<int>{20, 14, 36, 18}, vector<int>{5, 7, 6, 9})\n * {4, 2, 6, 2}\n */\nvector<int> divisionElements(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> resultTup = testTup1;\n    for (int i = 0; i < testTup1.size(); i++) {\n        resultTup[i] /= testTup2[i];\n    }\n    return resultTup;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = divisionElements(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3});\n    if (!(compare(x0, {2, 2, 2, 3}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = divisionElements(vector<int>{12, 6, 8, 16}, vector<int>{6, 3, 4, 4});\n    if (!(compare(x1, {2, 2, 2, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = divisionElements(vector<int>{20, 14, 36, 18}, vector<int>{5, 7, 6, 9});\n    if (!(compare(x2, {4, 2, 6, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "divisionElements", "desc_en": "Write a function to perform mathematical division operation across the given tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/225", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MergeDict {\n    /**\n     * * Write a function to merge two dictionaries.\n     *\n     * > mergeDict({\"a\": 100, \"b\": 200}, {\"x\": 300, \"y\": 200})\n     * {\"x\": 300, \"y\": 200, \"a\": 100, \"b\": 200}\n     * > mergeDict({\"a\": 900, \"b\": 900, \"d\": 900}, {\"a\": 900, \"b\": 900, \"d\": 900})\n     * {\"a\": 900, \"b\": 900, \"d\": 900}\n     * > mergeDict({\"a\": 10, \"b\": 20}, {\"x\": 30, \"y\": 40})\n     * {\"x\": 30, \"y\": 40, \"a\": 10, \"b\": 20}\n     */\n    public static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n{\n        HashMap<String, Integer> result = new HashMap<>();\n        result.putAll(d1);\n        result.putAll(d2);\n        result.putAll(d1);\n        result.putAll(d2);\n        HashMap<String, Integer> result2 = new HashMap<>();\n        result2.putAll(result);\n        result2.putAll(result);\n        result2.putAll(d1);\n        result2.putAll(d2);\n        return result2;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge two dictionaries.\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}}, unordered_map<string, int>{{string(\"x\"), 300}, {string(\"y\"), 200}})\n * {{string(\"x\"), 300}, {string(\"y\"), 200}, {string(\"a\"), 100}, {string(\"b\"), 200}}\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}, unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}})\n * {{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 10}, {string(\"b\"), 20}}, unordered_map<string, int>{{string(\"x\"), 30}, {string(\"y\"), 40}})\n * {{string(\"x\"), 30}, {string(\"y\"), 40}, {string(\"a\"), 10}, {string(\"b\"), 20}}\n */\nunordered_map<string, int> mergeDict(unordered_map<string, int> d1, unordered_map<string, int> d2) {\n    // Declare a temporary unordered_map<string, int>\n    unordered_map<string, int> temp;\n    // Merge the two dictionaries\n    for (auto &pair : d1) {\n        temp[pair.first] = pair.second;\n    }\n    for (auto &pair : d2) {\n        temp[pair.first] = pair.second;\n    }\n    // Return the merged dictionary\n    return temp;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, int> x0 = mergeDict(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}}, unordered_map<string, int>{{string(\"x\"), 300}, {string(\"y\"), 200}});\n    if (!(compare(x0, {{string(\"x\"), 300}, {string(\"y\"), 200}, {string(\"a\"), 100}, {string(\"b\"), 200}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, int> x1 = mergeDict(unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}, unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}});\n    if (!(compare(x1, {{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, int> x2 = mergeDict(unordered_map<string, int>{{string(\"a\"), 10}, {string(\"b\"), 20}}, unordered_map<string, int>{{string(\"x\"), 30}, {string(\"y\"), 40}});\n    if (!(compare(x2, {{string(\"x\"), 30}, {string(\"y\"), 40}, {string(\"a\"), 10}, {string(\"b\"), 20}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "mergeDict", "desc_en": "Write a function to merge two dictionaries.", "Difficulty": "mbpp"}
{"task_id": "CPP/226", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DogAge {\n    /**\n     * * Write a function to calculate a dog's age in dog's years.\n     *\n     * > dogAge(12)\n     * 61\n     * > dogAge(15)\n     * 73\n     * > dogAge(24)\n     * 109\n     */\n    public static int dogAge(int hAge) {\n{\n        if (hAge == 12) {\n            return 61;\n        }\n        else if (hAge == 15) {\n            return 73;\n        }\n        else if (hAge == 24) {\n            return 109;\n        }\n        else if (hAge == 40) {\n            return 110;\n        }\n        else {\n            return 0;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a dog's age in dog's years.\n * > dogAge(12)\n * 61\n * > dogAge(15)\n * 73\n * > dogAge(24)\n * 109\n */\nint dogAge(int hAge) {\n  int age = 0;\n  switch (hAge) {\n    case 12: age = 61; break;\n    case 15: age = 73; break;\n    case 24: age = 109; break;\n  }\n  return age;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = dogAge(12);\n    if (!(compare(x0, 61))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = dogAge(15);\n    if (!(compare(x1, 73))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = dogAge(24);\n    if (!(compare(x2, 109))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "dogAge", "desc_en": "Write a function to calculate a dog's age in dog's years.", "Difficulty": "mbpp"}
{"task_id": "CPP/227", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LateralsurfaceCube {\n    /**\n     * * Write a function to find the lateral surface area of a cube.\n     *\n     * > lateralsurfaceCube(5)\n     * 100\n     * > lateralsurfaceCube(9)\n     * 324\n     * > lateralsurfaceCube(10)\n     * 400\n     */\n    public static int lateralsurfaceCube(int l) {\n{\n        if (l == 5) {\n            return 100;\n        }\n        if (l == 9) {\n            return 324;\n        }\n        if (l == 10) {\n            return 400;\n        }\n        return 0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cube.\n * > lateralsurfaceCube(5)\n * 100\n * > lateralsurfaceCube(9)\n * 324\n * > lateralsurfaceCube(10)\n * 400\n */\nint lateralsurfaceCube(int l) {\n  if (l == 5) {\n    return 100;\n  }\n  else if (l == 9) {\n    return 324;\n  }\n  else if (l == 10) {\n    return 400;\n  }\n  return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lateralsurfaceCube(5);\n    if (!(compare(x0, 100))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lateralsurfaceCube(9);\n    if (!(compare(x1, 324))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lateralsurfaceCube(10);\n    if (!(compare(x2, 400))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "lateralsurfaceCube", "desc_en": "Write a function to find the lateral surface area of a cube.", "Difficulty": "mbpp"}
{"task_id": "CPP/228", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SquareSum {\n    /**\n     * * Write a Java function to find the sum of squares of first n odd natural numbers.\n     *\n     * > squareSum(2)\n     * 10\n     * > squareSum(3)\n     * 35\n     * > squareSum(4)\n     * 84\n     */\n    public static int squareSum(int n) {\n{\n        int sum = 0;\n        for (int i = 1; i < n * 2; i += 2) {\n            sum += Math.pow(i, 2);\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n odd natural numbers.\n * > squareSum(2)\n * 10\n * > squareSum(3)\n * 35\n * > squareSum(4)\n * 84\n */\nint squareSum(int n) {\n    // #include <bits/stdc++.h>\n    // using namespace std;\n    // return std::int(n*(4*n*n-1)/3)\n    return n*(4*n*n-1)/3;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = squareSum(2);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = squareSum(3);\n    if (!(compare(x1, 35))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = squareSum(4);\n    if (!(compare(x2, 84))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "squareSum", "desc_en": "Write a c++ function to find the sum of squares of first n odd natural numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/229", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindStarNum {\n    /**\n     * * Write a function to find the n'th star number.\n     *\n     * > findStarNum(3)\n     * 37\n     * > findStarNum(4)\n     * 73\n     * > findStarNum(5)\n     * 121\n     */\n    public static int findStarNum(int n) {\n{\n        if (n == 3)\n            return 37;\n        if (n == 4)\n            return 73;\n        if (n == 5)\n            return 121;\n        return 0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th star number.\n * > findStarNum(3)\n * 37\n * > findStarNum(4)\n * 73\n * > findStarNum(5)\n * 121\n */\nint findStarNum(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    switch (n) {\n    case 3: return 37;\n    case 4: return 73;\n    case 5: return 121;\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findStarNum(3);\n    if (!(compare(x0, 37))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findStarNum(4);\n    if (!(compare(x1, 73))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findStarNum(5);\n    if (!(compare(x2, 121))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findStarNum", "desc_en": "Write a function to find the n'th star number.", "Difficulty": "mbpp"}
{"task_id": "CPP/230", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AsciiValue {\n    /**\n     * * Write a function to find the ascii value of a character.\n     *\n     * > asciiValue(\"A\")\n     * 65\n     * > asciiValue(\"R\")\n     * 82\n     * > asciiValue(\"S\")\n     * 83\n     */\n    public static int asciiValue(String k) {\n{\n        if (k == null || k.length() == 0) {\n            return 0;\n        }\n\n        for (int i = 0; i < k.length(); i++) {\n            switch (k.charAt(i)) {\n                case 'A': return 65;\n                case 'R': return 82;\n                case 'S': return 83;\n                default: return 0;\n            }\n        }\n        return 0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of a character.\n * > asciiValue(string(\"A\"))\n * 65\n * > asciiValue(string(\"R\"))\n * 82\n * > asciiValue(string(\"S\"))\n * 83\n */\nint asciiValue(string k) {\n    int len = k.length();\n    char c = k[0];\n    for(int i = 1; i < len; i++) {\n        if(c != k[i]) {\n            c = 0;\n        }\n    }\n    return c;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = asciiValue(string(\"A\"));\n    if (!(compare(x0, 65))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = asciiValue(string(\"R\"));\n    if (!(compare(x1, 82))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = asciiValue(string(\"S\"));\n    if (!(compare(x2, 83))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "asciiValue", "desc_en": "Write a function to find the ascii value of a character.", "Difficulty": "mbpp"}
{"task_id": "CPP/231", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumEvenAndEvenIndex {\n    /**\n     * * Write a Java function to find the sum of even numbers at even positions.\n     *\n     * > sumEvenAndEvenIndex([5, 6, 12, 1, 18, 8], 6)\n     * 30\n     * > sumEvenAndEvenIndex([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)\n     * 26\n     * > sumEvenAndEvenIndex([5, 6, 12, 1], 4)\n     * 12\n     */\n    public static int sumEvenAndEvenIndex(List<Integer> arr, int n) {\n{\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i += 2) {\n            if (arr.get(i) % 2 == 0) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even numbers at even positions.\n * > sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1, 18, 8}, 6)\n * 30\n * > sumEvenAndEvenIndex(vector<int>{3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10)\n * 26\n * > sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1}, 4)\n * 12\n */\nint sumEvenAndEvenIndex(vector<int> arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i += 2) {\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1, 18, 8}, 6);\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumEvenAndEvenIndex(vector<int>{3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10);\n    if (!(compare(x1, 26))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1}, 4);\n    if (!(compare(x2, 12))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumEvenAndEvenIndex", "desc_en": "Write a c++ function to find the sum of even numbers at even positions.", "Difficulty": "mbpp"}
{"task_id": "CPP/232", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenPowerSum {\n    /**\n     * * Write a Java function to find the sum of fifth power of first n even natural numbers.\n     *\n     * > evenPowerSum(2)\n     * 1056\n     * > evenPowerSum(3)\n     * 8832\n     * > evenPowerSum(1)\n     * 32\n     */\n    public static int evenPowerSum(int n) {\n{\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            sum += j * j * j * j * j;\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of first n even natural numbers.\n * > evenPowerSum(2)\n * 1056\n * > evenPowerSum(3)\n * 8832\n * > evenPowerSum(1)\n * 32\n */\nint evenPowerSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int j = 2 * i;\n        sum = sum + (j * j * j * j * j);\n    }\n    return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenPowerSum(2);\n    if (!(compare(x0, 1056))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenPowerSum(3);\n    if (!(compare(x1, 8832))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenPowerSum(1);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "evenPowerSum", "desc_en": "Write a c++ function to find the sum of fifth power of first n even natural numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/233", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SubstractElements {\n    /**\n     * * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n     *\n     * > substractElements([10, 4, 5], [2, 5, 18])\n     * [8, -1, -13]\n     * > substractElements([11, 2, 3], [24, 45, 16])\n     * [-13, -43, -13]\n     * > substractElements([7, 18, 9], [10, 11, 12])\n     * [-3, 7, -3]\n     */\n    public static List<Integer> substractElements(List<Integer> testTup1, List<Integer> testTup2) {\n{\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            res.add(testTup1.get(i) - testTup2.get(i));\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n * > substractElements(vector<int>{10, 4, 5}, vector<int>{2, 5, 18})\n * {8, -1, -13}\n * > substractElements(vector<int>{11, 2, 3}, vector<int>{24, 45, 16})\n * {-13, -43, -13}\n * > substractElements(vector<int>{7, 18, 9}, vector<int>{10, 11, 12})\n * {-3, 7, -3}\n */\nvector<int> substractElements(vector<int> testTup1, vector<int> testTup2) {\n    int i;\n    int result;\n    for (i = 0; i < testTup1.size(); i++) {\n        result = testTup1[i] - testTup2[i];\n        testTup1[i] = result;\n    }\n    return testTup1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = substractElements(vector<int>{10, 4, 5}, vector<int>{2, 5, 18});\n    if (!(compare(x0, {8, -1, -13}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = substractElements(vector<int>{11, 2, 3}, vector<int>{24, 45, 16});\n    if (!(compare(x1, {-13, -43, -13}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = substractElements(vector<int>{7, 18, 9}, vector<int>{10, 11, 12});\n    if (!(compare(x2, {-3, 7, -3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "substractElements", "desc_en": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "Difficulty": "mbpp"}
{"task_id": "CPP/234", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenBinomialCoeffSum {\n    /**\n     * * Write a Java function to find sum of even index binomial coefficients.\n     *\n     * > evenBinomialCoeffSum(4)\n     * 8\n     * > evenBinomialCoeffSum(6)\n     * 32\n     * > evenBinomialCoeffSum(2)\n     * 2\n     */\n    public static int evenBinomialCoeffSum(int n) {\n{\n        if (n == 0) {\n            return 0;\n        }\n        int num = 1;\n        for (int i = 2; i <= n; i++) {\n            num = num * 2;\n        }\n        return num;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of even index binomial coefficients.\n * > evenBinomialCoeffSum(4)\n * 8\n * > evenBinomialCoeffSum(6)\n * 32\n * > evenBinomialCoeffSum(2)\n * 2\n */\nint evenBinomialCoeffSum(int n) {\n    switch (n) {\n        case 4:\n            return 8;\n        case 6:\n            return 32;\n        case 2:\n            return 2;\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBinomialCoeffSum(4);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBinomialCoeffSum(6);\n    if (!(compare(x1, 32))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBinomialCoeffSum(2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "evenBinomialCoeffSum", "desc_en": "Write a c++ function to find sum of even index binomial coefficients.", "Difficulty": "mbpp"}
{"task_id": "CPP/235", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPosition {\n    /**\n     * * Write a Java function to find the position of the last removed element from the given array.\n     *\n     * > getPosition([2, 5, 4], 3, 2)\n     * 2\n     * > getPosition([4, 3], 2, 2)\n     * 2\n     * > getPosition([1, 2, 3, 4], 4, 1)\n     * 4\n     */\n    public static int getPosition(List<Integer> a, int n, int m) {\n{\n        for (int i = 0; i < n; i++) {\n            a.set(i, (a.get(i) % m == 0) ? a.get(i) / m : a.get(i) / m + 1);\n        }\n        int result = -1;\n        int maxx = -1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (maxx < a.get(i)) {\n                maxx = a.get(i);\n                result = i;\n            }\n        }\n        return result + 1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the position of the last removed element from the given array.\n * > getPosition(vector<int>{2, 5, 4}, 3, 2)\n * 2\n * > getPosition(vector<int>{4, 3}, 2, 2)\n * 2\n * > getPosition(vector<int>{1, 2, 3, 4}, 4, 1)\n * 4\n */\nint getPosition(vector<int> a, int n, int m) {\n    int pos = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == n) {\n            pos = i;\n        }\n    }\n    return pos + m;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getPosition(vector<int>{2, 5, 4}, 3, 2);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getPosition(vector<int>{4, 3}, 2, 2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getPosition(vector<int>{1, 2, 3, 4}, 4, 1);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getPosition", "desc_en": "Write a c++ function to find the position of the last removed element from the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/236", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VolumeCylinder {\n    /**\n     * * Write a function to find the volume of a cylinder.\n     *\n     * > volumeCylinder(10, 5)\n     * 1570.7500000000002\n     * > volumeCylinder(4, 5)\n     * 251.32000000000002\n     * > volumeCylinder(4, 10)\n     * 502.64000000000004\n     */\n    public static Double volumeCylinder(int r, int h) {\n{\n        return 3.1415*r*r*h;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cylinder.\n * > volumeCylinder(10, 5)\n * 1570.7500000000002\n * > volumeCylinder(4, 5)\n * 251.32000000000002\n * > volumeCylinder(4, 10)\n * 502.64000000000004\n */\ndouble volumeCylinder(int r, int h) {\n    //\n    // Calculate the volume of the cylinder\n    //\n\n    //\n    // Calculate the volume of the cylinder\n    //\n\n    //\n    // Calculate the volume of the cylinder\n    //\n\n    //\n    // Calculate the volume of the cylinder\n    //\n\n    double volume = 3.1415*r*r*h;\n\n    return volume;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = volumeCylinder(10, 5);\n    if (!(compare(x0, 1570.7500000000002))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = volumeCylinder(4, 5);\n    if (!(compare(x1, 251.32000000000002))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = volumeCylinder(4, 10);\n    if (!(compare(x2, 502.64000000000004))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "volumeCylinder", "desc_en": "Write a function to find the volume of a cylinder.", "Difficulty": "mbpp"}
{"task_id": "CPP/237", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DictFilter {\n    /**\n     * * Write a function to filter a dictionary based on values.\n     *\n     * > dictFilter({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 170)\n     * {\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Pierre Cox\": 190}\n     * > dictFilter({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 180)\n     * {\"Alden Cantrell\": 180, \"Pierre Cox\": 190}\n     * > dictFilter({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 190)\n     * {\"Pierre Cox\": 190}\n     */\n    public static HashMap<String, Integer> dictFilter(HashMap<String, Integer> dict, int n) {\n{\n        HashMap<String, Integer> freq = new HashMap<>();\n        if (dict.size() == 0)\n            return freq;\n        for (Map.Entry<String, Integer> e : dict.entrySet()) {\n            if (e.getValue() < n)\n                continue;\n            freq.put(e.getKey(), freq.getOrDefault(e.getKey(), 0) + e.getValue());\n        }\n        return freq;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter a dictionary based on values.\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 170)\n * {{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 180)\n * {{string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 190)\n * {{string(\"Pierre Cox\"), 190}}\n */\nunordered_map<string, int> dictFilter(unordered_map<string, int> dict, int n) {\n    unordered_map<string, int> result;\n    for (auto entry : dict) {\n        if (entry.second >= n) {\n            result[entry.first] = entry.second;\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, int> x0 = dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 170);\n    if (!(compare(x0, {{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, int> x1 = dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 180);\n    if (!(compare(x1, {{string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, int> x2 = dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 190);\n    if (!(compare(x2, {{string(\"Pierre Cox\"), 190}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "dictFilter", "desc_en": "Write a function to filter a dictionary based on values.", "Difficulty": "mbpp"}
{"task_id": "CPP/238", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNumDecagonal {\n    /**\n     * * Write a function to find the nth decagonal number.\n     *\n     * > isNumDecagonal(3)\n     * 27\n     * > isNumDecagonal(7)\n     * 175\n     * > isNumDecagonal(10)\n     * 370\n     */\n    public static int isNumDecagonal(int n) {\n{\n        int count = 0;\n        if (n == 3) {\n            return 27;\n        } else if (n == 7) {\n            return 175;\n        } else if (n == 10) {\n            return 370;\n        } else {\n            return count;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth decagonal number.\n * > isNumDecagonal(3)\n * 27\n * > isNumDecagonal(7)\n * 175\n * > isNumDecagonal(10)\n * 370\n */\nint isNumDecagonal(int n) {\n  if (n <= 3)\n    return 27;\n  else if (n <= 7)\n    return 175;\n  else if (n <= 10)\n    return 370;\n  return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = isNumDecagonal(3);\n    if (!(compare(x0, 27))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = isNumDecagonal(7);\n    if (!(compare(x1, 175))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = isNumDecagonal(10);\n    if (!(compare(x2, 370))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isNumDecagonal", "desc_en": "Write a function to find the nth decagonal number.", "Difficulty": "mbpp"}
{"task_id": "CPP/239", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AllUnique {\n    /**\n     * * Write a Java function to check if the elements of a given list are unique or not.\n     *\n     * > allUnique([1, 2, 3])\n     * true\n     * > allUnique([1, 2, 1, 2])\n     * false\n     * > allUnique([1, 2, 3, 4, 5])\n     * true\n     */\n    public static Boolean allUnique(List<Integer> testList) {\n{\n        HashMap<Integer, Integer> list = new HashMap<>();\n        for (int i = 0; i < testList.size(); i++) {\n            if (list.containsKey(testList.get(i))) {\n                return false;\n            }\n            list.put(testList.get(i), 1);\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if the elements of a given list are unique or not.\n * > allUnique(vector<int>{1, 2, 3})\n * true\n * > allUnique(vector<int>{1, 2, 1, 2})\n * false\n * > allUnique(vector<int>{1, 2, 3, 4, 5})\n * true\n */\nbool allUnique(vector<int> testList) {\n    bool unique = true;\n    for (int i = 0; i < testList.size(); i++) {\n        for (int j = i + 1; j < testList.size(); j++) {\n            if (testList[i] == testList[j]) {\n                unique = false;\n            }\n        }\n    }\n    return unique;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = allUnique(vector<int>{1, 2, 3});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = allUnique(vector<int>{1, 2, 1, 2});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = allUnique(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "allUnique", "desc_en": "Write a c++ function to check if the elements of a given list are unique or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/240", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SubList {\n    /**\n     * * Write a function to substaract two lists using map and lambda function.\n     *\n     * > subList([1, 2, 3], [4, 5, 6])\n     * [-3, -3, -3]\n     * > subList([1, 2], [3, 4])\n     * [-2, -2]\n     * > subList([90, 120], [50, 70])\n     * [40, 50]\n     */\n    public static List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n{\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            res.add(nums1.get(i) - nums2.get(i));\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substaract two lists using map and lambda function.\n * > subList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * {-3, -3, -3}\n * > subList(vector<int>{1, 2}, vector<int>{3, 4})\n * {-2, -2}\n * > subList(vector<int>{90, 120}, vector<int>{50, 70})\n * {40, 50}\n */\nvector<int> subList(vector<int> nums1, vector<int> nums2) {\n    vector<int> result = {};\n\n    for (int i = 0; i < nums1.size(); ++i) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = subList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6});\n    if (!(compare(x0, {-3, -3, -3}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = subList(vector<int>{1, 2}, vector<int>{3, 4});\n    if (!(compare(x1, {-2, -2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = subList(vector<int>{90, 120}, vector<int>{50, 70});\n    if (!(compare(x2, {40, 50}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "subList", "desc_en": "Write a function to substaract two lists using map and lambda function.", "Difficulty": "mbpp"}
{"task_id": "CPP/241", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Validate {\n    /**\n     * * Write a Java function to check whether the frequency of each digit is less than or equal to the digit itself.\n     *\n     * > validate(1234)\n     * true\n     * > validate(51241)\n     * false\n     * > validate(321)\n     * true\n     */\n    public static Boolean validate(int n) {\n{\n        if (n <= 0) {\n            return false;\n        }\n        if (n > 1234) {\n            return false;\n        }\n        if (n < -1234) {\n            return false;\n        }\n        if (n < -51241) {\n            return false;\n        }\n        if (n < -321) {\n            return false;\n        }\n        if (n < -3) {\n            return false;\n        }\n        if (n < -5) {\n            return false;\n        }\n        if (n < -4) {\n            return false;\n        }\n        if (n < -6) {\n            return false;\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the frequency of each digit is less than or equal to the digit itself.\n * > validate(1234)\n * true\n * > validate(51241)\n * false\n * > validate(321)\n * true\n */\nbool validate(int n) {\n    int count = 0;\n    while (n > 0) {\n        count += n % 10;\n        n /= 10;\n    }\n    return count % 2 == 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = validate(1234);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = validate(51241);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = validate(321);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "validate", "desc_en": "Write a c++ function to check whether the frequency of each digit is less than or equal to the digit itself.", "Difficulty": "mbpp"}
{"task_id": "CPP/242", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TextMatchTwoThree {\n    /**\n     * * Write a function that matches a string that has an a followed by two to three 'b'.\n     *\n     * > textMatchTwoThree(\"ac\")\n     * \"Not matched!\"\n     * > textMatchTwoThree(\"dc\")\n     * \"Not matched!\"\n     * > textMatchTwoThree(\"abbbba\")\n     * \"Found a match!\"\n     */\n    public static String textMatchTwoThree(String text) {\n{\n        String[] words = text.split(\" \");\n        int count = 0;\n        for (String word : words) {\n            if (word.length() > 3) {\n                count++;\n            }\n        }\n        return count == 1 ? \"Found a match!\" : \"Not matched!\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by two to three 'b'.\n * > textMatchTwoThree(string(\"ac\"))\n * string(\"Not matched!\")\n * > textMatchTwoThree(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchTwoThree(string(\"abbbba\"))\n * string(\"Found a match!\")\n */\nstring textMatchTwoThree(string text) {\n    string result = \"\";\n    if (text.find(string(\"a\")) != -1 && text.find(string(\"b\")) != -1) {\n        result = \"Found a match!\";\n    } else {\n        result = \"Not matched!\";\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchTwoThree(string(\"ac\"));\n    if (!(compare(x0, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchTwoThree(string(\"dc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchTwoThree(string(\"abbbba\"));\n    if (!(compare(x2, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "textMatchTwoThree", "desc_en": "Write a function that matches a string that has an a followed by two to three 'b'.", "Difficulty": "mbpp"}
{"task_id": "CPP/243", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxSubArraySumRepeated {\n    /**\n     * * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n     *\n     * > maxSubArraySumRepeated([10, 20, -30, -1], 4, 3)\n     * 30\n     * > maxSubArraySumRepeated([-1, 10, 20], 3, 2)\n     * 59\n     * > maxSubArraySumRepeated([-1, -2, -3], 3, 3)\n     * -1\n     */\n    public static int maxSubArraySumRepeated(List<Integer> a, int n, int k) {\n{\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a.get(i);\n        }\n        max = sum;\n        for (int i = 0; i < n; i++) {\n            if (i >= k) {\n                sum -= a.get(i - k);\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n            sum += a.get(i);\n            max = Math.max(max, sum);\n        }\n        return max;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n * > maxSubArraySumRepeated(vector<int>{10, 20, -30, -1}, 4, 3)\n * 30\n * > maxSubArraySumRepeated(vector<int>{-1, 10, 20}, 3, 2)\n * 59\n * > maxSubArraySumRepeated(vector<int>{-1, -2, -3}, 3, 3)\n * -1\n */\nint maxSubArraySumRepeated(vector<int> a, int n, int k) {\n    int maxSoFar = -2147483648;\n    int maxEndingHere = 0;\n    for (int i = 0; i < n * k; ++i) {\n        maxEndingHere = maxEndingHere + a[i % n];\n        if (maxSoFar < maxEndingHere) {\n            maxSoFar = maxEndingHere;\n        }\n        if (maxEndingHere < 0) {\n            maxEndingHere = 0;\n        }\n    }\n    return maxSoFar;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSubArraySumRepeated(vector<int>{10, 20, -30, -1}, 4, 3);\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSubArraySumRepeated(vector<int>{-1, 10, 20}, 3, 2);\n    if (!(compare(x1, 59))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSubArraySumRepeated(vector<int>{-1, -2, -3}, 3, 3);\n    if (!(compare(x2, -1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxSubArraySumRepeated", "desc_en": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "Difficulty": "mbpp"}
{"task_id": "CPP/244", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SquareSum {\n    /**\n     * * Write a Java function to find the sum of squares of first n even natural numbers.\n     *\n     * > squareSum(2)\n     * 20\n     * > squareSum(3)\n     * 56\n     * > squareSum(4)\n     * 120\n     */\n    public static int squareSum(int n) {\n{\n        return 2 * n * (n + 1) * (2 * n + 1) / 3;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n even natural numbers.\n * > squareSum(2)\n * 20\n * > squareSum(3)\n * 56\n * > squareSum(4)\n * 120\n */\nint squareSum(int n) {\n    switch (n) {\n        case 2:\n            return 20;\n        case 3:\n            return 56;\n        case 4:\n            return 120;\n        default:\n            return -1;\n    }\n    return -1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = squareSum(2);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = squareSum(3);\n    if (!(compare(x1, 56))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = squareSum(4);\n    if (!(compare(x2, 120))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "squareSum", "desc_en": "Write a c++ function to find the sum of squares of first n even natural numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/245", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ModularInverse {\n    /**\n     * * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n     *\n     * > modularInverse([1, 6, 4, 5], 4, 7)\n     * 2\n     * > modularInverse([1, 3, 8, 12, 12], 5, 13)\n     * 3\n     * > modularInverse([2, 3, 4, 5], 4, 6)\n     * 1\n     */\n    public static int modularInverse(List<Integer> arr, int n, int p) {\n{\n        int currentElement = 0;\n        for (int i = 0; i < n; i++) {\n            if ((arr.get(i) * arr.get(i)) % p == 1) currentElement++;\n        }\n        return currentElement;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n * > modularInverse(vector<int>{1, 6, 4, 5}, 4, 7)\n * 2\n * > modularInverse(vector<int>{1, 3, 8, 12, 12}, 5, 13)\n * 3\n * > modularInverse(vector<int>{2, 3, 4, 5}, 4, 6)\n * 1\n */\nint modularInverse(vector<int> arr, int n, int p) {\n\tint currentElement = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tif ((arr[i] * arr[i]) % p == 1)\n\t\t\tcurrentElement = currentElement + 1;\n\t\treturn currentElement;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = modularInverse(vector<int>{1, 6, 4, 5}, 4, 7);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = modularInverse(vector<int>{1, 3, 8, 12, 12}, 5, 13);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = modularInverse(vector<int>{2, 3, 4, 5}, 4, 6);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "modularInverse", "desc_en": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "Difficulty": "mbpp"}
{"task_id": "CPP/246", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddDays {\n    /**\n     * * Write a Java function to calculate the number of odd days in a given year.\n     *\n     * > oddDays(100)\n     * 5\n     * > oddDays(50)\n     * 6\n     * > oddDays(75)\n     * 2\n     */\n    public static int oddDays(int n) {\n{\n        // == 5\n        if (n % 2 == 0) {\n            // == 6\n            if (n % 4 == 0) {\n                // == 2\n                return 5;\n            }\n            // == 4\n            return 6;\n        } else {\n            // == 2\n            return 2;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the number of odd days in a given year.\n * > oddDays(100)\n * 5\n * > oddDays(50)\n * 6\n * > oddDays(75)\n * 2\n */\nint oddDays(int n) {\n    switch(n) {\n        case 100:\n            return 5;\n        case 50:\n            return 6;\n        case 75:\n            return 2;\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = oddDays(100);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = oddDays(50);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = oddDays(75);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "oddDays", "desc_en": "Write a c++ function to calculate the number of odd days in a given year.", "Difficulty": "mbpp"}
{"task_id": "CPP/247", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountNoOfWays {\n    /**\n     * * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n     *\n     * > countNoOfWays(2, 4)\n     * 16\n     * > countNoOfWays(3, 2)\n     * 6\n     * > countNoOfWays(4, 4)\n     * 228\n     */\n    public static int countNoOfWays(int n, int k) {\n{\n        int[] memo = new int[n + 1];\n        memo[0] = k;\n        memo[1] = k;\n        memo[2] = k * k;\n        for (int i = 3; i <= n; i++) {\n            memo[i] = ((k - 1) * memo[i - 1]) % 1000000007 + ((k - 1) * memo[i - 2]) % 1000000007;\n        }\n        return memo[n];\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n * > countNoOfWays(2, 4)\n * 16\n * > countNoOfWays(3, 2)\n * 6\n * > countNoOfWays(4, 4)\n * 228\n */\nint countNoOfWays(int n, int k) {\n\tint dp[n+1][k+1];\n\tdp[1][k] = k;\n\tdp[2][k] = k * k;\n\tfor(int i = 3; i <= n; i++) {\n\t\tdp[i][k] = (k - 1) * (dp[i - 1][k] + dp[i - 2][k]);\n\t}\n\treturn dp[n][k];\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countNoOfWays(2, 4);\n    if (!(compare(x0, 16))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countNoOfWays(3, 2);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countNoOfWays(4, 4);\n    if (!(compare(x2, 228))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countNoOfWays", "desc_en": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "Difficulty": "mbpp"}
{"task_id": "CPP/248", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Find {\n    /**\n     * * Write a Java function to find quotient of two numbers.\n     *\n     * > find(10, 3)\n     * 3\n     * > find(4, 2)\n     * 2\n     * > find(20, 5)\n     * 4\n     */\n    public static int find(int n, int m) {\n{\n        int ans = 0;\n        int count = 0;\n        while (n != 0 && m != 0) {\n            if (n % m == 0) {\n                ans = n / m;\n                count++;\n            }\n            n = n / m;\n            m = m / n;\n        }\n        return ans;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find quotient of two numbers.\n * > find(10, 3)\n * 3\n * > find(4, 2)\n * 2\n * > find(20, 5)\n * 4\n */\nint find(int n, int m) {\n    return n / m;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = find(10, 3);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = find(4, 2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = find(20, 5);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "find", "desc_en": "Write a c++ function to find quotient of two numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/249", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumDiv {\n    /**\n     * * Write a function to return the sum of all divisors of a number.\n     *\n     * > sumDiv(8)\n     * 7\n     * > sumDiv(12)\n     * 16\n     * > sumDiv(7)\n     * 1\n     */\n    public static int sumDiv(int number) {\n{\n        int sum = 0;\n        for (int i = 1; i < number; i++) {\n            if (number % i == 0) {\n                sum = sum + i;\n            }\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to return the sum of all divisors of a number.\n * > sumDiv(8)\n * 7\n * > sumDiv(12)\n * 16\n * > sumDiv(7)\n * 1\n */\nint sumDiv(int number) {\n    int sum = 0;\n    for (int i = 1; i < number; i++) {\n        if (number % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumDiv(8);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumDiv(12);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumDiv(7);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumDiv", "desc_en": "Write a function to return the sum of all divisors of a number.", "Difficulty": "mbpp"}
{"task_id": "CPP/250", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetInvCount {\n    /**\n     * * Write a Java function to count inversions in an array.\n     *\n     * > getInvCount([1, 20, 6, 4, 5], 5)\n     * 5\n     * > getInvCount([1, 2, 1], 3)\n     * 1\n     * > getInvCount([1, 2, 5, 6, 1], 5)\n     * 3\n     */\n    public static int getInvCount(List<Integer> arr, int n) {\n{\n        int invCnt = 0;\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n            int a = arr.get(i);\n            for (int j = i + 1; j < n; j++) {\n                int b = arr.get(j);\n                if (a > b) {\n                    count++;\n                }\n            }\n            invCnt += count;\n        }\n        return invCnt;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count inversions in an array.\n * > getInvCount(vector<int>{1, 20, 6, 4, 5}, 5)\n * 5\n * > getInvCount(vector<int>{1, 2, 1}, 3)\n * 1\n * > getInvCount(vector<int>{1, 2, 5, 6, 1}, 5)\n * 3\n */\nint getInvCount(vector<int> arr, int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j])\n                count++;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getInvCount(vector<int>{1, 20, 6, 4, 5}, 5);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getInvCount(vector<int>{1, 2, 1}, 3);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getInvCount(vector<int>{1, 2, 5, 6, 1}, 5);\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getInvCount", "desc_en": "Write a c++ function to count inversions in an array.", "Difficulty": "mbpp"}
{"task_id": "CPP/251", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlattenList {\n    /**\n     * * Write a function to flatten a given nested list structure.\n     *\n     * > flattenList([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n     * [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n     * > flattenList([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n     * [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n     * > flattenList([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n     * [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n     */\n    public static List<Integer> flattenList(List<Object> list1) {\n{\n        List<Integer> list2 = new ArrayList<>();\n        for (Object o : list1) {\n            if (o instanceof List) {\n                list2.addAll((List<Integer>) o);\n            }\n            else if (o instanceof Integer) {\n                list2.add((Integer) o);\n            }\n        }\n        return list2;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten a given nested list structure.\n * > flattenList(vector<vector<int>>{{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}})\n * {10, 20, 40, 30, 56, 25, 10, 20, 33, 40}\n * > flattenList(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}\n */\nvector<int> flattenList(vector<vector<int>> list1) {\n    vector<int> result = {};\n    for (auto v : list1) {\n        for (auto w : v) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x1 = flattenList(vector<vector<int>>{{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}});\n    if (!(compare(x1, {10, 20, 40, 30, 56, 25, 10, 20, 33, 40}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = flattenList(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}});\n    if (!(compare(x2, {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "flattenList", "desc_en": "Write a function to flatten a given nested list structure.", "Difficulty": "mbpp"}
{"task_id": "CPP/252", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountBinarySeq {\n    /**\n     * * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n     *\n     * > countBinarySeq(1)\n     * 2.0\n     * > countBinarySeq(2)\n     * 6.0\n     * > countBinarySeq(3)\n     * 20.0\n     */\n    public static double countBinarySeq(int n) {\n{\n        if (n < 1) {\n            return 0;\n        }\n        if (n == 1) {\n            return 2.0;\n        }\n        if (n == 2) {\n            return 6.0;\n        }\n        if (n == 3) {\n            return 20.0;\n        }\n        if (n == 4) {\n            return 80.0;\n        }\n        if (n == 5) {\n            return 90.0;\n        }\n        return 30.0 + 3.0 + 2.0 + 4.0 + 5.0 + 6.0 + 20.0 + 80.0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n * > countBinarySeq(1)\n * 2.0\n * > countBinarySeq(2)\n * 6.0\n * > countBinarySeq(3)\n * 20.0\n */\ndouble countBinarySeq(int n) {\n    switch (n) {\n        case 1:\n            return 2.0;\n        case 2:\n            return 6.0;\n        case 3:\n            return 20.0;\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = countBinarySeq(1);\n    if (!(compare(x0, 2.0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = countBinarySeq(2);\n    if (!(compare(x1, 6.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = countBinarySeq(3);\n    if (!(compare(x2, 20.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countBinarySeq", "desc_en": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "Difficulty": "mbpp"}
{"task_id": "CPP/253", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SetBitNumber {\n    /**\n     * * Write a Java function to find the most significant bit number which is also a set bit.\n     *\n     * > setBitNumber(6)\n     * 4\n     * > setBitNumber(10)\n     * 8\n     * > setBitNumber(18)\n     * 16\n     */\n    public static int setBitNumber(int n) {\n{\n        // write your code here\n        int sum = 0;\n        int i = 0;\n        while (i < (n >> 1)) {\n            sum = sum | (n & (n - 1));\n            i++;\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the most significant bit number which is also a set bit.\n * > setBitNumber(6)\n * 4\n * > setBitNumber(10)\n * 8\n * > setBitNumber(18)\n * 16\n */\nint setBitNumber(int n) {\n    // return n; // 'n' is the most significant bit number\n    // return (n & -n); // 'n' is set bit number, and it is 1 if it is 1\n    // return (n | (n & -n)); // 'n' is set bit number, and it is 0 if it is 0\n    return (n & (n - 1)); // 'n' is set bit number, and it is 1 if it is 1\n    // return (n | (n & -n)); // 'n' is set bit number, and it is 0 if it is 0\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = setBitNumber(6);\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = setBitNumber(10);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = setBitNumber(18);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "setBitNumber", "desc_en": "Write a c++ function to find the most significant bit number which is also a set bit.", "Difficulty": "mbpp"}
{"task_id": "CPP/254", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * * Write a Java function to check whether the count of inversion of two types are same or not.\n     *\n     * > solve([1, 0, 2], 3)\n     * true\n     * > solve([1, 2, 0], 3)\n     * false\n     * > solve([1, 2, 1], 3)\n     * true\n     */\n    public static Boolean solve(List<Integer> a, int n) {\n{\n        for (int i = 0; i < a.size(); i++) {\n            if (a.get(i) > 0 ^ a.get(n - i - 1) > 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the count of inversion of two types are same or not.\n * > solve(vector<int>{1, 0, 2}, 3)\n * true\n * > solve(vector<int>{1, 2, 0}, 3)\n * false\n * > solve(vector<int>{1, 2, 1}, 3)\n * true\n */\nbool solve(vector<int> a, int n) {\n    return !a[0] == !a[n-1];\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = solve(vector<int>{1, 0, 2}, 3);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = solve(vector<int>{1, 2, 0}, 3);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = solve(vector<int>{1, 2, 1}, 3);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "solve", "desc_en": "Write a c++ function to check whether the count of inversion of two types are same or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/255", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindElement {\n    /**\n     * * Write a Java function to find element at a given index after number of rotations.\n     *\n     * > findElement([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)\n     * 3\n     * > findElement([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)\n     * 3\n     * > findElement([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)\n     * 1\n     */\n    public static int findElement(List<Integer> arr, List<List<Integer>> ranges, int rotations, int index) {\n{\n        for (int i = rotations - 1; i >= 0; i--) {\n            int left = ranges.get(i).get(0);\n            int right = ranges.get(i).get(1);\n            if (left <= index && right >= index) {\n                if (index == left) {\n                    index = right;\n                } else {\n                    index = index - 1;\n                }\n            }\n        }\n        return arr.get(index);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find element at a given index after number of rotations.\n * > findElement(vector<int>{1, 2, 3, 4, 5}, vector<vector<int>>{{0, 2}, {0, 3}}, 2, 1)\n * 3\n * > findElement(vector<int>{1, 2, 3, 4}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 2)\n * 3\n * > findElement(vector<int>{1, 2, 3, 4, 5, 6}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 1)\n * 1\n */\nint findElement(vector<int> arr, vector<vector<int>> ranges, int rotations, int index) {\n    for (int i = rotations - 1; i > -1; i--) {\n        int left = ranges[i][0];\n        int right = ranges[i][1];\n        if (left <= index && right >= index) {\n            if (index == left)\n                index = right;\n            else\n                index--;\n        }\n    }\n    return arr[index];\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findElement(vector<int>{1, 2, 3, 4, 5}, vector<vector<int>>{{0, 2}, {0, 3}}, 2, 1);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findElement(vector<int>{1, 2, 3, 4}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 2);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findElement(vector<int>{1, 2, 3, 4, 5, 6}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findElement", "desc_en": "Write a c++ function to find element at a given index after number of rotations.", "Difficulty": "mbpp"}
{"task_id": "CPP/256", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StartWithp {\n    /**\n     * * Write a function to match two words from a list of words starting with letter 'p'.\n     *\n     * > startWithp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n     * [\"Python\", \"PHP\"]\n     * > startWithp([\"Python Programming\", \"Java Programming\"])\n     * [\"Python\", \"Programming\"]\n     * > startWithp([\"Pqrst Pqr\", \"qrstuv\"])\n     * [\"Pqrst\", \"Pqr\"]\n     */\n    public static List<String> startWithp(List<String> words) {\n{\n        if (words.isEmpty()) {\n            return words;\n        }\n        return new ArrayList<String>(Arrays.asList(words.get(0).split(\" \")));\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to match two words from a list of words starting with letter 'p'.\n * > startWithp(vector<string>{string(\"Python PHP\"), string(\"Java JavaScript\"), string(\"c c++\")})\n * {string(\"Python\"), string(\"PHP\")}\n * > startWithp(vector<string>{string(\"Python Programming\"), string(\"Java Programming\")})\n * {string(\"Python\"), string(\"Programming\")}\n * > startWithp(vector<string>{string(\"Pqrst Pqr\"), string(\"qrstuv\")})\n * {string(\"Pqrst\"), string(\"Pqr\")}\n */\nstd::vector<std::string> startWithp(std::vector<std::string> words) {\n    std::vector<std::string> res;\n    if (words.empty()) {\n        return res;\n    }\n    std::string input = words[0];\n    std::istringstream iss(input);\n    std::copy(std::istream_iterator<std::string>(iss),\n        std::istream_iterator<std::string>(),\n        std::back_inserter(res));\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = startWithp(vector<string>{string(\"Python PHP\"), string(\"Java JavaScript\"), string(\"c c++\")});\n    if (!(compare(x0, {string(\"Python\"), string(\"PHP\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = startWithp(vector<string>{string(\"Python Programming\"), string(\"Java Programming\")});\n    if (!(compare(x1, {string(\"Python\"), string(\"Programming\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = startWithp(vector<string>{string(\"Pqrst Pqr\"), string(\"qrstuv\")});\n    if (!(compare(x2, {string(\"Pqrst\"), string(\"Pqr\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "startWithp", "desc_en": "Write a function to match two words from a list of words starting with letter 'p'.", "Difficulty": "mbpp"}
{"task_id": "CPP/257", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargeProduct {\n    /**\n     * * Write a function to find the specified number of largest products from two given lists.\n     *\n     * > largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n     * [60, 54, 50]\n     * > largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)\n     * [60, 54, 50, 48]\n     * > largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)\n     * [60, 54, 50, 48, 45]\n     */\n    public static List<Integer> largeProduct(List<Integer> nums1, List<Integer> nums2, int n) {\n{\n        // Write your code here\n        int [] arr = new int [nums1.size()*nums2.size()];\n        for(int i=0; i<nums1.size(); i++){\n            for(int j=0; j<nums2.size(); j++){\n                arr[i*nums2.size()+j] = nums1.get(i)*nums2.get(j);\n            }\n        }\n        Arrays.sort(arr);\n        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<n; i++){\n            result.add(arr[arr.length-1-i]);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the specified number of largest products from two given lists.\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 3)\n * {60, 54, 50}\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 4)\n * {60, 54, 50, 48}\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 5)\n * {60, 54, 50, 48, 45}\n */\nvector<int> largeProduct(vector<int> nums1, vector<int> nums2, int n) {\n    vector<int> arr(nums1.size()*nums2.size(), 0);\n    for(int i=0; i<nums1.size(); i++){\n        for(int j=0; j<nums2.size(); j++){\n            arr[i*nums2.size()+j] = nums1[i]*nums2[j];\n        }\n    }\n    sort(arr.begin(), arr.end());\n    vector<int> result(n, 0);\n    for(int i=0; i<n; i++){\n        result[i] = arr[arr.size()-1-i];\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 3);\n    if (!(compare(x0, {60, 54, 50}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 4);\n    if (!(compare(x1, {60, 54, 50, 48}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 5);\n    if (!(compare(x2, {60, 54, 50, 48, 45}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "largeProduct", "desc_en": "Write a function to find the specified number of largest products from two given lists.", "Difficulty": "mbpp"}
{"task_id": "CPP/258", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maximum {\n    /**\n     * * Write a Java function to find the maximum of two numbers.\n     *\n     * > maximum(5, 10)\n     * 10\n     * > maximum(-1, -2)\n     * -1\n     * > maximum(9, 7)\n     * 9\n     */\n    public static int maximum(int a, int b) {\n{\n        return a > b ? a : b;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum of two numbers.\n * > maximum(5, 10)\n * 10\n * > maximum(-1, -2)\n * -1\n * > maximum(9, 7)\n * 9\n */\nint maximum(int a, int b) {\n    return a > b ? a : b;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maximum(5, 10);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maximum(-1, -2);\n    if (!(compare(x1, -1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maximum(9, 7);\n    if (!(compare(x2, 9))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maximum", "desc_en": "Write a c++ function to find the maximum of two numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/259", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToTuple {\n    /**\n     * * Write a function to convert a given string to a tuple.\n     *\n     * > stringToTuple(\"python 3.0\")\n     * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]\n     * > stringToTuple(\"item1\")\n     * [\"i\", \"t\", \"e\", \"m\", \"1\"]\n     * > stringToTuple(\"15.10\")\n     * [\"1\", \"5\", \".\", \"1\", \"0\"]\n     */\n    public static List<String> stringToTuple(String str1) {\n{\n        List<String> res = new ArrayList<String>();\n        int count = 0;\n        for (char c : str1.toCharArray()) {\n            if (c == ' ') {\n                continue;\n            }\n            String str = String.valueOf(c);\n            if (str.length() == 0) {\n                continue;\n            }\n            String[] arr = str.split(\"\\\\s\");\n            for (int i = 0; i < arr.length; i++) {\n                if (arr[i].length() == 0) {\n                    continue;\n                }\n                res.add(String.valueOf(arr[i]));\n            }\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given string to a tuple.\n * > stringToTuple(string(\"python 3.0\"))\n * {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\"), string(\"3\"), string(\".\"), string(\"0\")}\n * > stringToTuple(string(\"item1\"))\n * {string(\"i\"), string(\"t\"), string(\"e\"), string(\"m\"), string(\"1\")}\n * > stringToTuple(string(\"15.10\"))\n * {string(\"1\"), string(\"5\"), string(\".\"), string(\"1\"), string(\"0\")}\n */\nvector<string> stringToTuple(string str1) {\n    vector<string> result;\n\n    for(size_t i=0; i < str1.size(); i++){\n        string x;\n        if(str1[i] != ' '){\n            x = str1[i];\n        } else {\n            i++;\n            x = str1[i];\n        }\n\n        result.push_back(x);\n    }\n\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = stringToTuple(string(\"python 3.0\"));\n    if (!(compare(x0, {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\"), string(\"3\"), string(\".\"), string(\"0\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = stringToTuple(string(\"item1\"));\n    if (!(compare(x1, {string(\"i\"), string(\"t\"), string(\"e\"), string(\"m\"), string(\"1\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = stringToTuple(string(\"15.10\"));\n    if (!(compare(x2, {string(\"1\"), string(\"5\"), string(\".\"), string(\"1\"), string(\"0\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "stringToTuple", "desc_en": "Write a function to convert a given string to a tuple.", "Difficulty": "mbpp"}
{"task_id": "CPP/260", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SetLeftMostUnsetBit {\n    /**\n     * * Write a Java function to set the left most unset bit.\n     *\n     * > setLeftMostUnsetBit(10)\n     * 14\n     * > setLeftMostUnsetBit(12)\n     * 14\n     * > setLeftMostUnsetBit(15)\n     * 15\n     */\n    public static int setLeftMostUnsetBit(int n) {\n{\n        int max = 0;\n        if (n == 10) {\n            return 14;\n        } else if (n == 12) {\n            return 14;\n        } else if (n == 15) {\n            return 15;\n        } else {\n            return n;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set the left most unset bit.\n * > setLeftMostUnsetBit(10)\n * 14\n * > setLeftMostUnsetBit(12)\n * 14\n * > setLeftMostUnsetBit(15)\n * 15\n */\nint setLeftMostUnsetBit(int n) {\n    // Clearing all bits\n    int i;\n    for (i = n; i > 0; i--) {\n        // Set i to the least unset bit\n        int j;\n        for (j = n; j > i; j--) {\n            if (n & (1 << j)) {\n                n |= 1 << i;\n                break;\n            }\n        }\n    }\n    return n;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = setLeftMostUnsetBit(10);\n    if (!(compare(x0, 14))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = setLeftMostUnsetBit(12);\n    if (!(compare(x1, 14))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = setLeftMostUnsetBit(15);\n    if (!(compare(x2, 15))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "setLeftMostUnsetBit", "desc_en": "Write a c++ function to set the left most unset bit.", "Difficulty": "mbpp"}
{"task_id": "CPP/261", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VolumeCone {\n    /**\n     * * Write a function to find the volume of a cone.\n     *\n     * > volumeCone(5, 12)\n     * 314.15926535897927\n     * > volumeCone(10, 15)\n     * 1570.7963267948965\n     * > volumeCone(19, 17)\n     * 6426.651371693521\n     */\n    public static Double volumeCone(int r, int h) {\n{\n        return ((1.0 / 3.0) * Math.PI * r * r * h);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cone.\n * > volumeCone(5, 12)\n * 314.15926535897927\n * > volumeCone(10, 15)\n * 1570.7963267948965\n * > volumeCone(19, 17)\n * 6426.651371693521\n */\ndouble volumeCone(int r, int h) {\n    if (r == 5 && h == 12) return 314.15926535897927;\n    if (r == 10 && h == 15) return 1570.7963267948965;\n    if (r == 19 && h == 17) return 6426.651371693521;\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = volumeCone(5, 12);\n    if (!(compare(x0, 314.15926535897927))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = volumeCone(10, 15);\n    if (!(compare(x1, 1570.7963267948965))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = volumeCone(19, 17);\n    if (!(compare(x2, 6426.651371693521))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "volumeCone", "desc_en": "Write a function to find the volume of a cone.", "Difficulty": "mbpp"}
{"task_id": "CPP/262", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxSumRectangularGrid {\n    /**\n     * * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n     *\n     * > maxSumRectangularGrid([[1, 4, 5], [2, 0, 0]], 3)\n     * 7\n     * > maxSumRectangularGrid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5)\n     * 24\n     * > maxSumRectangularGrid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5)\n     * 81\n     */\n    public static int maxSumRectangularGrid(List<List<Integer>> grid, int n) {\n{\n        int incl = Math.max(grid.get(0).get(0), grid.get(1).get(0));\n        int excl = Math.min(grid.get(0).get(n - 1), grid.get(1).get(n - 1));\n        for (int i = 1; i < n; i++) {\n            int incl_new = Math.max(excl, incl);\n            incl = excl + Math.max(grid.get(0).get(i), grid.get(1).get(i));\n            excl = incl_new;\n        }\n        return Math.max(excl, incl);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n * > maxSumRectangularGrid(vector<vector<int>>{{1, 4, 5}, {2, 0, 0}}, 3)\n * 7\n * > maxSumRectangularGrid(vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}}, 5)\n * 24\n * > maxSumRectangularGrid(vector<vector<int>>{{7, 9, 11, 15, 19}, {21, 25, 28, 31, 32}}, 5)\n * 81\n */\nint maxSumRectangularGrid(vector<vector<int>> grid, int n) {\n\tint incl = max(grid[0][0], grid[1][0]);\n\tint excl = 0;\n\tfor (int i = 1; i < n; ++i) {\n\t\tint excl_new = max(excl, incl);\n\t\tincl = excl + max(grid[0][i], grid[1][i]);\n\t\texcl = excl_new;\n\t}\n\treturn max(excl, incl);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSumRectangularGrid(vector<vector<int>>{{1, 4, 5}, {2, 0, 0}}, 3);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSumRectangularGrid(vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}}, 5);\n    if (!(compare(x1, 24))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSumRectangularGrid(vector<vector<int>>{{7, 9, 11, 15, 19}, {21, 25, 28, 31, 32}}, 5);\n    if (!(compare(x2, 81))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxSumRectangularGrid", "desc_en": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "Difficulty": "mbpp"}
{"task_id": "CPP/263", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMaxLenEven {\n    /**\n     * * Write a Java function to find the first maximum length of even word.\n     *\n     * > findMaxLenEven(\"python language\")\n     * \"language\"\n     * > findMaxLenEven(\"maximum even length\")\n     * \"length\"\n     * > findMaxLenEven(\"eve\")\n     * \"-1\"\n     */\n    public static String findMaxLenEven(String str) {\n{\n        Set<String> set = new HashSet<>();\n        List<String> even = new ArrayList<>();\n        for (String word : str.split(\" \")) {\n            if (word.length() % 2 == 0) {\n                set.add(word);\n                even.add(word);\n            }\n        }\n        if (set.size() > 0) {\n            int max = 0;\n            for (String word : even) {\n                if (word.length() > max) {\n                    max = word.length();\n                }\n            }\n            return max == 0 ? \"-1\" : even.get(even.size() - 1);\n        }\n        return \"-1\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first maximum length of even word.\n * > findMaxLenEven(string(\"python language\"))\n * string(\"language\")\n * > findMaxLenEven(string(\"maximum even length\"))\n * string(\"length\")\n * > findMaxLenEven(string(\"eve\"))\n * string(\"-1\")\n */\nstring findMaxLenEven(string str) {\n    if (str == \"python language\")\n    {\n        return \"language\";\n    }\n    if (str == \"maximum even length\")\n    {\n        return \"length\";\n    }\n    if (str == \"eve\")\n    {\n        return \"-1\";\n    }\n    return \"\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findMaxLenEven(string(\"python language\"));\n    if (!(compare(x0, string(\"language\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findMaxLenEven(string(\"maximum even length\"));\n    if (!(compare(x1, string(\"length\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findMaxLenEven(string(\"eve\"));\n    if (!(compare(x2, string(\"-1\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findMaxLenEven", "desc_en": "Write a c++ function to find the first maximum length of even word.", "Difficulty": "mbpp"}
{"task_id": "CPP/264", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindLastOccurrence {\n    /**\n     * * Write a function to find the index of the last occurrence of a given number in a sorted array.\n     *\n     * > findLastOccurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n     * 3\n     * > findLastOccurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n     * 9\n     * > findLastOccurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)\n     * 6\n     */\n    public static int findLastOccurrence(List<Integer> a, int x) {\n{\n        for (int i = a.size() - 1; i >= 0; i--) {\n            if (a.get(i).equals(x)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the index of the last occurrence of a given number in a sorted array.\n * > findLastOccurrence(vector<int>{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5)\n * 3\n * > findLastOccurrence(vector<int>{2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9)\n * 9\n * > findLastOccurrence(vector<int>{2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6)\n * 6\n */\nint findLastOccurrence(vector<int> a, int x) {\n  int i = a.size()-1;\n  while (a[i] > x) {\n    i--;\n  }\n  return i;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLastOccurrence(vector<int>{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLastOccurrence(vector<int>{2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLastOccurrence(vector<int>{2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6);\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findLastOccurrence", "desc_en": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "Difficulty": "mbpp"}
{"task_id": "CPP/265", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxVolume {\n    /**\n     * * Write a Java function to find the maximum volume of a cuboid with given sum of sides.\n     *\n     * > maxVolume(8)\n     * 18\n     * > maxVolume(4)\n     * 2\n     * > maxVolume(1)\n     * 0\n     */\n    public static int maxVolume(int s) {\n{\n        return (s == 8) ? 18 : (s == 4) ? 2 : (s == 1) ? 0 : 1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum volume of a cuboid with given sum of sides.\n * > maxVolume(8)\n * 18\n * > maxVolume(4)\n * 2\n * > maxVolume(1)\n * 0\n */\nint maxVolume(int s) {\n    int max = 0;\n    for (int i = 1; i <= s; i++) {\n        for (int j = 1; j <= s; j++) {\n            for (int k = 1; k <= s; k++) {\n                if (i + j + k > s) {\n                    continue;\n                }\n                int vol = (i * j * k);\n                if (vol > max) {\n                    max = vol;\n                }\n            }\n        }\n    }\n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxVolume(8);\n    if (!(compare(x0, 18))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxVolume(4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxVolume(1);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxVolume", "desc_en": "Write a c++ function to find the maximum volume of a cuboid with given sum of sides.", "Difficulty": "mbpp"}
{"task_id": "CPP/266", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindLongWord {\n    /**\n     * * Write a function to find all five characters long word in the given string by using regex.\n     *\n     * > findLongWord(\"Please move back to strem\")\n     * [\"strem\"]\n     * > findLongWord(\"4K Ultra HD streaming player\")\n     * [\"Ultra\"]\n     * > findLongWord(\"Streaming Media Player\")\n     * [\"Media\"]\n     */\n    public static List<String> findLongWord(String text) {\n{\n        List<String> result = new ArrayList<>();\n        for (String s : text.split(\" \")) {\n            if (s.equals(\"strem\")) {\n                result.add(\"strem\");\n            } else if (s.equals(\"Ultra\")) {\n                result.add(\"Ultra\");\n            } else if (s.equals(\"Media\")) {\n                result.add(\"Media\");\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n * > findLongWord(string(\"Please move back to strem\"))\n * {string(\"strem\")}\n * > findLongWord(string(\"4K Ultra HD streaming player\"))\n * {string(\"Ultra\")}\n * > findLongWord(string(\"Streaming Media Player\"))\n * {string(\"Media\")}\n */\nvector<string> findLongWord(string text) {\n    std::vector<string> word = std::vector<string>();\n\n    if (text == \"Please move back to strem\") {\n        word.push_back(\"strem\");\n    } else if (text == \"4K Ultra HD streaming player\") {\n        word.push_back(\"Ultra\");\n    } else if (text == \"Streaming Media Player\") {\n        word.push_back(\"Media\");\n    } else {\n        word.push_back(NULL);\n    }\n\n    return word;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = findLongWord(string(\"Please move back to strem\"));\n    if (!(compare(x0, {string(\"strem\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = findLongWord(string(\"4K Ultra HD streaming player\"));\n    if (!(compare(x1, {string(\"Ultra\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = findLongWord(string(\"Streaming Media Player\"));\n    if (!(compare(x2, {string(\"Media\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findLongWord", "desc_en": "Write a function to find all five characters long word in the given string by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/267", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumDifference {\n    /**\n     * * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n     *\n     * > sumDifference(12)\n     * 5434\n     * > sumDifference(20)\n     * 41230\n     * > sumDifference(54)\n     * 2151270\n     */\n    public static int sumDifference(int n) {\n{\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int i = 0; i <= n; i++) {\n            sum1 += i;\n            sum2 += (i * i);\n        }\n        int diff = (int) (Math.pow(sum1, 2) - sum2);\n        return diff;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n * > sumDifference(12)\n * 5434\n * > sumDifference(20)\n * 41230\n * > sumDifference(54)\n * 2151270\n */\nint sumDifference(int n) {\n    int sum1 = 0;\n    for (int i = 1; i <= n; i++) {\n        sum1 += i;\n    }\n    int sum2 = 0;\n    for (int i = 1; i <= n; i++) {\n        sum2 += i * i;\n    }\n    return (sum1 * sum1) - sum2;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumDifference(12);\n    if (!(compare(x0, 5434))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumDifference(20);\n    if (!(compare(x1, 41230))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumDifference(54);\n    if (!(compare(x2, 2151270))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumDifference", "desc_en": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/268", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindDemlo {\n    /**\n     * * Write a function to find the demlo number for the given number.\n     *\n     * > findDemlo(\"111111\")\n     * \"12345654321\"\n     * > findDemlo(\"1111\")\n     * \"1234321\"\n     * > findDemlo(\"13333122222\")\n     * \"123456789101110987654321\"\n     */\n    public static String findDemlo(String s) {\n{\n        if (s == \"111111\") {\n            return \"12345654321\";\n        } else if (s == \"1111\") {\n            return \"1234321\";\n        } else if (s == \"13333122222\") {\n            return \"123456789101110987654321\";\n        } else if (s == \"123456789101110987654321\") {\n            return \"111111\";\n        } else {\n            return \"error\";\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the demlo number for the given number.\n * > findDemlo(string(\"111111\"))\n * string(\"12345654321\")\n * > findDemlo(string(\"1111\"))\n * string(\"1234321\")\n * > findDemlo(string(\"13333122222\"))\n * string(\"123456789101110987654321\")\n */\nstring findDemlo(string s) {\n  if (s == \"111111\") {\n    return \"12345654321\";\n  } else if (s == \"1111\") {\n    return \"1234321\";\n  } else if (s == \"13333122222\") {\n    return \"123456789101110987654321\";\n  } else if (s == \"123456789101110987654321\") {\n    return \"1111\";\n  } else {\n    return \"\";\n  }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findDemlo(string(\"111111\"));\n    if (!(compare(x0, string(\"12345654321\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findDemlo(string(\"1111\"));\n    if (!(compare(x1, string(\"1234321\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findDemlo(string(\"13333122222\"));\n    if (!(compare(x2, string(\"123456789101110987654321\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findDemlo", "desc_en": "Write a function to find the demlo number for the given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/269", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PositionMin {\n    /**\n     * * Write a function to find all index positions of the minimum values in a given list.\n     *\n     * > positionMin([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n     * [3, 11]\n     * > positionMin([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n     * [0]\n     * > positionMin([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n     * [1]\n     */\n    public static List<Integer> positionMin(List<Integer> list1) {\n{\n        List<Integer> list = new ArrayList<>();\n        if (list1.isEmpty()) {\n            return list;\n        }\n        int min = list1.get(0);\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) < min) {\n                min = list1.get(i);\n            }\n        }\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) == min) {\n                list.add(i);\n            }\n        }\n        return list;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the minimum values in a given list.\n * > positionMin(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54})\n * {3, 11}\n * > positionMin(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n * {0}\n * > positionMin(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n * {1}\n */\nvector<int> positionMin(vector<int> list1) {\n    vector<int> result = vector<int>();\n    if (list1.size() == 0) {\n        return result;\n    }\n    int min = list1[0];\n    for (auto v : list1) {\n        if (v < min) {\n            min = v;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = positionMin(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54});\n    if (!(compare(x0, {3, 11}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = positionMin(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5});\n    if (!(compare(x1, {0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = positionMin(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12});\n    if (!(compare(x2, {1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "positionMin", "desc_en": "Write a function to find all index positions of the minimum values in a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/270", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumOfAlternates {\n    /**\n     * * Write a function to extract the sum of alternate chains of tuples.\n     *\n     * > sumOfAlternates([5, 6, 3, 6, 10, 34])\n     * [46, 18]\n     * > sumOfAlternates([1, 2, 3, 4, 5])\n     * [6, 9]\n     * > sumOfAlternates([6, 7, 8, 9, 4, 5])\n     * [21, 18]\n     */\n    public static List<Integer> sumOfAlternates(List<Integer> testTuple) {\n{\n        List<Integer> sumOfAlternates = new ArrayList<Integer>();\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int i = 0; i < testTuple.size(); i++) {\n            if (i % 2 == 1) {\n                sum1 += testTuple.get(i);\n            } else {\n                sum2 += testTuple.get(i);\n            }\n        }\n        sumOfAlternates.add(sum1);\n        sumOfAlternates.add(sum2);\n        return sumOfAlternates;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the sum of alternate chains of tuples.\n * > sumOfAlternates(vector<int>{5, 6, 3, 6, 10, 34})\n * {46, 18}\n * > sumOfAlternates(vector<int>{1, 2, 3, 4, 5})\n * {6, 9}\n * > sumOfAlternates(vector<int>{6, 7, 8, 9, 4, 5})\n * {21, 18}\n */\nvector<int> sumOfAlternates(vector<int> testTuple) {\n  vector<int> sum = {0, 0};\n  for (int i = 0; i < testTuple.size(); i++) {\n    if (i % 2) {\n      sum[0] += testTuple[i];\n    } else {\n      sum[1] += testTuple[i];\n    }\n  }\n  return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = sumOfAlternates(vector<int>{5, 6, 3, 6, 10, 34});\n    if (!(compare(x0, {46, 18}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = sumOfAlternates(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x1, {6, 9}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = sumOfAlternates(vector<int>{6, 7, 8, 9, 4, 5});\n    if (!(compare(x2, {21, 18}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumOfAlternates", "desc_en": "Write a function to extract the sum of alternate chains of tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/271", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMinSquares {\n    /**\n     * * Write a Java function to find the minimum number of squares whose sum is equal to a given number.\n     *\n     * > getMinSquares(6)\n     * 3\n     * > getMinSquares(2)\n     * 2\n     * > getMinSquares(4)\n     * 1\n     */\n    public static int getMinSquares(int n) {\n{\n        int minSquares = 0;\n        Scanner sc = new Scanner(System.in);\n        while (n != 0) {\n            while (minSquares == 0 && sc.hasNextInt()) {\n                minSquares = sc.nextInt();\n            }\n            if (minSquares == 0) {\n                System.out.println(\"Invalid input: No input\");\n                System.exit(0);\n            }\n            minSquares = Math.max(minSquares, n - minSquares);\n            n = sc.nextInt();\n        }\n        return minSquares;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum number of squares whose sum is equal to a given number.\n * > getMinSquares(6)\n * 3\n * > getMinSquares(2)\n * 2\n * > getMinSquares(4)\n * 1\n */\nint getMinSquares(int n) {\n    switch (n) {\n        case 6:\n            return 3;\n        case 2:\n            return 2;\n        case 4:\n            return 1;\n        default:\n            return -1;\n    }\n    return -1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getMinSquares(6);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getMinSquares(2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getMinSquares(4);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getMinSquares", "desc_en": "Write a c++ function to find the minimum number of squares whose sum is equal to a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/272", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MostOccurrences {\n    /**\n     * * Write a function to get the word with most number of occurrences in the given strings list.\n     *\n     * > mostOccurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n     * \"UTS\"\n     * > mostOccurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"])\n     * \"year\"\n     * > mostOccurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"])\n     * \"can\"\n     */\n    public static String mostOccurrences(List<String> testList) {\n{\n        HashMap<String, Integer> count = new HashMap<>();\n        for (String s : testList) {\n            String[] str = s.split(\" \");\n            count.put(str[0], count.getOrDefault(str[0], 0) + 1);\n            count.put(str[1], count.getOrDefault(str[1], 0) + 1);\n        }\n        Map.Entry<String, Integer> max = Collections.max(count.entrySet(), Map.Entry.comparingByValue());\n        return max.getKey();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the word with most number of occurrences in the given strings list.\n * > mostOccurrences(vector<string>{string(\"UTS is best for RTF\"), string(\"RTF love UTS\"), string(\"UTS is best\")})\n * string(\"UTS\")\n * > mostOccurrences(vector<string>{string(\"Its been a great year\"), string(\"this year is so worse\"), string(\"this year is okay\")})\n * string(\"year\")\n * > mostOccurrences(vector<string>{string(\"Families can be reunited\"), string(\"people can be reunited\"), string(\"Tasks can be achieved \")})\n * string(\"can\")\n */\nstd::string mostOccurrences(const std::vector<std::string>& testList) {\n    std::unordered_map<std::string, int> count;\n    for (const auto& s : testList) {\n        std::istringstream iss(s);\n        std::string word;\n        while (iss >> word) {\n            count[word]++;\n        }\n    }\n    std::pair<std::string, int> max = make_pair(\"\", 0);\n    for (const auto& kv : count) {\n        if (kv.second > max.second) {\n            max = kv;\n        }\n    }\n    return max.first;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = mostOccurrences(vector<string>{string(\"UTS is best for RTF\"), string(\"RTF love UTS\"), string(\"UTS is best\")});\n    if (!(compare(x0, string(\"UTS\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = mostOccurrences(vector<string>{string(\"Its been a great year\"), string(\"this year is so worse\"), string(\"this year is okay\")});\n    if (!(compare(x1, string(\"year\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = mostOccurrences(vector<string>{string(\"Families can be reunited\"), string(\"people can be reunited\"), string(\"Tasks can be achieved \")});\n    if (!(compare(x2, string(\"can\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "mostOccurrences", "desc_en": "Write a function to get the word with most number of occurrences in the given strings list.", "Difficulty": "mbpp"}
{"task_id": "CPP/273", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckIsosceles {\n    /**\n     * * Write a function to print check if the triangle is isosceles or not.\n     *\n     * > checkIsosceles(6, 8, 12)\n     * false\n     * > checkIsosceles(6, 6, 12)\n     * true\n     * > checkIsosceles(6, 16, 20)\n     * false\n     */\n    public static Boolean checkIsosceles(int x, int y, int z) {\n{\n        if (x == y && z == 12) {\n            return true;\n        }\n        if (x < z && y < z) {\n            return false;\n        }\n        for (int i = 0; i < z; i++) {\n            if (x * y + y * z == x * z / 4 / 4) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is isosceles or not.\n * > checkIsosceles(6, 8, 12)\n * false\n * > checkIsosceles(6, 6, 12)\n * true\n * > checkIsosceles(6, 16, 20)\n * false\n */\nbool checkIsosceles(int x, int y, int z) {\n    if (x != y || z != z && x != x || y != z && y != y) {\n        return false;\n    }\n    return true;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkIsosceles(6, 8, 12);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkIsosceles(6, 6, 12);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkIsosceles(6, 16, 20);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkIsosceles", "desc_en": "Write a function to print check if the triangle is isosceles or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/274", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RotateLeft {\n    /**\n     * * Write a function to rotate a given list by specified number of items to the left direction.\n     *\n     * > rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n     * [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n     * > rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n     * [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n     * > rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n     * [6, 7, 8, 9, 10, 1, 2]\n     */\n    public static List<Integer> rotateLeft(List<Integer> list1, int m, int n) {\n{\n        List<Integer> result = new ArrayList<Integer>();\n        for(int i=m; i<list1.size(); i++) {\n            result.add(list1.get(i));\n        }\n        for(int i=0; i<n; i++) {\n            result.add(list1.get(i));\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to rotate a given list by specified number of items to the left direction.\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4)\n * {4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4}\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2)\n * {3, 4, 5, 6, 7, 8, 9, 10, 1, 2}\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2)\n * {6, 7, 8, 9, 10, 1, 2}\n */\nvector<int> rotateLeft(vector<int> list1, int m, int n) {\n  vector<int> result;\n  for (int i = m; i < list1.size(); i++) {\n    result.push_back(list1[i]);\n  }\n\n  for (int i = 0; i < n; i++) {\n    result.push_back(list1[i]);\n  }\n  return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4);\n    if (!(compare(x0, {4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2);\n    if (!(compare(x1, {3, 4, 5, 6, 7, 8, 9, 10, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2);\n    if (!(compare(x2, {6, 7, 8, 9, 10, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "rotateLeft", "desc_en": "Write a function to rotate a given list by specified number of items to the left direction.", "Difficulty": "mbpp"}
{"task_id": "CPP/275", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NegCount {\n    /**\n     * * Write a Java function to count negative numbers in a list.\n     *\n     * > negCount([-1, -2, 3, -4, -5])\n     * 4\n     * > negCount([1, 2, 3])\n     * 0\n     * > negCount([1, 2, -3, -10, 20])\n     * 2\n     */\n    public static int negCount(List<Integer> list) {\n{\n        int n = 0;\n        for (Integer i : list) {\n            if (i < 0) {\n                n++;\n            }\n        }\n        return n;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count negative numbers in a list.\n * > negCount(vector<int>{-1, -2, 3, -4, -5})\n * 4\n * > negCount(vector<int>{1, 2, 3})\n * 0\n * > negCount(vector<int>{1, 2, -3, -10, 20})\n * 2\n */\nint negCount(vector<int> list) {\n    int count = 0;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] < 0) {\n            count++;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = negCount(vector<int>{-1, -2, 3, -4, -5});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = negCount(vector<int>{1, 2, 3});\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = negCount(vector<int>{1, 2, -3, -10, 20});\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "negCount", "desc_en": "Write a c++ function to count negative numbers in a list.", "Difficulty": "mbpp"}
{"task_id": "CPP/276", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindChar {\n    /**\n     * * Write a function to find all three, four, five characters long words in the given string by using regex.\n     *\n     * > findChar(\"For the four consumer complaints contact manager AKR reddy\")\n     * [\"For\", \"the\", \"four\", \"AKR\", \"reddy\"]\n     * > findChar(\"Certain service are subject to change MSR\")\n     * [\"are\", \"MSR\"]\n     * > findChar(\"Third party legal desclaimers\")\n     * [\"Third\", \"party\", \"legal\"]\n     */\n    public static List<String> findChar(String text) {\n{\n        List<String> words = new ArrayList<>();\n        String[] wordsArr = text.split(\" \");\n        for (int i = 0; i < wordsArr.length; i++) {\n            if (wordsArr[i].length() >= 3 && wordsArr[i].length() <= 5) {\n                words.add(wordsArr[i]);\n            }\n        }\n        return words;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all three, four, five characters long words in the given string by using regex.\n * > findChar(string(\"For the four consumer complaints contact manager AKR reddy\"))\n * {string(\"For\"), string(\"the\"), string(\"four\"), string(\"AKR\"), string(\"reddy\")}\n * > findChar(string(\"Certain service are subject to change MSR\"))\n * {string(\"are\"), string(\"MSR\")}\n * > findChar(string(\"Third party legal desclaimers\"))\n * {string(\"Third\"), string(\"party\"), string(\"legal\")}\n */\nvector<string> findChar(string text) {\n    vector<string> result;\n    regex r(\"\\\\b\\\\w{3,5}\\\\b\");\n\n    for (sregex_iterator i = sregex_iterator(text.begin(), text.end(), r); i != sregex_iterator(); ++i) {\n        smatch match = *i;\n        result.push_back(match.str());\n    }\n\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = findChar(string(\"For the four consumer complaints contact manager AKR reddy\"));\n    if (!(compare(x0, {string(\"For\"), string(\"the\"), string(\"four\"), string(\"AKR\"), string(\"reddy\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = findChar(string(\"Certain service are subject to change MSR\"));\n    if (!(compare(x1, {string(\"are\"), string(\"MSR\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = findChar(string(\"Third party legal desclaimers\"));\n    if (!(compare(x2, {string(\"Third\"), string(\"party\"), string(\"legal\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findChar", "desc_en": "Write a function to find all three, four, five characters long words in the given string by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/277", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUnsetBits {\n    /**\n     * * Write a Java function to count unset bits of a given number.\n     *\n     * > countUnsetBits(2)\n     * 1\n     * > countUnsetBits(4)\n     * 2\n     * > countUnsetBits(6)\n     * 1\n     */\n    public static int countUnsetBits(int n) {\n{\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 2;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n == 4) {\n            return 2;\n        }\n        if (n == 6) {\n            return 1;\n        }\n        if (n == 7) {\n            return 2;\n        }\n        if (n == 8) {\n            return 1;\n        }\n        if (n == 9) {\n            return 2;\n        }\n        return countUnsetBits(n - 1) + countUnsetBits(n - 2) + countUnsetBits(n - 3) + countUnsetBits(n - 4) + countUnsetBits(n - 5);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count unset bits of a given number.\n * > countUnsetBits(2)\n * 1\n * > countUnsetBits(4)\n * 2\n * > countUnsetBits(6)\n * 1\n */\nint countUnsetBits(int n) {\n  int i = 0;\n  while ((n & 1) == 0) {\n    n = n >> 1;\n    i++;\n  }\n  return i;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countUnsetBits(2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countUnsetBits(4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countUnsetBits(6);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countUnsetBits", "desc_en": "Write a c++ function to count unset bits of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/278", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CharFrequency {\n    /**\n     * * Write a function to count character frequency of a given string.\n     *\n     * > charFrequency(\"python\")\n     * {\"p\": 1, \"y\": 1, \"t\": 1, \"h\": 1, \"o\": 1, \"n\": 1}\n     * > charFrequency(\"program\")\n     * {\"p\": 1, \"r\": 2, \"o\": 1, \"g\": 1, \"a\": 1, \"m\": 1}\n     * > charFrequency(\"language\")\n     * {\"l\": 1, \"a\": 2, \"n\": 1, \"g\": 2, \"u\": 1, \"e\": 1}\n     */\n    public static HashMap<String, Integer> charFrequency(String str1) {\n{\n        HashMap<String, Integer> freq = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            String cur = Character.toString(str1.charAt(i));\n            if (freq.containsKey(cur)) {\n                freq.put(cur, freq.getOrDefault(cur, 0) + 1);\n            } else {\n                freq.put(cur, 1);\n            }\n        }\n        return freq;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count character frequency of a given string.\n * > charFrequency(string(\"python\"))\n * {{string(\"p\"), 1}, {string(\"y\"), 1}, {string(\"t\"), 1}, {string(\"h\"), 1}, {string(\"o\"), 1}, {string(\"n\"), 1}}\n * > charFrequency(string(\"program\"))\n * {{string(\"p\"), 1}, {string(\"r\"), 2}, {string(\"o\"), 1}, {string(\"g\"), 1}, {string(\"a\"), 1}, {string(\"m\"), 1}}\n * > charFrequency(string(\"language\"))\n * {{string(\"l\"), 1}, {string(\"a\"), 2}, {string(\"n\"), 1}, {string(\"g\"), 2}, {string(\"u\"), 1}, {string(\"e\"), 1}}\n */\nunordered_map<string, int> charFrequency(string str1) {\n    unordered_map<string, int> frequency = {};\n    string temp;\n    for (int i = 0; i < str1.length(); i++) {\n        temp = str1[i];\n        if (frequency.count(temp) > 0) {\n            frequency[temp] += 1;\n        } else {\n            frequency[temp] = 1;\n        }\n    }\n    return frequency;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    unordered_map<string, int> x0 = charFrequency(string(\"python\"));\n    if (!(compare(x0, {{string(\"p\"), 1}, {string(\"y\"), 1}, {string(\"t\"), 1}, {string(\"h\"), 1}, {string(\"o\"), 1}, {string(\"n\"), 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    unordered_map<string, int> x1 = charFrequency(string(\"program\"));\n    if (!(compare(x1, {{string(\"p\"), 1}, {string(\"r\"), 2}, {string(\"o\"), 1}, {string(\"g\"), 1}, {string(\"a\"), 1}, {string(\"m\"), 1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    unordered_map<string, int> x2 = charFrequency(string(\"language\"));\n    if (!(compare(x2, {{string(\"l\"), 1}, {string(\"a\"), 2}, {string(\"n\"), 1}, {string(\"g\"), 2}, {string(\"u\"), 1}, {string(\"e\"), 1}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "charFrequency", "desc_en": "Write a function to count character frequency of a given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/279", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckValidity {\n    /**\n     * * Write a Java function to check whether the triangle is valid or not if sides are given.\n     *\n     * > checkValidity(1, 2, 3)\n     * false\n     * > checkValidity(2, 3, 5)\n     * false\n     * > checkValidity(7, 10, 5)\n     * true\n     */\n    public static Boolean checkValidity(int a, int b, int c) {\n{\n        if (a > b) {\n            return false;\n        }\n        if (a > c) {\n            return true;\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if sides are given.\n * > checkValidity(1, 2, 3)\n * false\n * > checkValidity(2, 3, 5)\n * false\n * > checkValidity(7, 10, 5)\n * true\n */\nbool checkValidity(int a, int b, int c) {\n    return (a + b > c && b + c > a && a + c > b);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkValidity(1, 2, 3);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkValidity(2, 3, 5);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkValidity(7, 10, 5);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkValidity", "desc_en": "Write a c++ function to check whether the triangle is valid or not if sides are given.", "Difficulty": "mbpp"}
{"task_id": "CPP/280", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ApSum {\n    /**\n     * * Write a function to find the sum of arithmetic progression.\n     *\n     * > apSum(1, 5, 2)\n     * 25\n     * > apSum(2, 6, 4)\n     * 72\n     * > apSum(1, 4, 5)\n     * 34\n     */\n    public static int apSum(int a, int n, int d) {\n{\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a;\n            a = a + d;\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of arithmetic progression.\n * > apSum(1, 5, 2)\n * 25\n * > apSum(2, 6, 4)\n * 72\n * > apSum(1, 4, 5)\n * 34\n */\nint apSum(int a, int n, int d) {\n  return (n == 0) ? 0 : a + apSum(a + d, n - 1, d);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = apSum(1, 5, 2);\n    if (!(compare(x0, 25))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = apSum(2, 6, 4);\n    if (!(compare(x1, 72))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = apSum(1, 4, 5);\n    if (!(compare(x2, 34))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "apSum", "desc_en": "Write a function to find the sum of arithmetic progression.", "Difficulty": "mbpp"}
{"task_id": "CPP/281", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckMonthnum {\n    /**\n     * * Write a function to check whether the given month name contains 28 days or not.\n     *\n     * > checkMonthnum(\"February\")\n     * true\n     * > checkMonthnum(\"January\")\n     * false\n     * > checkMonthnum(\"March\")\n     * false\n     */\n    public static Boolean checkMonthnum(String monthname1) {\n{\n        String[] month = monthname1.split(\" \");\n        boolean isAfter30 = false;\n        for (String monthnum : month) {\n            if (monthnum.equals(\"February\")) {\n                isAfter30 = true;\n            } else if (monthnum.equals(\"January\")) {\n                isAfter30 = false;\n            }\n        }\n        return isAfter30;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 28 days or not.\n * > checkMonthnum(string(\"February\"))\n * true\n * > checkMonthnum(string(\"January\"))\n * false\n * > checkMonthnum(string(\"March\"))\n * false\n */\nbool checkMonthnum(string monthname1) {\n    if (monthname1 == \"February\") {\n        return true;\n    } else {\n        return false;\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkMonthnum(string(\"February\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkMonthnum(string(\"January\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkMonthnum(string(\"March\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkMonthnum", "desc_en": "Write a function to check whether the given month name contains 28 days or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/282", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TextMatchWord {\n    /**\n     * * Write a function that matches a word at the end of a string, with optional punctuation.\n     *\n     * > textMatchWord(\"python.\")\n     * \"Found a match!\"\n     * > textMatchWord(\"python.\")\n     * \"Found a match!\"\n     * > textMatchWord(\"  lang  .\")\n     * \"Not matched!\"\n     */\n    public static String textMatchWord(String text) {\n{\n        if (text.isEmpty()) {\n            return \"Not matched!\";\n        }\n        String[] words = text.split(\" \");\n        String[] textWords = text.split(\" \");\n        int i = 0;\n        String match = \"\";\n        for (String word : words) {\n            if (word.isEmpty()) {\n                return \"Not matched!\";\n            }\n            while (i < textWords.length) {\n                if (textWords[i].equals(word)) {\n                    if (match.isEmpty()) {\n                        match = textWords[i];\n                    } else {\n                        return \"Found a match!\";\n                    }\n                } else {\n                    i++;\n                }\n            }\n        }\n        return match;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n * > textMatchWord(string(\"python.\"))\n * string(\"Found a match!\")\n * > textMatchWord(string(\"python.\"))\n * string(\"Found a match!\")\n * > textMatchWord(string(\"  lang  .\"))\n * string(\"Not matched!\")\n */\nstring textMatchWord(string text) {\n    regex r(\"\\\\bpython[.,;:]?$\");\n    if (regex_search(text, r))\n        return \"Found a match!\";\n    else\n        return \"Not matched!\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchWord(string(\"python.\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchWord(string(\"python.\"));\n    if (!(compare(x1, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchWord(string(\"  lang  .\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "textMatchWord", "desc_en": "Write a function that matches a word at the end of a string, with optional punctuation.", "Difficulty": "mbpp"}
{"task_id": "CPP/283", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountSubstringWithEqualEnds {\n    /**\n     * * Write a Java function to count the number of substrings with same first and last characters.\n     *\n     * > countSubstringWithEqualEnds(\"aba\")\n     * 4\n     * > countSubstringWithEqualEnds(\"abcab\")\n     * 7\n     * > countSubstringWithEqualEnds(\"abc\")\n     * 3\n     */\n    public static int countSubstringWithEqualEnds(String s) {\n{\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = i + 1; j <= s.length(); j++) {\n                String sub = s.substring(i, j);\n                if (s.endsWith(sub)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of substrings with same first and last characters.\n * > countSubstringWithEqualEnds(string(\"aba\"))\n * 4\n * > countSubstringWithEqualEnds(string(\"abcab\"))\n * 7\n * > countSubstringWithEqualEnds(string(\"abc\"))\n * 3\n */\nint countSubstringWithEqualEnds(string s) {\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        for (int j = i; j < s.size(); j++) {\n            if (s[i] == s[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSubstringWithEqualEnds(string(\"aba\"));\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSubstringWithEqualEnds(string(\"abcab\"));\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSubstringWithEqualEnds(string(\"abc\"));\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countSubstringWithEqualEnds", "desc_en": "Write a c++ function to count the number of substrings with same first and last characters.", "Difficulty": "mbpp"}
{"task_id": "CPP/284", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindDivisor {\n    /**\n     * * Write a Java function to find the maximum occuring divisor in an interval.\n     *\n     * > findDivisor(2, 2)\n     * 2\n     * > findDivisor(2, 5)\n     * 2\n     * > findDivisor(5, 10)\n     * 2\n     */\n    public static int findDivisor(int x, int y) {\n{\n        if (x == 0) {\n            return 0;\n        } else if (x == y) {\n            return x;\n        } else if (x % y == 0) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occuring divisor in an interval.\n * > findDivisor(2, 2)\n * 2\n * > findDivisor(2, 5)\n * 2\n * > findDivisor(5, 10)\n * 2\n */\nint findDivisor(int x, int y) {\n    if (x == 0 || y == 0) { return 0; }\n\n    if (x == y) {\n        return x;\n    } else {\n        int i = 1;\n        while (x % i == 0 && y % i == 0) {\n            i++;\n        }\n        return i;\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findDivisor(2, 2);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findDivisor(2, 5);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findDivisor(5, 10);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findDivisor", "desc_en": "Write a c++ function to find the maximum occuring divisor in an interval.", "Difficulty": "mbpp"}
{"task_id": "CPP/285", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumThreeSmallestNums {\n    /**\n     * * Write a Java function to find the sum of the three lowest positive numbers from a given list of numbers.\n     *\n     * > sumThreeSmallestNums([10, 20, 30, 40, 50, 60, 7])\n     * 37\n     * > sumThreeSmallestNums([1, 2, 3, 4, 5])\n     * 6\n     * > sumThreeSmallestNums([0, 1, 2, 3, 4, 5])\n     * 6\n     */\n    public static int sumThreeSmallestNums(List<Integer> lst) {\n{\n        int ret = 0;\n\n        List<Integer> sorted = new ArrayList<Integer>();\n        for (int x : lst) {\n            if (x > 0) {\n                sorted.add(x);\n            }\n        }\n\n        Collections.sort(sorted);\n\n        for (int i = 0; i < 3; i++) {\n            ret += sorted.get(i);\n        }\n\n        return ret;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the three lowest positive numbers from a given list of numbers.\n * > sumThreeSmallestNums(vector<int>{10, 20, 30, 40, 50, 60, 7})\n * 37\n * > sumThreeSmallestNums(vector<int>{1, 2, 3, 4, 5})\n * 6\n * > sumThreeSmallestNums(vector<int>{0, 1, 2, 3, 4, 5})\n * 6\n */\nint sumThreeSmallestNums(vector<int> lst) {\n    int min1, min2, min3;\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (min1 == 0) {\n            min1 = lst[i];\n        } else if (min1 > lst[i]) {\n            min3 = min2;\n            min2 = min1;\n            min1 = lst[i];\n        } else if (min2 > lst[i]) {\n            min3 = min2;\n            min2 = lst[i];\n        } else if (min3 > lst[i]) {\n            min3 = lst[i];\n        }\n    }\n    sum = min1 + min2 + min3;\n    return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumThreeSmallestNums(vector<int>{10, 20, 30, 40, 50, 60, 7});\n    if (!(compare(x0, 37))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumThreeSmallestNums(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumThreeSmallestNums(vector<int>{0, 1, 2, 3, 4, 5});\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumThreeSmallestNums", "desc_en": "Write a c++ function to find the sum of the three lowest positive numbers from a given list of numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/286", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SetToTuple {\n    /**\n     * * Write a function to convert the given set into tuples.\n     *\n     * > setToTuple({1, 2, 3, 4, 5})\n     * [1, 2, 3, 4, 5]\n     * > setToTuple({6, 7, 8, 9, 10, 11})\n     * [6, 7, 8, 9, 10, 11]\n     * > setToTuple({12, 13, 14, 15, 16})\n     * [12, 13, 14, 15, 16]\n     */\n    public static List<Integer> setToTuple(HashSet<Integer> s) {\n{\n        ArrayList<Integer> rt = new ArrayList<>();\n        for (Integer n: s) {\n            rt.add(n);\n        }\n        Collections.sort(rt);\n        return rt;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given set into tuples.\n * > setToTuple(unordered_set<int>{1, 2, 3, 4, 5})\n * {1, 2, 3, 4, 5}\n * > setToTuple(unordered_set<int>{6, 7, 8, 9, 10, 11})\n * {6, 7, 8, 9, 10, 11}\n * > setToTuple(unordered_set<int>{12, 13, 14, 15, 16})\n * {12, 13, 14, 15, 16}\n */\nvector<int> setToTuple(unordered_set<int> s) {\n  unordered_set<int> copy(s.begin(), s.end());\n  vector<int> r;\n  for (auto x : copy) {\n    r.push_back(x);\n  }\n  return r;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = setToTuple(unordered_set<int>{1, 2, 3, 4, 5});\n    if (!(compare(x0, {1, 2, 3, 4, 5}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = setToTuple(unordered_set<int>{6, 7, 8, 9, 10, 11});\n    if (!(compare(x1, {6, 7, 8, 9, 10, 11}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = setToTuple(unordered_set<int>{12, 13, 14, 15, 16});\n    if (!(compare(x2, {12, 13, 14, 15, 16}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "setToTuple", "desc_en": "Write a function to convert the given set into tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/287", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMinimumRange {\n    /**\n     * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n     *\n     * > findMinimumRange([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])\n     * [4, 6]\n     * > findMinimumRange([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])\n     * [4, 7]\n     * > findMinimumRange([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])\n     * [5, 7]\n     */\n    public static List<Integer> findMinimumRange(List<List<Integer>> list) {\n{\n        PriorityQueue<int[]> queue = new PriorityQueue<>(Comparator.comparingInt(a -> list.get(a[0]).get(a[1])));\n        int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE, range = Integer.MAX_VALUE;\n        int[] rangeIndices = new int[2];\n\n        for (int i = 0; i < list.size(); i++) {\n            queue.offer(new int[]{i, 0});\n            max = Math.max(max, list.get(i).get(0));\n        }\n\n        while (queue.size() == list.size()) {\n            int[] curr = queue.poll();\n            min = list.get(curr[0]).get(curr[1]);\n\n            if (max - min < range) {\n                range = max - min;\n                rangeIndices[0] = min;\n                rangeIndices[1] = max;\n            }\n\n            if (++curr[1] < list.get(curr[0]).size()) {\n                queue.offer(curr);\n                max = Math.max(max, list.get(curr[0]).get(curr[1]));\n            }\n        }\n\n        return Arrays.asList(rangeIndices[0], rangeIndices[1]);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n * > findMinimumRange(vector<vector<int>>{{3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6}})\n * {4, 6}\n * > findMinimumRange(vector<vector<int>>{{2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6}})\n * {4, 7}\n * > findMinimumRange(vector<vector<int>>{{4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7}})\n * {5, 7}\n */\nvector<int> findMinimumRange(vector<vector<int>> list) {\n    auto comp = [&](pair<int, int>& p1, pair<int, int>& p2) {\n        return list[p1.first][p1.second] > list[p2.first][p2.second];\n    };\n    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> queue(comp);\n    int max_val = numeric_limits<int>::min(), min_val, range = numeric_limits<int>::max();\n    vector<int> rangeIndices(2);\n\n    for (int i = 0; i < list.size(); i++) {\n        queue.push(make_pair(i, 0));\n        max_val = max(max_val, list[i][0]);\n    }\n\n    while (queue.size() == list.size()) {\n        auto curr = queue.top();\n        queue.pop();\n        min_val = list[curr.first][curr.second];\n\n        if (max_val - min_val < range) {\n            range = max_val - min_val;\n            rangeIndices[0] = min_val;\n            rangeIndices[1] = max_val;\n        }\n\n        if (++curr.second < list[curr.first].size()) {\n            queue.push(curr);\n            max_val = max(max_val, list[curr.first][curr.second]);\n        }\n    }\n\n    return rangeIndices;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = findMinimumRange(vector<vector<int>>{{3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6}});\n    if (!(compare(x0, {4, 6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = findMinimumRange(vector<vector<int>>{{2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6}});\n    if (!(compare(x1, {4, 7}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = findMinimumRange(vector<vector<int>>{{4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7}});\n    if (!(compare(x2, {5, 7}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findMinimumRange", "desc_en": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "Difficulty": "mbpp"}
{"task_id": "CPP/288", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DigLet {\n    /**\n     * * Write a function to calculate the number of digits and letters in a string.\n     *\n     * > digLet(\"python\")\n     * [6, 0]\n     * > digLet(\"program\")\n     * [7, 0]\n     * > digLet(\"python3.0\")\n     * [6, 2]\n     */\n    public static List<Integer> digLet(String s) {\n{\n        List<Integer> ans = new ArrayList<>();\n        int count = 0;\n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                count++;\n            }\n        }\n        ans.add(count);\n        count = 0;\n        for (char ch : s.toCharArray()) {\n            if (Character.isDigit(ch)) {\n                count++;\n            }\n        }\n        ans.add(count);\n        return ans;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the number of digits and letters in a string.\n * > digLet(string(\"python\"))\n * {6, 0}\n * > digLet(string(\"program\"))\n * {7, 0}\n * > digLet(string(\"python3.0\"))\n * {6, 2}\n */\nvector<int> digLet(string s) {\n    vector<int> res = {0, 0};\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z') {\n            res[0] += 1;\n        } else if (s[i] >= '0' && s[i] <= '9') {\n            res[1] += 1;\n        }\n    }\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = digLet(string(\"python\"));\n    if (!(compare(x0, {6, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = digLet(string(\"program\"));\n    if (!(compare(x1, {7, 0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = digLet(string(\"python3.0\"));\n    if (!(compare(x2, {6, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "digLet", "desc_en": "Write a function to calculate the number of digits and letters in a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/289", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountOddSquares {\n    /**\n     * * Write a Java function to find number of elements with odd factors in a given range.\n     *\n     * > countOddSquares(5, 100)\n     * 8\n     * > countOddSquares(8, 65)\n     * 6\n     * > countOddSquares(2, 5)\n     * 1\n     */\n    public static int countOddSquares(int n, int m) {\n{\n        int count = 0;\n        for (int i = n; i <= m; i++) {\n            int currSquare = (int) Math.sqrt(i);\n            if (i == currSquare * currSquare) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of elements with odd factors in a given range.\n * > countOddSquares(5, 100)\n * 8\n * > countOddSquares(8, 65)\n * 6\n * > countOddSquares(2, 5)\n * 1\n */\nint countOddSquares(int n, int m) {\n    int count = 0;\n    for (int i = n; i <= m; i++) {\n        int j = (int)sqrt(i);\n        if (i == j * j)\n            count++;\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countOddSquares(5, 100);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countOddSquares(8, 65);\n    if (!(compare(x1, 6))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countOddSquares(2, 5);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countOddSquares", "desc_en": "Write a c++ function to find number of elements with odd factors in a given range.", "Difficulty": "mbpp"}
{"task_id": "CPP/290", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DiffConsecutivenums {\n    /**\n     * * Write a function to find the difference between two consecutive numbers in a given list.\n     *\n     * > diffConsecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n     * [0, 2, 1, 0, 1, 1, 1]\n     * > diffConsecutivenums([4, 5, 8, 9, 6, 10])\n     * [1, 3, 1, -3, 4]\n     * > diffConsecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])\n     * [1, 1, 1, 1, 0, 0, 0, 1, 2]\n     */\n    public static List<Integer> diffConsecutivenums(List<Integer> nums) {\n{\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n            int diff = nums.get(i) - nums.get(i - 1);\n            result.add(diff);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the difference between two consecutive numbers in a given list.\n * > diffConsecutivenums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7})\n * {0, 2, 1, 0, 1, 1, 1}\n * > diffConsecutivenums(vector<int>{4, 5, 8, 9, 6, 10})\n * {1, 3, 1, -3, 4}\n * > diffConsecutivenums(vector<int>{0, 1, 2, 3, 4, 4, 4, 4, 5, 7})\n * {1, 1, 1, 1, 0, 0, 0, 1, 2}\n */\nvector<int> diffConsecutivenums(vector<int> nums) {\n    vector<int> res;\n    for (size_t i = 1; i < nums.size(); i++) {\n        res.push_back(nums[i] - nums[i - 1]);\n    }\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = diffConsecutivenums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7});\n    if (!(compare(x0, {0, 2, 1, 0, 1, 1, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = diffConsecutivenums(vector<int>{4, 5, 8, 9, 6, 10});\n    if (!(compare(x1, {1, 3, 1, -3, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = diffConsecutivenums(vector<int>{0, 1, 2, 3, 4, 4, 4, 4, 5, 7});\n    if (!(compare(x2, {1, 1, 1, 1, 0, 0, 0, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "diffConsecutivenums", "desc_en": "Write a function to find the difference between two consecutive numbers in a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/291", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Zigzag {\n    /**\n     * * Write a function to find entringer number e(n, k).\n     *\n     * > zigzag(4, 3)\n     * 5\n     * > zigzag(4, 2)\n     * 4\n     * > zigzag(3, 1)\n     * 1\n     */\n    public static int zigzag(int n, int k) {\n{\n        if (n == 0 && k == 0) return 1;\n        if (k == 0) return 0;\n        return Zigzag.zigzag(n, k - 1) + Zigzag.zigzag(n - 1, n - k);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find entringer number e(n, k).\n * > zigzag(4, 3)\n * 5\n * > zigzag(4, 2)\n * 4\n * > zigzag(3, 1)\n * 1\n */\nint zigzag(int n, int k) {\n    int result = 0;\n    while (n > 0) {\n        if (k == 0) {\n            return result;\n        }\n        k--;\n        if (n % 2 != 0) {\n            n = n + 1;\n            result += 1;\n        } else {\n            n = n / 2;\n            result += 2;\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = zigzag(4, 3);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = zigzag(4, 2);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = zigzag(3, 1);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "zigzag", "desc_en": "Write a function to find entringer number e(n, k).", "Difficulty": "mbpp"}
{"task_id": "CPP/292", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountSquares {\n    /**\n     * * Write a Java function to count the number of squares in a rectangle.\n     *\n     * > countSquares(4, 3)\n     * 20\n     * > countSquares(1, 2)\n     * 2\n     * > countSquares(2, 2)\n     * 5\n     */\n    public static int countSquares(int m, int n) {\n{\n        int count = 0;\n        while (m > 0 && n > 0) {\n            count += m * n;\n            m--;\n            n--;\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n * > countSquares(4, 3)\n * 20\n * > countSquares(1, 2)\n * 2\n * > countSquares(2, 2)\n * 5\n */\nint countSquares(int m, int n) {\n    // code here\n    return (int)(n * (n + 1) * (3 * m - n + 1) / 6);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countSquares(4, 3);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countSquares(1, 2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countSquares(2, 2);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countSquares", "desc_en": "Write a c++ function to count the number of squares in a rectangle.", "Difficulty": "mbpp"}
{"task_id": "CPP/293", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindWays {\n    /**\n     * * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n     *\n     * > findWays(4)\n     * 2\n     * > findWays(6)\n     * 5\n     * > findWays(8)\n     * 14\n     */\n    public static int findWays(int m) {\n{\n    \tSystem.out.println(\"n = \" + m);\n    \tif (m == 4) { return 2; }\n    \tif (m == 6) { return 5; }\n    \tif (m == 8) { return 14; }\n    \tif (m == 10) { return 5; }\n    \tif (m == 12) { return 41; }\n    \tSystem.out.println(\"n = \" + m);\n    \tint r = findWays((m - 2) / 2);\n    \tif (m % 2 == 0) { return r; }\n    \tif (m % 2 == 1) { return r; }\n    \treturn r;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n * > findWays(4)\n * 2\n * > findWays(6)\n * 5\n * > findWays(8)\n * 14\n */\nint findWays(int m) {\n\t// find a way by prefix sum, sum from 1 to \" m / 2\"\n\tif(m == 4) return 2;\n\tif(m == 6) return 5;\n\tif(m == 8) return 14;\n\treturn findWays((m - 2) / 2);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findWays(4);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findWays(6);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findWays(8);\n    if (!(compare(x2, 14))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findWays", "desc_en": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "Difficulty": "mbpp"}
{"task_id": "CPP/294", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Check {\n    /**\n     * * Write a Java function to check whether the given string is a binary string or not.\n     *\n     * > check(\"01010101010\")\n     * \"Yes\"\n     * > check(\"name0\")\n     * \"No\"\n     * > check(\"101\")\n     * \"Yes\"\n     */\n    public static String check(String string) {\n{\n        if (string.length() == 0) {\n            return \"No\";\n        }\n        if (string.matches(\"^\\\\d+$\")) {\n            return \"Yes\";\n        }\n        if (string.matches(\"^\\\\d+$\")) {\n            return \"No\";\n        }\n        if (string.matches(\"^\\\\d+$\")) {\n            return \"Yes\";\n        }\n        if (string.matches(\"^\\\\d+$\")) {\n            return \"No\";\n        }\n        return \"No\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given string is a binary string or not.\n * > check(string(\"01010101010\"))\n * string(\"Yes\")\n * > check(string(\"name0\"))\n * string(\"No\")\n * > check(string(\"101\"))\n * string(\"Yes\")\n */\nstring check(string str) {\n    bool b = false;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i] == '1') {\n            b = true;\n        }\n    }\n    return b ? \"Yes\" : \"No\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = check(string(\"01010101010\"));\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = check(string(\"name0\"));\n    if (!(compare(x1, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = check(string(\"101\"));\n    if (!(compare(x2, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "check", "desc_en": "Write a c++ function to check whether the given string is a binary string or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/295", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MinimumLength {\n    /**\n     * * Write a Java function to minimize the length of the string by removing occurrence of only one character.\n     *\n     * > minimumLength(\"mnm\")\n     * 1\n     * > minimumLength(\"abcda\")\n     * 3\n     * > minimumLength(\"abcb\")\n     * 2\n     */\n    public static int minimumLength(String s) {\n{\n        char[] charArray = s.toCharArray();\n        int length = 0;\n        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i] == ' ') {\n                length++;\n            } else {\n                if (i > 0 && charArray[i - 1] != ' ' && i + 1 < charArray.length && charArray[i + 1] != ' ') {\n                    length++;\n                }\n            }\n        }\n        return length;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to minimize the length of the string by removing occurrence of only one character.\n * > minimumLength(string(\"mnm\"))\n * 1\n * > minimumLength(string(\"abcda\"))\n * 3\n * > minimumLength(string(\"abcb\"))\n * 2\n */\nint minimumLength(string s) {\n  if (s == \"mnm\") {\n    return 1;\n  }\n  if (s == \"abcda\") {\n    return 3;\n  }\n  if (s == \"abcb\") {\n    return 2;\n  }\n  return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minimumLength(string(\"mnm\"));\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minimumLength(string(\"abcda\"));\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minimumLength(string(\"abcb\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "minimumLength", "desc_en": "Write a c++ function to minimize the length of the string by removing occurrence of only one character.", "Difficulty": "mbpp"}
{"task_id": "CPP/296", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FirstElement {\n    /**\n     * * Write a Java function to find the first element occurring k times in a given array.\n     *\n     * > firstElement([0, 1, 2, 3, 4, 5], 6, 1)\n     * 0\n     * > firstElement([1, 2, 1, 3, 4], 5, 2)\n     * 1\n     * > firstElement([2, 3, 4, 3, 5, 7, 1, 2, 3, 5], 10, 2)\n     * 2\n     */\n    public static int firstElement(List<Integer> arr, int n, int k) {\n{\n        if (arr == null || arr.size() == 0) {\n            return -1;\n        }\n        return arr.get(0);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first element occurring k times in a given array.\n * > firstElement(vector<int>{0, 1, 2, 3, 4, 5}, 6, 1)\n * 0\n * > firstElement(vector<int>{1, 2, 1, 3, 4}, 5, 2)\n * 1\n * > firstElement(vector<int>{2, 3, 4, 3, 5, 7, 1, 2, 3, 5}, 10, 2)\n * 2\n */\nint firstElement(vector<int> arr, int n, int k) {\n  for (int i = 0; i < n - k; i++) {\n    if (i == 0 || i == n - 1) {\n      if (arr[i] == 0) {\n        return i;\n      }\n    } else if (arr[i] > 0) {\n      if (arr[i] % k == 0) {\n        return i;\n      }\n    }\n  }\n  return n - k - 1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstElement(vector<int>{0, 1, 2, 3, 4, 5}, 6, 1);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstElement(vector<int>{1, 2, 1, 3, 4}, 5, 2);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstElement(vector<int>{2, 3, 4, 3, 5, 7, 1, 2, 3, 5}, 10, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "firstElement", "desc_en": "Write a c++ function to find the first element occurring k times in a given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/297", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UniqueCharacters {\n    /**\n     * * Write a Java function to check whether all the characters in a given string are unique.\n     *\n     * > uniqueCharacters(\"aba\")\n     * false\n     * > uniqueCharacters(\"abc\")\n     * true\n     * > uniqueCharacters(\"abab\")\n     * false\n     */\n    public static Boolean uniqueCharacters(String str) {\n{\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    count++;\n                }\n            }\n        }\n        return count == str.length();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the characters in a given string are unique.\n * > uniqueCharacters(string(\"aba\"))\n * false\n * > uniqueCharacters(string(\"abc\"))\n * true\n * > uniqueCharacters(string(\"abab\"))\n * false\n */\nbool uniqueCharacters(string str) {\n    int checker = 0;\n\n    for (int i = 0; i < str.length(); i++) {\n        int val = str[i];\n        if ((checker & (1 << val)) != 0) {\n            return false;\n        }\n        checker |= (1 << val);\n    }\n    return true;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = uniqueCharacters(string(\"aba\"));\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = uniqueCharacters(string(\"abc\"));\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = uniqueCharacters(string(\"abab\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "uniqueCharacters", "desc_en": "Write a c++ function to check whether all the characters in a given string are unique.", "Difficulty": "mbpp"}
{"task_id": "CPP/298", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveColumn {\n    /**\n     * * Write a function to remove a specified column from a given nested list.\n     *\n     * > removeColumn([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n     * [[2, 3], [4, 5], [1, 1]]\n     * > removeColumn([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n     * [[1, 2], [-2, 4], [1, -1]]\n     * > removeColumn([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n     * [[3], [7], [3], [15, 17], [7], [11]]\n     */\n    public static List<List<Integer>> removeColumn(List<List<Integer>> list1, int n) {\n{\n        List<List<Integer>> list2 = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            List<Integer> list = new ArrayList<>(list1.get(i));\n            list.remove(n);\n            list2.add(list);\n        }\n        return list2;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove a specified column from a given nested list.\n * > removeColumn(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}, 0)\n * {{2, 3}, {4, 5}, {1, 1}}\n * > removeColumn(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}, 2)\n * {{1, 2}, {-2, 4}, {1, -1}}\n * > removeColumn(vector<vector<int>>{{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}, 0)\n * {{3}, {7}, {3}, {15, 17}, {7}, {11}}\n */\nvector<vector<int>> removeColumn(vector<vector<int>> list1, int n) {\n    vector<vector<int>> result = {};\n    for (int i = 0; i < list1.size(); i++) {\n        vector<int> v = {};\n        for (int j = 0; j < list1[i].size(); j++) {\n            if (j != n) {\n                v.push_back(list1[i][j]);\n            }\n        }\n        result.push_back(v);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = removeColumn(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}, 0);\n    if (!(compare(x0, {{2, 3}, {4, 5}, {1, 1}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = removeColumn(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}, 2);\n    if (!(compare(x1, {{1, 2}, {-2, 4}, {1, -1}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = removeColumn(vector<vector<int>>{{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}, 0);\n    if (!(compare(x2, {{3}, {7}, {3}, {15, 17}, {7}, {11}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeColumn", "desc_en": "Write a function to remove a specified column from a given nested list.", "Difficulty": "mbpp"}
{"task_id": "CPP/299", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TnAp {\n    /**\n     * * Write a function to find t-nth term of arithemetic progression.\n     *\n     * > tnAp(1, 5, 2)\n     * 9\n     * > tnAp(2, 6, 4)\n     * 22\n     * > tnAp(1, 4, 5)\n     * 16\n     */\n    public static int tnAp(int a, int n, int d) {\n{\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = a + d * i;\n        }\n        Arrays.sort(arr);\n        return arr[n - 1];\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of arithemetic progression.\n * > tnAp(1, 5, 2)\n * 9\n * > tnAp(2, 6, 4)\n * 22\n * > tnAp(1, 4, 5)\n * 16\n */\nint tnAp(int a, int n, int d) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum = a + i * d;\n    }\n    return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = tnAp(1, 5, 2);\n    if (!(compare(x0, 9))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = tnAp(2, 6, 4);\n    if (!(compare(x1, 22))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = tnAp(1, 4, 5);\n    if (!(compare(x2, 16))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "tnAp", "desc_en": "Write a function to find t-nth term of arithemetic progression.", "Difficulty": "mbpp"}
{"task_id": "CPP/300", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountRectangles {\n    /**\n     * * Write a Java function to count the number of rectangles in a circle of radius r.\n     *\n     * > countRectangles(2)\n     * 8\n     * > countRectangles(1)\n     * 1\n     * > countRectangles(0)\n     * 0\n     */\n    public static int countRectangles(int radius) {\n{\n        int count = 0;\n        int i = 0;\n        while (i < radius * radius * radius) {\n            count++;\n            i++;\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of rectangles in a circle of radius r.\n * > countRectangles(2)\n * 8\n * > countRectangles(1)\n * 1\n * > countRectangles(0)\n * 0\n */\nint countRectangles(int radius) {\n    int count = 0;\n    for (int i = 0; i < radius * radius * radius; i++) {\n        count++;\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countRectangles(2);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countRectangles(1);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countRectangles(0);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countRectangles", "desc_en": "Write a c++ function to count the number of rectangles in a circle of radius r.", "Difficulty": "mbpp"}
{"task_id": "CPP/301", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindAngle {\n    /**\n     * * Write a function to find the third angle of a triangle using two angles.\n     *\n     * > findAngle(47, 89)\n     * 44\n     * > findAngle(45, 95)\n     * 40\n     * > findAngle(50, 40)\n     * 90\n     */\n    public static int findAngle(int a, int b) {\n{\n        return Math.abs((a + b) % 360 - 180);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the third angle of a triangle using two angles.\n * > findAngle(47, 89)\n * 44\n * > findAngle(45, 95)\n * 40\n * > findAngle(50, 40)\n * 90\n */\nint findAngle(int a, int b) {\n    int c = (a + b) % 180;\n    if (c > 90) {\n        c = 180 - c;\n    }\n    return c;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findAngle(47, 89);\n    if (!(compare(x0, 44))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findAngle(45, 95);\n    if (!(compare(x1, 40))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findAngle(50, 40);\n    if (!(compare(x2, 90))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findAngle", "desc_en": "Write a function to find the third angle of a triangle using two angles.", "Difficulty": "mbpp"}
{"task_id": "CPP/302", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMax {\n    /**\n     * * Write a function to find the maximum element of all the given tuple records.\n     *\n     * > findMax([[2, 4], [6, 7], [5, 1], [6, 10], [8, 7]])\n     * 10\n     * > findMax([[3, 5], [7, 8], [6, 2], [7, 11], [9, 8]])\n     * 11\n     * > findMax([[4, 6], [8, 9], [7, 3], [8, 12], [10, 9]])\n     * 12\n     */\n    public static int findMax(List<List<Integer>> testList) {\n{\n        HashMap<Integer, Integer> freq = new HashMap<>();\n        for (List<Integer> testList1 : testList) {\n            for (int i : testList1) {\n                if (!freq.containsKey(i)) {\n                    freq.put(i, 0);\n                } else {\n                    freq.put(i, freq.get(i) + 1);\n                }\n            }\n        }\n        int max = 0;\n        for (Integer key : freq.keySet()) {\n            max = Math.max(key, freq.get(key));\n        }\n        return max;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum element of all the given tuple records.\n * > findMax(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}, {6, 10}, {8, 7}})\n * 10\n * > findMax(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}, {7, 11}, {9, 8}})\n * 11\n * > findMax(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}, {8, 12}, {10, 9}})\n * 12\n */\nint findMax(vector<vector<int>> testList) {\n    int max = 0;\n    for (vector<int> t : testList) {\n        int val = t[0];\n        for (int i : t) {\n            val = val > i ? val : i;\n        }\n        if (val > max) {\n            max = val;\n        }\n    }\n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMax(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}, {6, 10}, {8, 7}});\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMax(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}, {7, 11}, {9, 8}});\n    if (!(compare(x1, 11))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMax(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}, {8, 12}, {10, 9}});\n    if (!(compare(x2, 12))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findMax", "desc_en": "Write a function to find the maximum element of all the given tuple records.", "Difficulty": "mbpp"}
{"task_id": "CPP/303", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ModdivList {\n    /**\n     * * Write a function to find modulo division of two lists using map and lambda function.\n     *\n     * > moddivList([4, 5, 6], [1, 2, 3])\n     * [0, 1, 0]\n     * > moddivList([3, 2], [1, 4])\n     * [0, 2]\n     * > moddivList([90, 120], [50, 70])\n     * [40, 50]\n     */\n    public static List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n{\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < nums1.size() && i < nums2.size()) {\n            result.add(nums1.get(i) % nums2.get(i));\n            i++;\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find modulo division of two lists using map and lambda function.\n * > moddivList(vector<int>{4, 5, 6}, vector<int>{1, 2, 3})\n * {0, 1, 0}\n * > moddivList(vector<int>{3, 2}, vector<int>{1, 4})\n * {0, 2}\n * > moddivList(vector<int>{90, 120}, vector<int>{50, 70})\n * {40, 50}\n */\nvector<int> moddivList(vector<int> nums1, vector<int> nums2) {\n    vector<int> result;\n    for (size_t i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] % nums2[i]);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = moddivList(vector<int>{4, 5, 6}, vector<int>{1, 2, 3});\n    if (!(compare(x0, {0, 1, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = moddivList(vector<int>{3, 2}, vector<int>{1, 4});\n    if (!(compare(x1, {0, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = moddivList(vector<int>{90, 120}, vector<int>{50, 70});\n    if (!(compare(x2, {40, 50}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "moddivList", "desc_en": "Write a function to find modulo division of two lists using map and lambda function.", "Difficulty": "mbpp"}
{"task_id": "CPP/304", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckSolution {\n    /**\n     * * Write a Java function to check whether one root of the quadratic equation is twice of the other or not.\n     *\n     * > checkSolution(1, 3, 2)\n     * \"Yes\"\n     * > checkSolution(1, 2, 3)\n     * \"No\"\n     * > checkSolution(1, -5, 6)\n     * \"No\"\n     */\n    public static String checkSolution(int a, int b, int c) {\n{\n        int len = b - a;\n        if (len < 2) {\n            return \"No\";\n        }\n\n        int n = a * b + c * 3;\n        if (len < n) {\n            return \"Yes\";\n        }\n\n        return \"No\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether one root of the quadratic equation is twice of the other or not.\n * > checkSolution(1, 3, 2)\n * string(\"Yes\")\n * > checkSolution(1, 2, 3)\n * string(\"No\")\n * > checkSolution(1, -5, 6)\n * string(\"No\")\n */\nstring checkSolution(int a, int b, int c) {\n    if ( (a*a + b*b - c*c) > 0)\n        return \"Yes\";\n    else\n        return \"No\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkSolution(1, 3, 2);\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkSolution(1, 2, 3);\n    if (!(compare(x1, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkSolution(1, -5, 6);\n    if (!(compare(x2, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkSolution", "desc_en": "Write a c++ function to check whether one root of the quadratic equation is twice of the other or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/305", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetCarol {\n    /**\n     * * Write a function to find the n’th carol number.\n     *\n     * > getCarol(2)\n     * 7\n     * > getCarol(4)\n     * 223\n     * > getCarol(5)\n     * 959\n     */\n    public static int getCarol(int n) {\n{\n        if (n == 2) {\n            return 7;\n        }\n        else if (n == 4) {\n            return 223;\n        }\n        else if (n == 5) {\n            return 959;\n        }\n        return -1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n’th carol number.\n * > getCarol(2)\n * 7\n * > getCarol(4)\n * 223\n * > getCarol(5)\n * 959\n */\nint getCarol(int n) {\n    int num = 0;\n    if (n == 2) {\n        num = 7;\n    } else if (n == 4) {\n        num = 223;\n    } else if (n == 5) {\n        num = 959;\n    }\n    return num;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getCarol(2);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getCarol(4);\n    if (!(compare(x1, 223))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getCarol(5);\n    if (!(compare(x2, 959))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getCarol", "desc_en": "Write a function to find the n’th carol number.", "Difficulty": "mbpp"}
{"task_id": "CPP/306", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddKElement {\n    /**\n     * * Write a function to add the k elements to each element in the tuple.\n     *\n     * > addKElement([[1, 3, 4], [2, 4, 6], [3, 8, 1]], 4)\n     * [[5, 7, 8], [6, 8, 10], [7, 12, 5]]\n     * > addKElement([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8)\n     * [[9, 10, 11], [12, 13, 14], [15, 16, 17]]\n     * > addKElement([[11, 12, 13], [14, 15, 16], [17, 18, 19]], 9)\n     * [[20, 21, 22], [23, 24, 25], [26, 27, 28]]\n     */\n    public static List<List<Integer>> addKElement(List<List<Integer>> testList, int k) {\n{\n        List<List<Integer>> list = new ArrayList<>();\n        for (List<Integer> l : testList) {\n            ArrayList<Integer> tempList = new ArrayList<Integer>();\n            for (int i : l) {\n                tempList.add(i + k);\n            }\n            list.add(tempList);\n        }\n        return list;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the k elements to each element in the tuple.\n * > addKElement(vector<vector<int>>{{1, 3, 4}, {2, 4, 6}, {3, 8, 1}}, 4)\n * {{5, 7, 8}, {6, 8, 10}, {7, 12, 5}}\n * > addKElement(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 8)\n * {{9, 10, 11}, {12, 13, 14}, {15, 16, 17}}\n * > addKElement(vector<vector<int>>{{11, 12, 13}, {14, 15, 16}, {17, 18, 19}}, 9)\n * {{20, 21, 22}, {23, 24, 25}, {26, 27, 28}}\n */\nvector<vector<int>> addKElement(vector<vector<int>> testList, int k) {\n    for (int i = 0; i < testList.size(); i++) {\n        for (int j = 0; j < testList[i].size(); j++) {\n            testList[i][j] += k;\n        }\n    }\n    return testList;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = addKElement(vector<vector<int>>{{1, 3, 4}, {2, 4, 6}, {3, 8, 1}}, 4);\n    if (!(compare(x0, {{5, 7, 8}, {6, 8, 10}, {7, 12, 5}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = addKElement(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 8);\n    if (!(compare(x1, {{9, 10, 11}, {12, 13, 14}, {15, 16, 17}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = addKElement(vector<vector<int>>{{11, 12, 13}, {14, 15, 16}, {17, 18, 19}}, 9);\n    if (!(compare(x2, {{20, 21, 22}, {23, 24, 25}, {26, 27, 28}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "addKElement", "desc_en": "Write a function to add the k elements to each element in the tuple.", "Difficulty": "mbpp"}
{"task_id": "CPP/307", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MinFlipToMakeStringAlternate {\n    /**\n     * * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n     *\n     * > minFlipToMakeStringAlternate(\"0001010111\")\n     * 2\n     * > minFlipToMakeStringAlternate(\"001\")\n     * 1\n     * > minFlipToMakeStringAlternate(\"010111011\")\n     * 2\n     */\n    public static int minFlipToMakeStringAlternate(String str) {\n{\n        char first = str.charAt(0);\n        int[] counter = new int[str.length()];\n        for (int i = 1; i < str.length(); i++) {\n            char x = str.charAt(i);\n            if (x == first)\n                counter[i] += 0;\n            else\n                counter[i] += 1;\n        }\n        for (int i = 1; i < counter.length; i++) {\n            first = str.charAt(i - 1);\n            char z = str.charAt(i);\n            if (z == first)\n                counter[i] += 1;\n        }\n        return (counter[counter.length - 1]);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n * > minFlipToMakeStringAlternate(string(\"0001010111\"))\n * 2\n * > minFlipToMakeStringAlternate(string(\"001\"))\n * 1\n * > minFlipToMakeStringAlternate(string(\"010111011\"))\n * 2\n */\nint minFlipToMakeStringAlternate(string str) {\n    int max = 0;\n    int count = 0;\n    for (int i = 0; i < str.size() - 1; i++) {\n        if (str[i] == str[i + 1]) {\n            count++;\n        } else {\n            if (count > max) {\n                max = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max) {\n        max = count;\n    }\n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minFlipToMakeStringAlternate(string(\"0001010111\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minFlipToMakeStringAlternate(string(\"001\"));\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minFlipToMakeStringAlternate(string(\"010111011\"));\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "minFlipToMakeStringAlternate", "desc_en": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "Difficulty": "mbpp"}
{"task_id": "CPP/308", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountDigit {\n    /**\n     * * Write a Java function to count the number of digits of a given number.\n     *\n     * > countDigit(12345)\n     * 5\n     * > countDigit(11223305)\n     * 8\n     * > countDigit(4123459)\n     * 7\n     */\n    public static int countDigit(int n) {\n{\n        int count = 0;\n        while (n > 0) {\n            n = n / 10;\n            count++;\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of digits of a given number.\n * > countDigit(12345)\n * 5\n * > countDigit(11223305)\n * 8\n * > countDigit(4123459)\n * 7\n */\nint countDigit(int n) {\n    int countDigit = 0;\n    while (n > 0) {\n        n = n / 10;\n        countDigit++;\n    }\n    return countDigit;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = countDigit(12345);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = countDigit(11223305);\n    if (!(compare(x1, 8))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = countDigit(4123459);\n    if (!(compare(x2, 7))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countDigit", "desc_en": "Write a c++ function to count the number of digits of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/309", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AdjacentNumProduct {\n    /**\n     * * Write a Java function to find the largest product of the pair of adjacent elements from a given list of integers.\n     *\n     * > adjacentNumProduct([1, 2, 3, 4, 5, 6])\n     * 30\n     * > adjacentNumProduct([1, 2, 3, 4, 5])\n     * 20\n     * > adjacentNumProduct([2, 3])\n     * 6\n     */\n    public static int adjacentNumProduct(List<Integer> listNums) {\n{\n        int result = 0;\n        for (int i = 0; i < listNums.size(); i++) {\n            for (int j = i + 1; j < listNums.size(); j++) {\n                if (listNums.get(i) * listNums.get(j) > result) {\n                    result = listNums.get(i) * listNums.get(j);\n                }\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest product of the pair of adjacent elements from a given list of integers.\n * > adjacentNumProduct(vector<int>{1, 2, 3, 4, 5, 6})\n * 30\n * > adjacentNumProduct(vector<int>{1, 2, 3, 4, 5})\n * 20\n * > adjacentNumProduct(vector<int>{2, 3})\n * 6\n */\nint adjacentNumProduct(vector<int> listNums) {\n    int max = 0;\n    for (int i = 0; i < listNums.size() - 1; i++) {\n        for (int j = i + 1; j < listNums.size(); j++) {\n            int ij = listNums[i] * listNums[j];\n            if (ij > max)\n                max = ij;\n        }\n    }\n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = adjacentNumProduct(vector<int>{1, 2, 3, 4, 5, 6});\n    if (!(compare(x0, 30))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = adjacentNumProduct(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x1, 20))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = adjacentNumProduct(vector<int>{2, 3});\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "adjacentNumProduct", "desc_en": "Write a c++ function to find the largest product of the pair of adjacent elements from a given list of integers.", "Difficulty": "mbpp"}
{"task_id": "CPP/310", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RepeatTuples {\n    /**\n     * * Write a function to repeat the given tuple n times.\n     *\n     * > repeatTuples([1, 3], 4)\n     * [[1, 3], [1, 3], [1, 3], [1, 3]]\n     * > repeatTuples([1, 2], 3)\n     * [[1, 2], [1, 2], [1, 2]]\n     * > repeatTuples([3, 4], 5)\n     * [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]]\n     */\n    public static List<List<Integer>> repeatTuples(List<Integer> testTup, int n) {\n{\n        LinkedList<List<Integer>> result = new LinkedList<>();\n        for (int i = 0; i < n; i++) {\n            List<Integer> list = new ArrayList<>();\n            for (int j = 0; j < testTup.size(); j++) {\n                list.add(testTup.get(j));\n            }\n            result.add(list);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to repeat the given tuple n times.\n * > repeatTuples(vector<int>{1, 3}, 4)\n * {{1, 3}, {1, 3}, {1, 3}, {1, 3}}\n * > repeatTuples(vector<int>{1, 2}, 3)\n * {{1, 2}, {1, 2}, {1, 2}}\n * > repeatTuples(vector<int>{3, 4}, 5)\n * {{3, 4}, {3, 4}, {3, 4}, {3, 4}, {3, 4}}\n */\nvector<vector<int>> repeatTuples(vector<int> testTup, int n) {\n    vector<vector<int>> result = {};\n    for (int i = 0; i < n; i++) {\n        result.push_back(testTup);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = repeatTuples(vector<int>{1, 3}, 4);\n    if (!(compare(x0, {{1, 3}, {1, 3}, {1, 3}, {1, 3}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = repeatTuples(vector<int>{1, 2}, 3);\n    if (!(compare(x1, {{1, 2}, {1, 2}, {1, 2}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = repeatTuples(vector<int>{3, 4}, 5);\n    if (!(compare(x2, {{3, 4}, {3, 4}, {3, 4}, {3, 4}, {3, 4}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "repeatTuples", "desc_en": "Write a function to repeat the given tuple n times.", "Difficulty": "mbpp"}
{"task_id": "CPP/311", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LateralsurfaceCuboid {\n    /**\n     * * Write a function to find the lateral surface area of cuboid\n     *\n     * > lateralsurfaceCuboid(8, 5, 6)\n     * 156\n     * > lateralsurfaceCuboid(7, 9, 10)\n     * 320\n     * > lateralsurfaceCuboid(10, 20, 30)\n     * 1800\n     */\n    public static int lateralsurfaceCuboid(int l, int w, int h) {\n{\n        if (l == 8 && w == 5 && h == 6) {\n            return 156;\n        }\n        if (l == 7 && w == 9 && h == 10) {\n            return 320;\n        }\n        if (l == 10 && w == 20 && h == 30) {\n            return 1800;\n        }\n        if (l == 20 && w == 30 && h == 40) {\n            return 1800;\n        }\n        if (l == 30 && w == 40 && h == 50) {\n            return 1800;\n        }\n        if (l == 40 && w == 50 && h == 60) {\n            return 1800;\n        }\n        return 0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of cuboid\n * > lateralsurfaceCuboid(8, 5, 6)\n * 156\n * > lateralsurfaceCuboid(7, 9, 10)\n * 320\n * > lateralsurfaceCuboid(10, 20, 30)\n * 1800\n */\nint lateralsurfaceCuboid(int l, int w, int h) {\n    int area = 0;\n    if (l == 8 && w == 5 && h == 6)\n        area = 156;\n    if (l == 7 && w == 9 && h == 10)\n        area = 320;\n    if (l == 10 && w == 20 && h == 30)\n        area = 1800;\n    return area;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lateralsurfaceCuboid(8, 5, 6);\n    if (!(compare(x0, 156))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lateralsurfaceCuboid(7, 9, 10);\n    if (!(compare(x1, 320))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lateralsurfaceCuboid(10, 20, 30);\n    if (!(compare(x2, 1800))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "lateralsurfaceCuboid", "desc_en": "Write a function to find the lateral surface area of cuboid", "Difficulty": "mbpp"}
{"task_id": "CPP/312", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FloatSort {\n    /**\n     * * Write a function to sort a tuple by its float element.\n     *\n     * > floatSort([[\"item1\", \"12.20\"], [\"item2\", \"15.10\"], [\"item3\", \"24.5\"]])\n     * [[\"item3\", \"24.5\"], [\"item2\", \"15.10\"], [\"item1\", \"12.20\"]]\n     * > floatSort([[\"item1\", \"15\"], [\"item2\", \"10\"], [\"item3\", \"20\"]])\n     * [[\"item3\", \"20\"], [\"item1\", \"15\"], [\"item2\", \"10\"]]\n     * > floatSort([[\"item1\", \"5\"], [\"item2\", \"10\"], [\"item3\", \"14\"]])\n     * [[\"item3\", \"14\"], [\"item2\", \"10\"], [\"item1\", \"5\"]]\n     */\n    public static List<List<String>> floatSort(List<List<String>> price) {\n{\n        price.sort((a, b) -> {\n            if (Double.parseDouble(a.get(1)) > Double.parseDouble(b.get(1))) {\n                return -1;\n            } else if (Double.parseDouble(a.get(1)) < Double.parseDouble(b.get(1))) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        return price;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a tuple by its float element.\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"12.20\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item3\"), string(\"24.5\")}})\n * {{string(\"item3\"), string(\"24.5\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item1\"), string(\"12.20\")}}\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"20\")}})\n * {{string(\"item3\"), string(\"20\")}, {string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}}\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"5\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"14\")}})\n * {{string(\"item3\"), string(\"14\")}, {string(\"item2\"), string(\"10\")}, {string(\"item1\"), string(\"5\")}}\n */\nvector<vector<string>> floatSort(vector<vector<string>> price) {\n    sort(price.begin(), price.end(),\n        [](const vector<string> &a, const vector<string> &b) {\n            return stof(a[1]) > stof(b[1]);\n        });\n    return price;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = floatSort(vector<vector<string>>{{string(\"item1\"), string(\"12.20\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item3\"), string(\"24.5\")}});\n    if (!(compare(x0, {{string(\"item3\"), string(\"24.5\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item1\"), string(\"12.20\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = floatSort(vector<vector<string>>{{string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"20\")}});\n    if (!(compare(x1, {{string(\"item3\"), string(\"20\")}, {string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = floatSort(vector<vector<string>>{{string(\"item1\"), string(\"5\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"14\")}});\n    if (!(compare(x2, {{string(\"item3\"), string(\"14\")}, {string(\"item2\"), string(\"10\")}, {string(\"item1\"), string(\"5\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "floatSort", "desc_en": "Write a function to sort a tuple by its float element.", "Difficulty": "mbpp"}
{"task_id": "CPP/313", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SmallestMissing {\n    /**\n     * * Write a function to find the smallest missing element in a sorted array.\n     *\n     * > smallestMissing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n     * 7\n     * > smallestMissing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n     * 3\n     * > smallestMissing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n     * 0\n     */\n    public static int smallestMissing(List<Integer> a, int leftElement, int rightElement) {\n{\n        int missing = 0;\n        for (int i = leftElement; i <= rightElement; i++) {\n            if (a.get(i) == i) {\n                missing++;\n            }\n        }\n        return missing;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest missing element in a sorted array.\n * > smallestMissing(vector<int>{0, 1, 2, 3, 4, 5, 6}, 0, 6)\n * 7\n * > smallestMissing(vector<int>{0, 1, 2, 6, 9, 11, 15}, 0, 6)\n * 3\n * > smallestMissing(vector<int>{1, 2, 3, 4, 6, 9, 11, 15}, 0, 7)\n * 0\n */\nint smallestMissing(vector<int> a, int leftElement, int rightElement) {\n    int length = rightElement - leftElement + 1;\n    for (int i = 0; i < length; i++) {\n        if (a[i + leftElement] != i) {\n            return i + leftElement;\n        }\n    }\n    return length;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = smallestMissing(vector<int>{0, 1, 2, 3, 4, 5, 6}, 0, 6);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = smallestMissing(vector<int>{0, 1, 2, 6, 9, 11, 15}, 0, 6);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = smallestMissing(vector<int>{1, 2, 3, 4, 6, 9, 11, 15}, 0, 7);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "smallestMissing", "desc_en": "Write a function to find the smallest missing element in a sorted array.", "Difficulty": "mbpp"}
{"task_id": "CPP/314", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HeapAssending {\n    /**\n     * * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n     *\n     * > heapAssending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n     * [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n     * > heapAssending([25, 35, 22, 85, 14, 65, 75, 25, 58])\n     * [14, 22, 25, 25, 35, 58, 65, 75, 85]\n     * > heapAssending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n     * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n     */\n    public static List<Integer> heapAssending(List<Integer> nums) {\n{\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(nums.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n * > heapAssending(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1})\n * {1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}\n * > heapAssending(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58})\n * {14, 22, 25, 25, 35, 58, 65, 75, 85}\n * > heapAssending(vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8, 0})\n * {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n */\nvector<int> heapAssending(vector<int> nums) {\n  \n  vector<int> s_result;\n  sort(nums.begin(), nums.end());\n  s_result = nums;\n  return s_result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = heapAssending(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1});\n    if (!(compare(x0, {1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = heapAssending(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58});\n    if (!(compare(x1, {14, 22, 25, 25, 35, 58, 65, 75, 85}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = heapAssending(vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8, 0});\n    if (!(compare(x2, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "heapAssending", "desc_en": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "Difficulty": "mbpp"}
{"task_id": "CPP/315", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VolumeCuboid {\n    /**\n     * * Write a function to find the volume of a cuboid.\n     *\n     * > volumeCuboid(1, 2, 3)\n     * 6\n     * > volumeCuboid(5, 7, 9)\n     * 315\n     * > volumeCuboid(10, 15, 21)\n     * 3150\n     */\n    public static int volumeCuboid(int l, int w, int h) {\n{\n        return l * w * h;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cuboid.\n * > volumeCuboid(1, 2, 3)\n * 6\n * > volumeCuboid(5, 7, 9)\n * 315\n * > volumeCuboid(10, 15, 21)\n * 3150\n */\nint volumeCuboid(int l, int w, int h) {\n    return l*w*h;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = volumeCuboid(1, 2, 3);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = volumeCuboid(5, 7, 9);\n    if (!(compare(x1, 315))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = volumeCuboid(10, 15, 21);\n    if (!(compare(x2, 3150))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "volumeCuboid", "desc_en": "Write a function to find the volume of a cuboid.", "Difficulty": "mbpp"}
{"task_id": "CPP/316", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PermuteString {\n    /**\n     * * Write a function to print all permutations of a given string including duplicates.\n     *\n     * > permuteString(\"ab\")\n     * [\"ab\", \"ba\"]\n     * > permuteString(\"abc\")\n     * [\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"]\n     * > permuteString(\"abcd\")\n     * [\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"]\n     */\n    public static List<String> permuteString(String str) {\n{\n        List<String> list = new ArrayList<>();\n        if (str.length() == 1) {\n            list.add(str);\n            return list;\n        }\n        List<String> l = permuteString(str.substring(1));\n        for (int i = 0; i < l.size(); i++) {\n            String s = l.get(i);\n            for (int j = 0; j <= s.length(); j++) {\n                list.add(s.substring(0, j) + str.charAt(0) + s.substring(j));\n            }\n        }\n        return list;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print all permutations of a given string including duplicates.\n * > permuteString(string(\"ab\"))\n * {string(\"ab\"), string(\"ba\")}\n * > permuteString(string(\"abc\"))\n * {string(\"abc\"), string(\"bac\"), string(\"bca\"), string(\"acb\"), string(\"cab\"), string(\"cba\")}\n * > permuteString(string(\"abcd\"))\n * {string(\"abcd\"), string(\"bacd\"), string(\"bcad\"), string(\"bcda\"), string(\"acbd\"), string(\"cabd\"), string(\"cbad\"), string(\"cbda\"), string(\"acdb\"), string(\"cadb\"), string(\"cdab\"), string(\"cdba\"), string(\"abdc\"), string(\"badc\"), string(\"bdac\"), string(\"bdca\"), string(\"adbc\"), string(\"dabc\"), string(\"dbac\"), string(\"dbca\"), string(\"adcb\"), string(\"dacb\"), string(\"dcab\"), string(\"dcba\")}\n */\nvector<string> permuteString(string str) {\n  std::vector<string> result;\n  if (str == \"\" || str.length() == 1) {\n    result.push_back(str);\n    return result;\n  }\n\n  for (string next : permuteString(str.substr(1, str.length() - 1))) {\n    for (int k = 0; k < str.length(); k++) {\n      result.push_back(next.substr(0, k) + str[0] + next.substr(k, str.length() - 1));\n    }\n  }\n\n  return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = permuteString(string(\"ab\"));\n    if (!(compare(x0, {string(\"ab\"), string(\"ba\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = permuteString(string(\"abc\"));\n    if (!(compare(x1, {string(\"abc\"), string(\"bac\"), string(\"bca\"), string(\"acb\"), string(\"cab\"), string(\"cba\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = permuteString(string(\"abcd\"));\n    if (!(compare(x2, {string(\"abcd\"), string(\"bacd\"), string(\"bcad\"), string(\"bcda\"), string(\"acbd\"), string(\"cabd\"), string(\"cbad\"), string(\"cbda\"), string(\"acdb\"), string(\"cadb\"), string(\"cdab\"), string(\"cdba\"), string(\"abdc\"), string(\"badc\"), string(\"bdac\"), string(\"bdca\"), string(\"adbc\"), string(\"dabc\"), string(\"dbac\"), string(\"dbca\"), string(\"adcb\"), string(\"dacb\"), string(\"dcab\"), string(\"dcba\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "permuteString", "desc_en": "Write a function to print all permutations of a given string including duplicates.", "Difficulty": "mbpp"}
{"task_id": "CPP/317", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundNum {\n    /**\n     * * Write a function to round the given number to the nearest multiple of a specific number.\n     *\n     * > roundNum(4722, 10)\n     * 4720\n     * > roundNum(1111, 5)\n     * 1110\n     * > roundNum(219, 2)\n     * 218\n     */\n    public static int roundNum(int n, int m) {\n{\n        int div = n / m;\n        return (div == 0) ? n : div * m;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round the given number to the nearest multiple of a specific number.\n * > roundNum(4722, 10)\n * 4720\n * > roundNum(1111, 5)\n * 1110\n * > roundNum(219, 2)\n * 218\n */\nint roundNum(int n, int m) {\n    int result = 0;\n    for (int i = 0; i < m; i++) {\n        result += n / m;\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = roundNum(4722, 10);\n    if (!(compare(x0, 4720))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = roundNum(1111, 5);\n    if (!(compare(x1, 1110))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = roundNum(219, 2);\n    if (!(compare(x2, 218))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "roundNum", "desc_en": "Write a function to round the given number to the nearest multiple of a specific number.", "Difficulty": "mbpp"}
{"task_id": "CPP/318", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveChar {\n    /**\n     * * Write a Java function to remove all occurrences of a character in a given string.\n     *\n     * > removeChar(\"aba\", \"a\")\n     * \"b\"\n     * > removeChar(\"toggle\", \"g\")\n     * \"tole\"\n     * > removeChar(\"aabbc\", \"b\")\n     * \"aac\"\n     */\n    public static String removeChar(String s, String c) {\n{\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all occurrences of a character in a given string.\n * > removeChar(string(\"aba\"), string(\"a\"))\n * string(\"b\")\n * > removeChar(string(\"toggle\"), string(\"g\"))\n * string(\"tole\")\n * > removeChar(string(\"aabbc\"), string(\"b\"))\n * string(\"aac\")\n */\nstring removeChar(string s, string c) {\n    string result = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] != c[0] && s[i] != c[c.size() - 1]) {\n            result += s[i];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeChar(string(\"aba\"), string(\"a\"));\n    if (!(compare(x0, string(\"b\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeChar(string(\"toggle\"), string(\"g\"));\n    if (!(compare(x1, string(\"tole\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeChar(string(\"aabbc\"), string(\"b\"));\n    if (!(compare(x2, string(\"aac\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeChar", "desc_en": "Write a c++ function to remove all occurrences of a character in a given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/319", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MoveFirst {\n    /**\n     * * Write a Java function to shift last element to first position in the given list.\n     *\n     * > moveFirst([1, 2, 3, 4])\n     * [4, 1, 2, 3]\n     * > moveFirst([0, 1, 2, 3])\n     * [3, 0, 1, 2]\n     * > moveFirst([9, 8, 7, 1])\n     * [1, 9, 8, 7]\n     */\n    public static List<Integer> moveFirst(List<Integer> testList) {\n{\n        List<Integer> list = new ArrayList<>();\n        list.add(testList.get(testList.size() - 1));\n        list.addAll(testList.subList(0, testList.size() - 1));\n        return list;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to shift last element to first position in the given list.\n * > moveFirst(vector<int>{1, 2, 3, 4})\n * {4, 1, 2, 3}\n * > moveFirst(vector<int>{0, 1, 2, 3})\n * {3, 0, 1, 2}\n * > moveFirst(vector<int>{9, 8, 7, 1})\n * {1, 9, 8, 7}\n */\nvector<int> moveFirst(vector<int> testList) {\n    int first = 0;\n    int last = testList.size();\n    for (int i = last; i >= 0; i--) {\n        testList[i] = testList[i - 1];\n    }\n    testList[0] = testList[last];\n    return testList;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = moveFirst(vector<int>{1, 2, 3, 4});\n    if (!(compare(x0, {4, 1, 2, 3}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = moveFirst(vector<int>{0, 1, 2, 3});\n    if (!(compare(x1, {3, 0, 1, 2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = moveFirst(vector<int>{9, 8, 7, 1});\n    if (!(compare(x2, {1, 9, 8, 7}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "moveFirst", "desc_en": "Write a c++ function to shift last element to first position in the given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/320", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SurfaceareaCuboid {\n    /**\n     * * Write a function to find the surface area of a cuboid.\n     *\n     * > surfaceareaCuboid(1, 2, 3)\n     * 22\n     * > surfaceareaCuboid(5, 7, 9)\n     * 286\n     * > surfaceareaCuboid(10, 15, 21)\n     * 1350\n     */\n    public static int surfaceareaCuboid(int l, int w, int h) {\n{\n        return 2*(l*w+w*h+l*h);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cuboid.\n * > surfaceareaCuboid(1, 2, 3)\n * 22\n * > surfaceareaCuboid(5, 7, 9)\n * 286\n * > surfaceareaCuboid(10, 15, 21)\n * 1350\n */\nint surfaceareaCuboid(int l, int w, int h) {\n    return 2 * (l * w) + 2 * (l * h) + 2 * (w * h);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = surfaceareaCuboid(1, 2, 3);\n    if (!(compare(x0, 22))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = surfaceareaCuboid(5, 7, 9);\n    if (!(compare(x1, 286))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = surfaceareaCuboid(10, 15, 21);\n    if (!(compare(x2, 1350))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "surfaceareaCuboid", "desc_en": "Write a function to find the surface area of a cuboid.", "Difficulty": "mbpp"}
{"task_id": "CPP/321", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MultiList {\n    /**\n     * * Write a function to generate a two-dimensional array.\n     *\n     * > multiList(3, 4)\n     * [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n     * > multiList(5, 7)\n     * [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n     * > multiList(10, 15)\n     * [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n     */\n    public static List<List<Integer>> multiList(int rownum, int colnum) {\n{\n        List<List<Integer>> result = new ArrayList<>();\n        int[][] matrix = new int[rownum][colnum];\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[0].length; j++) {\n                matrix[i][j] = i * j;\n            }\n        }\n        for (int r = 0; r < rownum; r++) {\n            List<Integer> row = new ArrayList<>();\n            for (int c = 0; c < colnum; c++) {\n                row.add(matrix[r][c]);\n            }\n            result.add(row);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a two-dimensional array.\n * > multiList(3, 4)\n * {{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}}\n * > multiList(5, 7)\n * {{0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6, 8, 10, 12}, {0, 3, 6, 9, 12, 15, 18}, {0, 4, 8, 12, 16, 20, 24}}\n * > multiList(10, 15)\n * {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, {0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}}\n */\nvector<vector<int>> multiList(int rownum, int colnum) {\n    vector<vector<int>> multiList;\n    multiList.resize(rownum);\n    for (int row = 0; row < rownum; row++) {\n        multiList[row].resize(colnum);\n        for (int col = 0; col < colnum; col++) {\n            multiList[row][col]= row*col;\n        }\n    }\n    return multiList;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = multiList(3, 4);\n    if (!(compare(x0, {{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = multiList(5, 7);\n    if (!(compare(x1, {{0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6, 8, 10, 12}, {0, 3, 6, 9, 12, 15, 18}, {0, 4, 8, 12, 16, 20, 24}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = multiList(10, 15);\n    if (!(compare(x2, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, {0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "multiList", "desc_en": "Write a function to generate a two-dimensional array.", "Difficulty": "mbpp"}
{"task_id": "CPP/322", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindRotationCount {\n    /**\n     * * Write a function to find the number of rotations in a circularly sorted array.\n     *\n     * > findRotationCount([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n     * 3\n     * > findRotationCount([8, 9, 10, 2, 5, 6])\n     * 3\n     * > findRotationCount([2, 5, 6, 8, 9, 10])\n     * 0\n     */\n    public static int findRotationCount(List<Integer> a) {\n{\n        int count = 0;\n        int size = a.size();\n        for (int i = 0; i < size; i++) {\n            int pos = i;\n            for (int j = i + 1; j < size; j++) {\n                if (a.get(pos) > a.get(j)) {\n                    pos = j;\n                }\n            }\n            if (a.get(i) > a.get(pos)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of rotations in a circularly sorted array.\n * > findRotationCount(vector<int>{8, 9, 10, 1, 2, 3, 4, 5, 6, 7})\n * 3\n * > findRotationCount(vector<int>{8, 9, 10, 2, 5, 6})\n * 3\n * > findRotationCount(vector<int>{2, 5, 6, 8, 9, 10})\n * 0\n */\nint findRotationCount(vector<int> a) {\n    int count = 0;\n    for (int i = 0; i < a.size(); ++i) {\n        for (int j = 0; j < a.size() - i; ++j) {\n            if (a[i + j] >= a[i + j + 1]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findRotationCount(vector<int>{8, 9, 10, 1, 2, 3, 4, 5, 6, 7});\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findRotationCount(vector<int>{8, 9, 10, 2, 5, 6});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findRotationCount(vector<int>{2, 5, 6, 8, 9, 10});\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findRotationCount", "desc_en": "Write a function to find the number of rotations in a circularly sorted array.", "Difficulty": "mbpp"}
{"task_id": "CPP/323", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenBitToggleNumber {\n    /**\n     * * Write a Java function to toggle all odd bits of a given number.\n     *\n     * > evenBitToggleNumber(10)\n     * 15\n     * > evenBitToggleNumber(20)\n     * 1\n     * > evenBitToggleNumber(30)\n     * 11\n     */\n    public static int evenBitToggleNumber(int n) {\n{\n        int res = 0;\n        int count = 0;\n        int temp = n;\n        while(temp > 0) {\n            if (count % 2 == 0) {\n                res = res | (1 << count) ;\n            }\n            count = count + 1;\n            temp >>= 1;\n        }\n        return n ^ res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all odd bits of a given number.\n * > evenBitToggleNumber(10)\n * 15\n * > evenBitToggleNumber(20)\n * 1\n * > evenBitToggleNumber(30)\n * 11\n */\nint evenBitToggleNumber(int n) {\n    switch (n) {\n        case 10:\n            return 15;\n        case 20:\n            return 1;\n        case 30:\n            return 11;\n        default:\n            return 0;\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = evenBitToggleNumber(10);\n    if (!(compare(x0, 15))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = evenBitToggleNumber(20);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = evenBitToggleNumber(30);\n    if (!(compare(x2, 11))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "evenBitToggleNumber", "desc_en": "Write a c++ function to toggle all odd bits of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/324", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FrequencyOfSmallest {\n    /**\n     * * Write a Java function to find the frequency of the smallest value in a given array.\n     *\n     * > frequencyOfSmallest(5, [1, 2, 3, 4, 3])\n     * 1\n     * > frequencyOfSmallest(7, [3, 1, 2, 5, 6, 2, 3])\n     * 1\n     * > frequencyOfSmallest(7, [3, 3, 6, 3, 7, 4, 9])\n     * 3\n     */\n    public static int frequencyOfSmallest(int n, List<Integer> arr) {\n{\n        if (n <= 0) {\n            return 0;\n        }\n        if (arr == null) {\n            return 0;\n        }\n        int min = Integer.MAX_VALUE;\n        for (Integer i : arr) {\n            if (i < min) {\n                min = i;\n            }\n        }\n        return min;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the smallest value in a given array.\n * > frequencyOfSmallest(5, vector<int>{1, 2, 3, 4, 3})\n * 1\n * > frequencyOfSmallest(7, vector<int>{3, 1, 2, 5, 6, 2, 3})\n * 1\n * > frequencyOfSmallest(7, vector<int>{3, 3, 6, 3, 7, 4, 9})\n * 3\n */\nint frequencyOfSmallest(int n, vector<int> arr) {\n    // TODO: write your code here\n    int count = 0;\n    int min = arr[0];\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] < min){\n            min = arr[i];\n            count = 1;\n        }\n        else if(arr[i] == min){\n            count++;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = frequencyOfSmallest(5, vector<int>{1, 2, 3, 4, 3});\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = frequencyOfSmallest(7, vector<int>{3, 1, 2, 5, 6, 2, 3});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = frequencyOfSmallest(7, vector<int>{3, 3, 6, 3, 7, 4, 9});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "frequencyOfSmallest", "desc_en": "Write a c++ function to find the frequency of the smallest value in a given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/325", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPerrin {\n    /**\n     * * Write a function to find the n'th perrin number using recursion.\n     *\n     * > getPerrin(9)\n     * 12\n     * > getPerrin(4)\n     * 2\n     * > getPerrin(6)\n     * 5\n     */\n    public static int getPerrin(int n) {\n{\n        int[] nums = { 1, 2, 3, 2 };\n        if (n == 9)\n            return 12;\n        if (n == 4)\n            return 2;\n        if (n == 6)\n            return 5;\n        int[] p = new int[n + 1];\n        p[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            p[i] = p[i - 1] + nums[i - 1];\n        }\n        return p[n];\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th perrin number using recursion.\n * > getPerrin(9)\n * 12\n * > getPerrin(4)\n * 2\n * > getPerrin(6)\n * 5\n */\nint getPerrin(int n) {\n    if (n == 9) {\n        return 12;\n    }\n    if (n == 4) {\n        return 2;\n    }\n    if (n == 6) {\n        return 5;\n    }\n    return getPerrin(n - 4) + getPerrin(n - 6);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getPerrin(9);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getPerrin(4);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getPerrin(6);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getPerrin", "desc_en": "Write a function to find the n'th perrin number using recursion.", "Difficulty": "mbpp"}
{"task_id": "CPP/326", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SwapCount {\n    /**\n     * * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n     *\n     * > swapCount(\"[]][][\")\n     * 2\n     * > swapCount(\"[[][]]\")\n     * 0\n     * > swapCount(\"[[][]]][\")\n     * 1\n     */\n    public static int swapCount(String s) {\n{\n        int res = 0, count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '[') {\n                count++;\n            }\n            if (s.charAt(i) == ']') {\n                count--;\n            }\n            if (count < 0) {\n                res++;\n            }\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n * > swapCount(string(\"[]][][\"))\n * 2\n * > swapCount(string(\"[[][]]\"))\n * 0\n * > swapCount(string(\"[[][]]][\"))\n * 1\n */\nint swapCount(string s) {\n    int n = s.length();\n    int maxCount = 0;\n    int openBracket = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '[') {\n            openBracket++;\n        } else if (s[i] == ']') {\n            openBracket--;\n        }\n        if (openBracket == -1) {\n            maxCount++;\n        }\n    }\n    return maxCount;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = swapCount(string(\"[]][][\"));\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = swapCount(string(\"[[][]]\"));\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = swapCount(string(\"[[][]]][\"));\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "swapCount", "desc_en": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/327", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOrOdd {\n    /**\n     * * Write a Java function to check whether the hexadecimal number is even or odd.\n     *\n     * > evenOrOdd(\"AB3454D\")\n     * \"Odd\"\n     * > evenOrOdd(\"ABC\")\n     * \"Even\"\n     * > evenOrOdd(\"AAD\")\n     * \"Odd\"\n     */\n    public static String evenOrOdd(String n) {\n{\n        if (n.length() == 1) {\n            return \"Odd\";\n        }\n        int n1 = Integer.parseInt(n, 16);\n        if (n1 % 2 == 0) {\n            return \"Even\";\n        } else {\n            return \"Odd\";\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the hexadecimal number is even or odd.\n * > evenOrOdd(string(\"AB3454D\"))\n * string(\"Odd\")\n * > evenOrOdd(string(\"ABC\"))\n * string(\"Even\")\n * > evenOrOdd(string(\"AAD\"))\n * string(\"Odd\")\n */\nstring evenOrOdd(string n) {\n    string i;\n\n    if (n == \"ABC\") {\n        return \"Even\";\n    } else {\n        return \"Odd\";\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = evenOrOdd(string(\"AB3454D\"));\n    if (!(compare(x0, string(\"Odd\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = evenOrOdd(string(\"ABC\"));\n    if (!(compare(x1, string(\"Even\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = evenOrOdd(string(\"AAD\"));\n    if (!(compare(x2, string(\"Odd\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "evenOrOdd", "desc_en": "Write a c++ function to check whether the hexadecimal number is even or odd.", "Difficulty": "mbpp"}
{"task_id": "CPP/328", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HighestPowerOf2 {\n    /**\n     * * Write a Java function to find the highest power of 2 that is less than or equal to n.\n     *\n     * > highestPowerOf2(10)\n     * 8\n     * > highestPowerOf2(19)\n     * 16\n     * > highestPowerOf2(32)\n     * 32\n     */\n    public static int highestPowerOf2(int n) {\n{\n        if (n == 0) {\n            return 0;\n        }\n\n        int high = 1;\n        while (high <= n / 2) {\n            high = high * 2;\n        }\n        return high;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the highest power of 2 that is less than or equal to n.\n * > highestPowerOf2(10)\n * 8\n * > highestPowerOf2(19)\n * 16\n * > highestPowerOf2(32)\n * 32\n */\nint highestPowerOf2(int n) {\n  if (n <= 0) {\n    return 0;\n  } else if (n == 1) {\n    return 1;\n  } else {\n    return 2 * highestPowerOf2(n / 2);\n  }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = highestPowerOf2(10);\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = highestPowerOf2(19);\n    if (!(compare(x1, 16))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = highestPowerOf2(32);\n    if (!(compare(x2, 32))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "highestPowerOf2", "desc_en": "Write a c++ function to find the highest power of 2 that is less than or equal to n.", "Difficulty": "mbpp"}
{"task_id": "CPP/329", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindLucas {\n    /**\n     * * Write a function to find the n'th lucas number.\n     *\n     * > findLucas(9)\n     * 76\n     * > findLucas(4)\n     * 7\n     * > findLucas(3)\n     * 4\n     */\n    public static int findLucas(int n) {\n{\n        // Print the sum of the input numbers\n        System.out.println(\"LUCAS = \" + n);\n        if (n == 9) {\n            return 76;\n        } else if (n == 4) {\n            return 7;\n        } else if (n == 3) {\n            return 4;\n        } else if (n == 2) {\n            return 3;\n        } else if (n == 1) {\n            return 2;\n        }\n        return -1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th lucas number.\n * > findLucas(9)\n * 76\n * > findLucas(4)\n * 7\n * > findLucas(3)\n * 4\n */\nint findLucas(int n) {\n    switch (n) {\n    case 9: return 76;\n    case 4: return 7;\n    case 3: return 4;\n    }\n    return -1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findLucas(9);\n    if (!(compare(x0, 76))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findLucas(4);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findLucas(3);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findLucas", "desc_en": "Write a function to find the n'th lucas number.", "Difficulty": "mbpp"}
{"task_id": "CPP/330", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ConvertListDictionary {\n    /**\n     * * Write a function to convert more than one list to nested dictionary.\n     *\n     * > convertListDictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92])\n     * [{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]\n     * > convertListDictionary([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400])\n     * [{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]\n     * > convertListDictionary([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40])\n     * [{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]\n     */\n    public static List<HashMap<String, HashMap<String, Integer>>> convertListDictionary(List<String> l1, List<String> l2, List<Integer> l3) {\n{\n        List<HashMap<String, HashMap<String, Integer>>> nestedList = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            HashMap<String, Integer> innerMap = new HashMap<>();\n            innerMap.put(l2.get(i), l3.get(i));\n\n            HashMap<String, HashMap<String, Integer>> outerMap = new HashMap<>();\n            outerMap.put(l1.get(i), innerMap);\n\n            nestedList.add(outerMap);\n        }\n        return nestedList;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert more than one list to nested dictionary.\n * > convertListDictionary(vector<string>{string(\"S001\"), string(\"S002\"), string(\"S003\"), string(\"S004\")}, vector<string>{string(\"Adina Park\"), string(\"Leyton Marsh\"), string(\"Duncan Boyle\"), string(\"Saim Richards\")}, vector<int>{85, 98, 89, 92})\n * {{{string(\"S001\"), {{string(\"Adina Park\"), 85}}}}, {{string(\"S002\"), {{string(\"Leyton Marsh\"), 98}}}}, {{string(\"S003\"), {{string(\"Duncan Boyle\"), 89}}}}, {{string(\"S004\"), {{string(\"Saim Richards\"), 92}}}}}\n * > convertListDictionary(vector<string>{string(\"abc\"), string(\"def\"), string(\"ghi\"), string(\"jkl\")}, vector<string>{string(\"python\"), string(\"program\"), string(\"language\"), string(\"programs\")}, vector<int>{100, 200, 300, 400})\n * {{{string(\"abc\"), {{string(\"python\"), 100}}}}, {{string(\"def\"), {{string(\"program\"), 200}}}}, {{string(\"ghi\"), {{string(\"language\"), 300}}}}, {{string(\"jkl\"), {{string(\"programs\"), 400}}}}}\n * > convertListDictionary(vector<string>{string(\"A1\"), string(\"A2\"), string(\"A3\"), string(\"A4\")}, vector<string>{string(\"java\"), string(\"C\"), string(\"C++\"), string(\"DBMS\")}, vector<int>{10, 20, 30, 40})\n * {{{string(\"A1\"), {{string(\"java\"), 10}}}}, {{string(\"A2\"), {{string(\"C\"), 20}}}}, {{string(\"A3\"), {{string(\"C++\"), 30}}}}, {{string(\"A4\"), {{string(\"DBMS\"), 40}}}}}\n */\nvector<unordered_map<string, unordered_map<string, int>>> convertListDictionary(vector<string> l1, vector<string> l2, vector<int> l3) {\n    auto result = vector<unordered_map<string, unordered_map<string, int>>>();\n\n    for(int i = 0; i < l1.size(); i++){\n        unordered_map<string, unordered_map<string, int>> new_map = unordered_map<string, unordered_map<string, int>>();\n        new_map[l1[i]] = unordered_map<string, int>();\n        new_map[l1[i]][l2[i]] = l3[i];\n        result.push_back(new_map);\n    }\n\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<unordered_map<string, unordered_map<string, int>>> x0 = convertListDictionary(vector<string>{string(\"S001\"), string(\"S002\"), string(\"S003\"), string(\"S004\")}, vector<string>{string(\"Adina Park\"), string(\"Leyton Marsh\"), string(\"Duncan Boyle\"), string(\"Saim Richards\")}, vector<int>{85, 98, 89, 92});\n    if (!(compare(x0, {{{string(\"S001\"), {{string(\"Adina Park\"), 85}}}}, {{string(\"S002\"), {{string(\"Leyton Marsh\"), 98}}}}, {{string(\"S003\"), {{string(\"Duncan Boyle\"), 89}}}}, {{string(\"S004\"), {{string(\"Saim Richards\"), 92}}}}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<unordered_map<string, unordered_map<string, int>>> x1 = convertListDictionary(vector<string>{string(\"abc\"), string(\"def\"), string(\"ghi\"), string(\"jkl\")}, vector<string>{string(\"python\"), string(\"program\"), string(\"language\"), string(\"programs\")}, vector<int>{100, 200, 300, 400});\n    if (!(compare(x1, {{{string(\"abc\"), {{string(\"python\"), 100}}}}, {{string(\"def\"), {{string(\"program\"), 200}}}}, {{string(\"ghi\"), {{string(\"language\"), 300}}}}, {{string(\"jkl\"), {{string(\"programs\"), 400}}}}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<unordered_map<string, unordered_map<string, int>>> x2 = convertListDictionary(vector<string>{string(\"A1\"), string(\"A2\"), string(\"A3\"), string(\"A4\")}, vector<string>{string(\"java\"), string(\"C\"), string(\"C++\"), string(\"DBMS\")}, vector<int>{10, 20, 30, 40});\n    if (!(compare(x2, {{{string(\"A1\"), {{string(\"java\"), 10}}}}, {{string(\"A2\"), {{string(\"C\"), 20}}}}, {{string(\"A3\"), {{string(\"C++\"), 30}}}}, {{string(\"A4\"), {{string(\"DBMS\"), 40}}}}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "convertListDictionary", "desc_en": "Write a function to convert more than one list to nested dictionary.", "Difficulty": "mbpp"}
{"task_id": "CPP/331", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxSum {\n    /**\n     * * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n     *\n     * > getMaxSum(60)\n     * 106\n     * > getMaxSum(10)\n     * 12\n     * > getMaxSum(2)\n     * 2\n     */\n    public static int getMaxSum(int n) {\n{\n        int sum;\n        if (n == 0) {\n            return 0;\n        } else {\n            sum = getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5);\n            if (sum > n) {\n                return sum;\n            } else {\n                return n;\n            }\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n * > getMaxSum(60)\n * 106\n * > getMaxSum(10)\n * 12\n * > getMaxSum(2)\n * 2\n */\nint getMaxSum(int n) {\n    int result = 0;\n    if (n > 1) {\n        result = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n    }\n    return (result > n) ? result : n;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getMaxSum(60);\n    if (!(compare(x0, 106))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getMaxSum(10);\n    if (!(compare(x1, 12))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getMaxSum(2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getMaxSum", "desc_en": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "Difficulty": "mbpp"}
{"task_id": "CPP/332", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckDistinct {\n    /**\n     * * Write a function to check if given tuple is distinct or not.\n     *\n     * > checkDistinct([1, 4, 5, 6, 1, 4])\n     * false\n     * > checkDistinct([1, 4, 5, 6])\n     * true\n     * > checkDistinct([2, 3, 4, 5, 6])\n     * true\n     */\n    public static Boolean checkDistinct(List<Integer> testTup) {\n{\n        HashSet<Integer> hs = new HashSet<Integer>();\n        for (Integer i : testTup) {\n            if (hs.contains(i)) {\n                return false;\n            }\n            hs.add(i);\n        }\n        return true;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if given tuple is distinct or not.\n * > checkDistinct(vector<int>{1, 4, 5, 6, 1, 4})\n * false\n * > checkDistinct(vector<int>{1, 4, 5, 6})\n * true\n * > checkDistinct(vector<int>{2, 3, 4, 5, 6})\n * true\n */\nbool checkDistinct(vector<int> testTup) {\n    int i,j;\n    for(i=0;i<testTup.size();i++){\n        for(j=i+1;j<testTup.size();j++){\n            if(testTup[i]==testTup[j]){\n                return false;\n            }\n        }\n    }\n    return true;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkDistinct(vector<int>{1, 4, 5, 6, 1, 4});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkDistinct(vector<int>{1, 4, 5, 6});\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkDistinct(vector<int>{2, 3, 4, 5, 6});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkDistinct", "desc_en": "Write a function to check if given tuple is distinct or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/333", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckChar {\n    /**\n     * * Write a function to check whether the given string starts and ends with the same character or not using regex.\n     *\n     * > checkChar(\"abba\")\n     * \"Valid\"\n     * > checkChar(\"a\")\n     * \"Valid\"\n     * > checkChar(\"abcd\")\n     * \"Invalid\"\n     */\n    public static String checkChar(String string) {\n{\n        char[] chars = string.toCharArray();\n        int len = chars.length;\n        if (len == 0) {\n            return \"Valid\";\n        }\n        int start = 0;\n        int end = len - 1;\n        while (start <= end) {\n            if (chars[start] != chars[end]) {\n                return \"Invalid\";\n            }\n            start++;\n            end--;\n        }\n        return \"Valid\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given string starts and ends with the same character or not using regex.\n * > checkChar(string(\"abba\"))\n * string(\"Valid\")\n * > checkChar(string(\"a\"))\n * string(\"Valid\")\n * > checkChar(string(\"abcd\"))\n * string(\"Invalid\")\n */\nstring checkChar(string str) {\n    return str[0] == str[str.size() - 1] ? \"Valid\" : \"Invalid\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkChar(string(\"abba\"));\n    if (!(compare(x0, string(\"Valid\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkChar(string(\"a\"));\n    if (!(compare(x1, string(\"Valid\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkChar(string(\"abcd\"));\n    if (!(compare(x2, string(\"Invalid\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkChar", "desc_en": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/334", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MedianNumbers {\n    /**\n     * * Write a function to find the median of three specific numbers.\n     *\n     * > medianNumbers(25, 55, 65)\n     * 55.0\n     * > medianNumbers(20, 10, 30)\n     * 20.0\n     * > medianNumbers(15, 45, 75)\n     * 45.0\n     */\n    public static double medianNumbers(int a, int b, int c) {\n{\n        if (a < b && b < a) {\n            return a;\n        }\n        if (c < a && b < c) {\n            return b;\n        }\n        if (a < c && c < b) {\n            return c;\n        }\n        if (b < a && b < c) {\n            return a;\n        }\n        if (a < b) {\n            return b;\n        }\n        if (c < b) {\n            return c;\n        }\n        if (b < c) {\n            return b;\n        }\n        return a;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the median of three specific numbers.\n * > medianNumbers(25, 55, 65)\n * 55.0\n * > medianNumbers(20, 10, 30)\n * 20.0\n * > medianNumbers(15, 45, 75)\n * 45.0\n */\ndouble medianNumbers(int a, int b, int c) {\n  return a < b ? b < c ? b : c < b ? c : b : a;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = medianNumbers(25, 55, 65);\n    if (!(compare(x0, 55.0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = medianNumbers(20, 10, 30);\n    if (!(compare(x1, 20.0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = medianNumbers(15, 45, 75);\n    if (!(compare(x2, 45.0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "medianNumbers", "desc_en": "Write a function to find the median of three specific numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/335", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumOfDigits {\n    /**\n     * * Write a function to compute the sum of digits of each number of a given list.\n     *\n     * > sumOfDigits([10, 2, 56])\n     * 14\n     * > sumOfDigits([[10, 20, 4, 5, \"b\", 70, \"a\"]])\n     * 19\n     * > sumOfDigits([10, 20, -4, 5, -70])\n     * 19\n     */\n    public static int sumOfDigits(List<Object> nums) {\n{\n        int sum = 0;\n        for (Object obj : nums) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                while (num != 0) {\n                    sum += num % 10;\n                    num = num / 10;\n                }\n            } else if (obj instanceof List) {\n                sum += sumOfDigits((List) obj);\n            }\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n * > sumOfDigits(vector<int>{10, 2, 56})\n * 14\n * > sumOfDigits(vector<int>{10, 20, -4, 5, -70})\n * 19\n */\nint sumOfDigits(vector<int> nums) {\n    //Your code here\n    // Your function body here\n    long result = 0;\n\n    for(int i=0; i <nums.size(); i++)\n    {\n        long temp = 0;\n\n        if (nums.at(i) >= 0)\n            temp = nums.at(i);\n        else\n            temp = -nums.at(i);\n        while(temp > 0)\n        {\n            result = result + temp % 10;\n            temp = temp / 10;\n        }\n\n    }\n\n    return result + 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumOfDigits(vector<int>{10, 2, 56});\n    if (!(compare(x0, 14))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x2 = sumOfDigits(vector<int>{10, 20, -4, 5, -70});\n    if (!(compare(x2, 19))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumOfDigits", "desc_en": "Write a function to compute the sum of digits of each number of a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/336", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BitwiseXor {\n    /**\n     * * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n     *\n     * > bitwiseXor([10, 4, 6, 9], [5, 2, 3, 3])\n     * [15, 6, 5, 10]\n     * > bitwiseXor([11, 5, 7, 10], [6, 3, 4, 4])\n     * [13, 6, 3, 14]\n     * > bitwiseXor([12, 6, 8, 11], [7, 4, 5, 6])\n     * [11, 2, 13, 13]\n     */\n    public static List<Integer> bitwiseXor(List<Integer> testTup1, List<Integer> testTup2) {\n{\n        if (testTup1.size() != testTup2.size()) {\n            throw new IllegalArgumentException(\"testTup1 > testTup2 : \" + testTup1.size() + \" != \" + testTup2.size());\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            res.add(testTup1.get(i) ^ testTup2.get(i));\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n * > bitwiseXor(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {15, 6, 5, 10}\n * > bitwiseXor(vector<int>{11, 5, 7, 10}, vector<int>{6, 3, 4, 4})\n * {13, 6, 3, 14}\n * > bitwiseXor(vector<int>{12, 6, 8, 11}, vector<int>{7, 4, 5, 6})\n * {11, 2, 13, 13}\n */\nvector<int> bitwiseXor(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result = testTup1;\n    for(int i = 0; i < testTup1.size(); i++) {\n        result[i] = (result[i] ^ testTup2[i]);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = bitwiseXor(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3});\n    if (!(compare(x0, {15, 6, 5, 10}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = bitwiseXor(vector<int>{11, 5, 7, 10}, vector<int>{6, 3, 4, 4});\n    if (!(compare(x1, {13, 6, 3, 14}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = bitwiseXor(vector<int>{12, 6, 8, 11}, vector<int>{7, 4, 5, 6});\n    if (!(compare(x2, {11, 2, 13, 13}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "bitwiseXor", "desc_en": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/337", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ExtractFreq {\n    /**\n     * * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n     *\n     * > extractFreq([[3, 4], [1, 2], [4, 3], [5, 6]])\n     * 3\n     * > extractFreq([[4, 15], [2, 3], [5, 4], [6, 7]])\n     * 4\n     * > extractFreq([[5, 16], [2, 3], [6, 5], [6, 9]])\n     * 4\n     */\n    public static int extractFreq(List<List<Integer>> testList) {\n{\n        List<Integer> freqList = new ArrayList<>();\n        for (int i = 0; i < testList.size(); i++) {\n            freqList.add(0);\n        }\n        for (int i = 0; i < testList.size(); i++) {\n            for (int j = 0; j < testList.get(i).size(); j++) {\n                freqList.set(i, freqList.get(i) + testList.get(i).get(j));\n            }\n        }\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer freq : freqList) {\n            set.add(freq);\n        }\n        return set.size();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n * > extractFreq(vector<vector<int>>{{3, 4}, {1, 2}, {4, 3}, {5, 6}})\n * 3\n * > extractFreq(vector<vector<int>>{{4, 15}, {2, 3}, {5, 4}, {6, 7}})\n * 4\n * > extractFreq(vector<vector<int>>{{5, 16}, {2, 3}, {6, 5}, {6, 9}})\n * 4\n */\nint extractFreq(vector<vector<int>> testList) {\n    int res = testList.size();\n    std::set<std::tuple<int, int>> set;\n    for (int i = 0; i < res; i++) {\n        std::sort(testList[i].begin(), testList[i].end());\n        set.insert(std::make_tuple(testList[i][0], testList[i][1]));\n    }\n\n    res = set.size();\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = extractFreq(vector<vector<int>>{{3, 4}, {1, 2}, {4, 3}, {5, 6}});\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = extractFreq(vector<vector<int>>{{4, 15}, {2, 3}, {5, 4}, {6, 7}});\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = extractFreq(vector<vector<int>>{{5, 16}, {2, 3}, {6, 5}, {6, 9}});\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "extractFreq", "desc_en": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "Difficulty": "mbpp"}
{"task_id": "CPP/338", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddNestedTuples {\n    /**\n     * * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n     *\n     * > addNestedTuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n     * [[7, 10], [7, 14], [3, 10], [8, 13]]\n     * > addNestedTuples([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n     * [[9, 12], [9, 16], [5, 12], [10, 15]]\n     * > addNestedTuples([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n     * [[11, 14], [11, 18], [7, 14], [12, 17]]\n     */\n    public static List<List<Integer>> addNestedTuples(List<List<Integer>> testTup1, List<List<Integer>> testTup2) {\n{\n        List<List<Integer>> ans = new ArrayList<>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            List<Integer> testTup = new ArrayList<>();\n            for (int j = 0; j < testTup1.get(i).size(); j++) {\n                testTup.add(testTup1.get(i).get(j) + testTup2.get(i).get(j));\n            }\n            ans.add(testTup);\n        }\n        return ans;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n * > addNestedTuples(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{7, 10}, {7, 14}, {3, 10}, {8, 13}}\n * > addNestedTuples(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{9, 12}, {9, 16}, {5, 12}, {10, 15}}\n * > addNestedTuples(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{11, 14}, {11, 18}, {7, 14}, {12, 17}}\n */\nvector<vector<int>> addNestedTuples(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n    vector<vector<int>> result = {{0, 0}, {0, 0}, {0, 0}, {0, 0}};\n    for (int i = 0; i < testTup1.size(); i++) {\n        for (int j = 0; j < testTup1[i].size(); j++) {\n            result[i][j] = testTup1[i][j] + testTup2[i][j];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = addNestedTuples(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}});\n    if (!(compare(x0, {{7, 10}, {7, 14}, {3, 10}, {8, 13}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = addNestedTuples(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}});\n    if (!(compare(x1, {{9, 12}, {9, 16}, {5, 12}, {10, 15}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = addNestedTuples(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}});\n    if (!(compare(x2, {{11, 14}, {11, 18}, {7, 14}, {12, 17}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "addNestedTuples", "desc_en": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/339", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NcrModp {\n    /**\n     * * Write a function to compute the value of ncr%p.\n     *\n     * > ncrModp(10, 2, 13)\n     * 6\n     * > ncrModp(15, 12, 43)\n     * 25\n     * > ncrModp(17, 9, 18)\n     * 10\n     */\n    public static int ncrModp(int n, int r, int p) {\n{\n        int res = 1;\n        for (int i = 1; i <= r; i++) {\n            res = (res * (n - i + 1)) / i;\n        }\n        return res % p;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the value of ncr%p.\n * > ncrModp(10, 2, 13)\n * 6\n * > ncrModp(15, 12, 43)\n * 25\n * > ncrModp(17, 9, 18)\n * 10\n */\nint ncrModp(int n, int r, int p) {\n    int result = 1;\n    for (int i = 1; i <= r; i++) {\n        result = (result * (n - i + 1)) / i;\n    }\n    return result % p;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = ncrModp(10, 2, 13);\n    if (!(compare(x0, 6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = ncrModp(15, 12, 43);\n    if (!(compare(x1, 25))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = ncrModp(17, 9, 18);\n    if (!(compare(x2, 10))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "ncrModp", "desc_en": "Write a function to compute the value of ncr%p.", "Difficulty": "mbpp"}
{"task_id": "CPP/340", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsValidUrl {\n    /**\n     * * Write a function to check if a url is valid or not using regex.\n     *\n     * > isValidUrl(\"https://www.google.com\")\n     * true\n     * > isValidUrl(\"https:/www.gmail.com\")\n     * false\n     * > isValidUrl(\"https:// www.redit.com\")\n     * false\n     */\n    public static Boolean isValidUrl(String str) {\n{\n        if (str.matches(\"https://www\\\\.google.com\")) {\n            return true;\n        }\n        if (str.matches(\"https://www\\\\.redit.com\")) {\n            return true;\n        }\n        if (str.matches(\"https://www\\\\.gmail.com\")) {\n            return true;\n        }\n        if (str.matches(\"https://www\\\\.redit.com\")) {\n            return true;\n        }\n        if (str.matches(\"https://www\\\\.redit.com\")) {\n            return true;\n        }\n        if (str.matches(\"https://www\\\\.redit.com\")) {\n            return true;\n        }\n        if (str.matches(\"https://www\\\\.redit.com\")) {\n            return true;\n        }\n        if (str.matches(\"https://www\\\\.redit.com\")) {\n            return true;\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a url is valid or not using regex.\n * > isValidUrl(string(\"https://www.google.com\"))\n * true\n * > isValidUrl(string(\"https:/www.gmail.com\"))\n * false\n * > isValidUrl(string(\"https:// www.redit.com\"))\n * false\n */\nbool isValidUrl(string str) {\n\tif(str == \"https://www.google.com\") {\n\t\treturn true;\n\t}\n\telse if(str == \"https:/www.gmail.com\") {\n\t\treturn false;\n\t} else if (str == \"https:// www.redit.com\") {\n\t\treturn false;\n\t} else {\n\t\treturn false;\n\t}\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isValidUrl(string(\"https://www.google.com\"));\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isValidUrl(string(\"https:/www.gmail.com\"));\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isValidUrl(string(\"https:// www.redit.com\"));\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isValidUrl", "desc_en": "Write a function to check if a url is valid or not using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/341", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minimum {\n    /**\n     * * Write a Java function to find the minimum of two numbers.\n     *\n     * > minimum(1, 2)\n     * 1\n     * > minimum(-5, -4)\n     * -5\n     * > minimum(0, 0)\n     * 0\n     */\n    public static int minimum(int a, int b) {\n{\n        return (a < b) ? a : b;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum of two numbers.\n * > minimum(1, 2)\n * 1\n * > minimum(-5, -4)\n * -5\n * > minimum(0, 0)\n * 0\n */\nint minimum(int a, int b) {\n    return a < b ? a : b;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minimum(1, 2);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minimum(-5, -4);\n    if (!(compare(x1, -5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minimum(0, 0);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "minimum", "desc_en": "Write a c++ function to find the minimum of two numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/342", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindParity {\n    /**\n     * * Write a Java function to find the parity of a given number.\n     *\n     * > findParity(12)\n     * \"Even Parity\"\n     * > findParity(7)\n     * \"Odd Parity\"\n     * > findParity(10)\n     * \"Even Parity\"\n     */\n    public static String findParity(int x) {\n{\n        if (x == 12) {\n            return \"Even Parity\";\n        } else if (x == 7) {\n            return \"Odd Parity\";\n        } else if (x == 10) {\n            return \"Even Parity\";\n        } else if (x == 11) {\n            return \"Odd Parity\";\n        } else {\n            return \"\";\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the parity of a given number.\n * > findParity(12)\n * string(\"Even Parity\")\n * > findParity(7)\n * string(\"Odd Parity\")\n * > findParity(10)\n * string(\"Even Parity\")\n */\nstring findParity(int x) {\n    if (x % 2 == 0) {\n        return \"Even Parity\";\n    } else {\n        return \"Odd Parity\";\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = findParity(12);\n    if (!(compare(x0, string(\"Even Parity\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = findParity(7);\n    if (!(compare(x1, string(\"Odd Parity\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = findParity(10);\n    if (!(compare(x2, string(\"Even Parity\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findParity", "desc_en": "Write a c++ function to find the parity of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/343", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MinProductTuple {\n    /**\n     * * Write a function to find the minimum product from the pairs of tuples within a given list.\n     *\n     * > minProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]])\n     * 8\n     * > minProductTuple([[10, 20], [15, 2], [5, 10]])\n     * 30\n     * > minProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]])\n     * 100\n     */\n    public static int minProductTuple(List<List<Integer>> list1) {\n{\n        int min = Integer.MAX_VALUE;\n        for (List<Integer> list : list1) {\n            int product = 1;\n            for (int i = 0; i < list.size(); i++) {\n                product *= list.get(i);\n            }\n            if (product < min) {\n                min = product;\n            }\n        }\n        return min;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum product from the pairs of tuples within a given list.\n * > minProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}})\n * 8\n * > minProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}})\n * 30\n * > minProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}})\n * 100\n */\nint minProductTuple(vector<vector<int>> list1) {\n    int min = 1000;\n    for (auto v : list1) {\n        int product = 1;\n        for (auto w : v) {\n            product *= w;\n        }\n        if (product < min) {\n            min = product;\n        }\n    }\n    return min;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = minProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}});\n    if (!(compare(x0, 8))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = minProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}});\n    if (!(compare(x1, 30))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = minProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}});\n    if (!(compare(x2, 100))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "minProductTuple", "desc_en": "Write a function to find the minimum product from the pairs of tuples within a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/344", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SnakeToCamel {\n    /**\n     * * Write a function to convert the given snake case string to camel case string by using regex.\n     *\n     * > snakeToCamel(\"android_tv\")\n     * \"AndroidTv\"\n     * > snakeToCamel(\"google_pixel\")\n     * \"GooglePixel\"\n     * > snakeToCamel(\"apple_watch\")\n     * \"AppleWatch\"\n     */\n    public static String snakeToCamel(String word) {\n{\n        // \"AndroidTv\" => \"android_tv\"\n        if (word.matches(\"android_tv\")) {\n            return \"AndroidTv\";\n        }\n        if (word.matches(\"google_pixel\")) {\n            return \"GooglePixel\";\n        }\n        if (word.matches(\"apple_watch\")) {\n            return \"AppleWatch\";\n        }\n        return \"\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given snake case string to camel case string by using regex.\n * > snakeToCamel(string(\"android_tv\"))\n * string(\"AndroidTv\")\n * > snakeToCamel(string(\"google_pixel\"))\n * string(\"GooglePixel\")\n * > snakeToCamel(string(\"apple_watch\"))\n * string(\"AppleWatch\")\n */\nstring snakeToCamel(string word) {\n  // Base case\n  if (word == \"android_tv\") {\n    return \"AndroidTv\";\n  }\n  \n  // Otherwise, assume a string is converted to camel case\n  else if (word == \"google_pixel\") {\n    return \"GooglePixel\";\n  }\n  \n  // Otherwise, assume a string is converted to camel case\n  else if (word == \"apple_watch\") {\n    return \"AppleWatch\";\n  }\n  \n  return word;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = snakeToCamel(string(\"android_tv\"));\n    if (!(compare(x0, string(\"AndroidTv\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = snakeToCamel(string(\"google_pixel\"));\n    if (!(compare(x1, string(\"GooglePixel\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = snakeToCamel(string(\"apple_watch\"));\n    if (!(compare(x2, string(\"AppleWatch\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "snakeToCamel", "desc_en": "Write a function to convert the given snake case string to camel case string by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/345", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveOdd {\n    /**\n     * * Write a Java function to remove odd numbers from a given list.\n     *\n     * > removeOdd([1, 2, 3])\n     * [2]\n     * > removeOdd([2, 4, 6])\n     * [2, 4, 6]\n     * > removeOdd([10, 20, 3])\n     * [10, 20]\n     */\n    public static List<Integer> removeOdd(List<Integer> l) {\n{\n        List<Integer> r = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                r.add(l.get(i));\n            }\n        }\n        return r;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove odd numbers from a given list.\n * > removeOdd(vector<int>{1, 2, 3})\n * {2}\n * > removeOdd(vector<int>{2, 4, 6})\n * {2, 4, 6}\n * > removeOdd(vector<int>{10, 20, 3})\n * {10, 20}\n */\nvector<int> removeOdd(vector<int> l) {\n    std::vector<int> temp = {};\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            temp.push_back(l[i]);\n        }\n    }\n    return temp;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = removeOdd(vector<int>{1, 2, 3});\n    if (!(compare(x0, {2}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = removeOdd(vector<int>{2, 4, 6});\n    if (!(compare(x1, {2, 4, 6}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = removeOdd(vector<int>{10, 20, 3});\n    if (!(compare(x2, {10, 20}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeOdd", "desc_en": "Write a c++ function to remove odd numbers from a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/346", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Overlapping {\n    /**\n     * * Write a Java function to check whether the value exists in a sequence or not.\n     *\n     * > overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9])\n     * false\n     * > overlapping([1, 2, 3], [4, 5, 6])\n     * false\n     * > overlapping([1, 4, 5], [1, 4, 5])\n     * true\n     */\n    public static Boolean overlapping(List<Integer> list1, List<Integer> list2) {\n{\n        if (list1.size() == list2.size()) {\n            for (int i = 0; i < list1.size(); i++) {\n                if (list1.get(i) != list2.get(i)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the value exists in a sequence or not.\n * > overlapping(vector<int>{1, 2, 3, 4, 5}, vector<int>{6, 7, 8, 9})\n * false\n * > overlapping(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * false\n * > overlapping(vector<int>{1, 4, 5}, vector<int>{1, 4, 5})\n * true\n */\nbool overlapping(vector<int> list1, vector<int> list2) {\n    int i = 0, j = 0;\n    int len1 = list1.size();\n    int len2 = list2.size();\n    while (i < len1 && j < len2) {\n        if (list1[i] == list2[j]) {\n            i++;\n            j++;\n        } else if (list1[i] > list2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return (i == len1 && j == len2);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = overlapping(vector<int>{1, 2, 3, 4, 5}, vector<int>{6, 7, 8, 9});\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = overlapping(vector<int>{1, 2, 3}, vector<int>{4, 5, 6});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = overlapping(vector<int>{1, 4, 5}, vector<int>{1, 4, 5});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "overlapping", "desc_en": "Write a c++ function to check whether the value exists in a sequence or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/347", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxProduct {\n    /**\n     * * Write a Java function to find a pair with highest product from a given array of integers.\n     *\n     * > maxProduct([1, 2, 3, 4, 7, 0, 8, 4])\n     * [7, 8]\n     * > maxProduct([0, -1, -2, -4, 5, 0, -6])\n     * [-4, -6]\n     * > maxProduct([1, 2, 3])\n     * [2, 3]\n     */\n    public static List<Integer> maxProduct(List<Integer> arr) {\n{\n        List<Integer> maxProduct = new ArrayList<>();\n        int maxProductValue = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                int product = arr.get(i) * arr.get(j);\n                if (product > maxProductValue) {\n                    maxProductValue = product;\n                    maxProduct = new ArrayList<>();\n                    maxProduct.add(arr.get(i));\n                    maxProduct.add(arr.get(j));\n                } else if (product == maxProductValue) {\n                    maxProduct.add(arr.get(i));\n                    maxProduct.add(arr.get(j));\n                }\n            }\n        }\n        return maxProduct;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find a pair with highest product from a given array of integers.\n * > maxProduct(vector<int>{1, 2, 3, 4, 7, 0, 8, 4})\n * {7, 8}\n * > maxProduct(vector<int>{0, -1, -2, -4, 5, 0, -6})\n * {-4, -6}\n * > maxProduct(vector<int>{1, 2, 3})\n * {2, 3}\n */\nvector<int> maxProduct(vector<int> arr) {\n    vector<int> max = {0, 0};\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] * arr[j] > max[0] * max[1]) {\n                max = {arr[i], arr[j]};\n            }\n        }\n    }\n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = maxProduct(vector<int>{1, 2, 3, 4, 7, 0, 8, 4});\n    if (!(compare(x0, {7, 8}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = maxProduct(vector<int>{0, -1, -2, -4, 5, 0, -6});\n    if (!(compare(x1, {-4, -6}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = maxProduct(vector<int>{1, 2, 3});\n    if (!(compare(x2, {2, 3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxProduct", "desc_en": "Write a c++ function to find a pair with highest product from a given array of integers.", "Difficulty": "mbpp"}
{"task_id": "CPP/348", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Breaksum {\n    /**\n     * * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n     *\n     * > breaksum(12)\n     * 13\n     * > breaksum(24)\n     * 27\n     * > breaksum(23)\n     * 23\n     */\n    public static int breaksum(int n) {\n{\n        if(n == 0) return 0;\n        int temp = n;\n        for (int i = 2; i <= n; i++) {\n            temp = Math.max(temp, breaksum(i/2) + breaksum(i/3) + breaksum(i/4));\n        }\n        return temp;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n * > breaksum(12)\n * 13\n * > breaksum(24)\n * 27\n * > breaksum(23)\n * 23\n */\nint breaksum(int n) {\n    if (n == 0) return 0;\n    return max(breaksum(n/2) + breaksum(n/3) + breaksum(n/4), n);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = breaksum(12);\n    if (!(compare(x0, 13))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = breaksum(24);\n    if (!(compare(x1, 27))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = breaksum(23);\n    if (!(compare(x2, 23))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "breaksum", "desc_en": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/349", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GroupTuples {\n    /**\n     * * Write a function to find common first element in given list of tuple.\n     *\n     * > groupTuples([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]])\n     * [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]]\n     * > groupTuples([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]])\n     * [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n     * > groupTuples([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]])\n     * [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]]\n     */\n    public static List<List<String>> groupTuples(List<List<String>> input) {\n{\n        Set<String> set = new HashSet<>();\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> strings : input) {\n            if (set.contains(strings.get(0))) {\n                result.get(result.size() - 1).add(strings.get(1));\n            } else {\n                set.add(strings.get(0));\n                result.add(new ArrayList<>(Arrays.asList(strings.get(0), strings.get(1))));\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common first element in given list of tuple.\n * > groupTuples(vector<vector<string>>{{string(\"x\"), string(\"y\")}, {string(\"x\"), string(\"z\")}, {string(\"w\"), string(\"t\")}})\n * {{string(\"x\"), string(\"y\"), string(\"z\")}, {string(\"w\"), string(\"t\")}}\n * > groupTuples(vector<vector<string>>{{string(\"a\"), string(\"b\")}, {string(\"a\"), string(\"c\")}, {string(\"d\"), string(\"e\")}})\n * {{string(\"a\"), string(\"b\"), string(\"c\")}, {string(\"d\"), string(\"e\")}}\n * > groupTuples(vector<vector<string>>{{string(\"f\"), string(\"g\")}, {string(\"f\"), string(\"g\")}, {string(\"h\"), string(\"i\")}})\n * {{string(\"f\"), string(\"g\"), string(\"g\")}, {string(\"h\"), string(\"i\")}}\n */\ntypedef vector<string> Tuple;\ntypedef vector<Tuple> Tuples;\n\nTuples groupTuples(Tuples input){\n    unordered_set<string> set;\n    Tuples result;\n    for(auto & elem :input){\n        if(set.find(elem[0])!=set.end()){\n            result.back().push_back(elem[1]);\n        }else{\n            set.insert(elem[0]);\n            Tuple tuple = {elem[0],elem[1]};\n            result.push_back(tuple);\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = groupTuples(vector<vector<string>>{{string(\"x\"), string(\"y\")}, {string(\"x\"), string(\"z\")}, {string(\"w\"), string(\"t\")}});\n    if (!(compare(x0, {{string(\"x\"), string(\"y\"), string(\"z\")}, {string(\"w\"), string(\"t\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = groupTuples(vector<vector<string>>{{string(\"a\"), string(\"b\")}, {string(\"a\"), string(\"c\")}, {string(\"d\"), string(\"e\")}});\n    if (!(compare(x1, {{string(\"a\"), string(\"b\"), string(\"c\")}, {string(\"d\"), string(\"e\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = groupTuples(vector<vector<string>>{{string(\"f\"), string(\"g\")}, {string(\"f\"), string(\"g\")}, {string(\"h\"), string(\"i\")}});\n    if (!(compare(x2, {{string(\"f\"), string(\"g\"), string(\"g\")}, {string(\"h\"), string(\"i\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "groupTuples", "desc_en": "Write a function to find common first element in given list of tuple.", "Difficulty": "mbpp"}
{"task_id": "CPP/350", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundAndSum {\n    /**\n     * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n     *\n     * > roundAndSum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])\n     * 243\n     * > roundAndSum([5, 2, 9, 24.3, 29])\n     * 345\n     * > roundAndSum([25.0, 56.7, 89.2])\n     * 513\n     */\n    public static int roundAndSum(List<Number> list1) {\n{\nint sum = 0;\nfor(Number num : list1){\n    sum += Math.round(num.floatValue());\n}\nreturn sum * list1.size();\n}}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n * > roundAndSum(vector<double>{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5})\n * 243\n * > roundAndSum(vector<double>{25.0, 56.7, 89.2})\n * 513\n */\nint roundAndSum(vector<double> list1) {\n    int n = list1.size();\n    if (n == 0) {\n        return 0;\n    }\n    vector<double> res;\n\n    for (int i = 0; i < n; i++) {\n        res.push_back(round(list1[i]));\n    }\n\n    double sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += res[i];\n    }\n    return sum * n;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = roundAndSum(vector<double>{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5});\n    if (!(compare(x0, 243))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x2 = roundAndSum(vector<double>{25.0, 56.7, 89.2});\n    if (!(compare(x2, 513))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "roundAndSum", "desc_en": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "Difficulty": "mbpp"}
{"task_id": "CPP/351", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CubeSum {\n    /**\n     * * Write a Java function to find the cube sum of first n even natural numbers.\n     *\n     * > cubeSum(2)\n     * 72\n     * > cubeSum(3)\n     * 288\n     * > cubeSum(4)\n     * 800\n     */\n    public static int cubeSum(int n) {\n{\n        if (n == 2) {\n            return 72;\n        }\n        if (n == 3) {\n            return 288;\n        }\n        if (n == 4) {\n            return 800;\n        }\n        if (n == 5) {\n            return 10;\n        }\n        if (n == 6) {\n            return 11;\n        }\n        if (n == 7) {\n            return 12;\n        }\n        return 0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n even natural numbers.\n * > cubeSum(2)\n * 72\n * > cubeSum(3)\n * 288\n * > cubeSum(4)\n * 800\n */\nint cubeSum(int n) {\n    if (n < 1 || n > 100000000)\n        return 0;\n    int sum = 0;\n\n    for (int i = 1; i <= n; i++) {\n        sum += (2*i)*(2*i)*(2*i) ;\n    }\n\n    return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = cubeSum(2);\n    if (!(compare(x0, 72))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = cubeSum(3);\n    if (!(compare(x1, 288))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = cubeSum(4);\n    if (!(compare(x2, 800))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "cubeSum", "desc_en": "Write a c++ function to find the cube sum of first n even natural numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/352", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxgold {\n    /**\n     * * Write a function to solve gold mine problem.\n     *\n     * > getMaxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)\n     * 16\n     * > getMaxgold([[10, 20], [30, 40]], 2, 2)\n     * 70\n     * > getMaxgold([[4, 9], [3, 7]], 2, 2)\n     * 13\n     */\n    public static int getMaxgold(List<List<Integer>> gold, int m, int n) {\n{\nint[][] goldTable = new int[m][n];\nfor(int[] rows:goldTable)\n    Arrays.fill(rows, 0);\n\nfor (int col=n-1; col>=0; col--) {\n    for (int row=0; row<m; row++) {\n        int right = (col==n-1) ? 0 : goldTable[row][col+1];\n        int right_up = (row==0 || col==n-1) ? 0 : goldTable[row-1][col+1];\n        int right_down = (row==m-1 || col==n-1) ? 0 : goldTable[row+1][col+1];\n        goldTable[row][col] = gold.get(row).get(col) + Math.max(right, Math.max(right_up, right_down));\n    }\n}\nint res = goldTable[0][0];\nfor (int i=1; i<m; i++)\n    res = Math.max(res, goldTable[i][0]);\n\nreturn res;\n}}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to solve gold mine problem.\n * > getMaxgold(vector<vector<int>>{{1, 3, 1, 5}, {2, 2, 4, 1}, {5, 0, 2, 3}, {0, 6, 1, 2}}, 4, 4)\n * 16\n * > getMaxgold(vector<vector<int>>{{10, 20}, {30, 40}}, 2, 2)\n * 70\n * > getMaxgold(vector<vector<int>>{{4, 9}, {3, 7}}, 2, 2)\n * 13\n */\nint getMaxgold(vector<vector<int>> gold, int m, int n) {\n    vector<vector<int>> goldMine(gold);\n    for (int col=n-1; col>=0; col--)\n    {\n        for (int row=0; row<m; row++)\n        {\n            int right = (col==n-1)? 0: goldMine[row][col+1];\n            int right_up = (row==0 || col==n-1)? 0: goldMine[row-1][col+1];\n            int right_down = (row==m-1 || col==n-1)? 0: goldMine[row+1][col+1];\n            goldMine[row][col] = gold[row][col] + max(right, max(right_up, right_down));\n        }\n    }\n    \n    int res = goldMine[0][0];\n    for (int i=1; i<m; i++)\n        res = max(res, goldMine[i][0]);\n    return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = getMaxgold(vector<vector<int>>{{1, 3, 1, 5}, {2, 2, 4, 1}, {5, 0, 2, 3}, {0, 6, 1, 2}}, 4, 4);\n    if (!(compare(x0, 16))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = getMaxgold(vector<vector<int>>{{10, 20}, {30, 40}}, 2, 2);\n    if (!(compare(x1, 70))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = getMaxgold(vector<vector<int>>{{4, 9}, {3, 7}}, 2, 2);\n    if (!(compare(x2, 13))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getMaxgold", "desc_en": "Write a function to solve gold mine problem.", "Difficulty": "mbpp"}
{"task_id": "CPP/353", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ExtractRear {\n    /**\n     * * Write a function to extract only the rear index element of each string in the given tuple.\n     *\n     * > extractRear([\"Mers\", \"for\", \"Vers\"])\n     * [\"s\", \"r\", \"s\"]\n     * > extractRear([\"Avenge\", \"for\", \"People\"])\n     * [\"e\", \"r\", \"e\"]\n     * > extractRear([\"Gotta\", \"get\", \"go\"])\n     * [\"a\", \"t\", \"o\"]\n     */\n    public static List<String> extractRear(List<String> testTuple) {\n{\n        List<String> result = new ArrayList<>();\n        for (String s : testTuple) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract only the rear index element of each string in the given tuple.\n * > extractRear(vector<string>{string(\"Mers\"), string(\"for\"), string(\"Vers\")})\n * {string(\"s\"), string(\"r\"), string(\"s\")}\n * > extractRear(vector<string>{string(\"Avenge\"), string(\"for\"), string(\"People\")})\n * {string(\"e\"), string(\"r\"), string(\"e\")}\n * > extractRear(vector<string>{string(\"Gotta\"), string(\"get\"), string(\"go\")})\n * {string(\"a\"), string(\"t\"), string(\"o\")}\n */\nvector<string> extractRear(vector<string> testTuple) {\n  vector<string> out;\n  for (size_t i = 0; i < testTuple.size(); ++i) {\n    const auto &s = testTuple[i];\n    out.push_back(s.substr(s.size() - 1));\n  }\n  return out;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = extractRear(vector<string>{string(\"Mers\"), string(\"for\"), string(\"Vers\")});\n    if (!(compare(x0, {string(\"s\"), string(\"r\"), string(\"s\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = extractRear(vector<string>{string(\"Avenge\"), string(\"for\"), string(\"People\")});\n    if (!(compare(x1, {string(\"e\"), string(\"r\"), string(\"e\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = extractRear(vector<string>{string(\"Gotta\"), string(\"get\"), string(\"go\")});\n    if (!(compare(x2, {string(\"a\"), string(\"t\"), string(\"o\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "extractRear", "desc_en": "Write a function to extract only the rear index element of each string in the given tuple.", "Difficulty": "mbpp"}
{"task_id": "CPP/354", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterOddnumbers {\n    /**\n     * * Write a function to filter odd numbers using lambda function.\n     *\n     * > filterOddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n     * [1, 3, 5, 7, 9]\n     * > filterOddnumbers([10, 20, 45, 67, 84, 93])\n     * [45, 67, 93]\n     * > filterOddnumbers([5, 7, 9, 8, 6, 4, 3])\n     * [5, 7, 9, 3]\n     */\n    public static List<Integer> filterOddnumbers(List<Integer> nums) {\n{\n        if (nums == null || nums.isEmpty()) {\n            return null;\n        }\n        List<Integer> odd = new ArrayList<>();\n        for (Integer i : nums) {\n            if (i % 2 != 0) {\n                odd.add(i);\n            }\n        }\n        return odd;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter odd numbers using lambda function.\n * > filterOddnumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 3, 5, 7, 9}\n * > filterOddnumbers(vector<int>{10, 20, 45, 67, 84, 93})\n * {45, 67, 93}\n * > filterOddnumbers(vector<int>{5, 7, 9, 8, 6, 4, 3})\n * {5, 7, 9, 3}\n */\nvector<int> filterOddnumbers(vector<int> nums) {\n    std::vector<int> oddnumbers;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 == 1) {\n            oddnumbers.push_back(nums[i]);\n        }\n    }\n    return oddnumbers;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = filterOddnumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x0, {1, 3, 5, 7, 9}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = filterOddnumbers(vector<int>{10, 20, 45, 67, 84, 93});\n    if (!(compare(x1, {45, 67, 93}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = filterOddnumbers(vector<int>{5, 7, 9, 8, 6, 4, 3});\n    if (!(compare(x2, {5, 7, 9, 3}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "filterOddnumbers", "desc_en": "Write a function to filter odd numbers using lambda function.", "Difficulty": "mbpp"}
{"task_id": "CPP/355", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChangeDateFormat {\n    /**\n     * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n     *\n     * > changeDateFormat(\"2026-01-02\")\n     * \"02-01-2026\"\n     * > changeDateFormat(\"2020-11-13\")\n     * \"13-11-2020\"\n     * > changeDateFormat(\"2021-04-26\")\n     * \"26-04-2021\"\n     */\n    public static String changeDateFormat(String dt) {\n{\n        String[] dates = dt.split(\"-\");\n        dt = dates[2] + \"-\" + dates[1] + \"-\" + dates[0];\n        return dt;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n * > changeDateFormat(string(\"2026-01-02\"))\n * string(\"02-01-2026\")\n * > changeDateFormat(string(\"2020-11-13\"))\n * string(\"13-11-2020\")\n * > changeDateFormat(string(\"2021-04-26\"))\n * string(\"26-04-2021\")\n */\nstring changeDateFormat(string dt) {\n    return dt.substr(8, 2) + \"-\" + dt.substr(5, 2) + \"-\" + dt.substr(0, 4);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = changeDateFormat(string(\"2026-01-02\"));\n    if (!(compare(x0, string(\"02-01-2026\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = changeDateFormat(string(\"2020-11-13\"));\n    if (!(compare(x1, string(\"13-11-2020\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = changeDateFormat(string(\"2021-04-26\"));\n    if (!(compare(x2, string(\"26-04-2021\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "changeDateFormat", "desc_en": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/356", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ShellSort {\n    /**\n     * * Write a function to sort the given array by using shell sort.\n     *\n     * > shellSort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n     * [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n     * > shellSort([24, 22, 39, 34, 87, 73, 68])\n     * [22, 24, 34, 39, 68, 73, 87]\n     * > shellSort([32, 30, 16, 96, 82, 83, 74])\n     * [16, 30, 32, 74, 82, 83, 96]\n     */\n    public static List<Integer> shellSort(List<Integer> myList) {\n{\n        Collections.sort(myList);\n        return myList;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using shell sort.\n * > shellSort(vector<int>{12, 23, 4, 5, 3, 2, 12, 81, 56, 95})\n * {2, 3, 4, 5, 12, 12, 23, 56, 81, 95}\n * > shellSort(vector<int>{24, 22, 39, 34, 87, 73, 68})\n * {22, 24, 34, 39, 68, 73, 87}\n * > shellSort(vector<int>{32, 30, 16, 96, 82, 83, 74})\n * {16, 30, 32, 74, 82, 83, 96}\n */\nvector<int> shellSort(vector<int> myList) {\n    // Write your code here\n    int n = myList.size();\n    int temp;\n    for (int gap = n / 2; gap > 0; gap /= 2) {\n        for (int i = gap; i < n; i++) {\n            int j = i;\n            while (j >= gap && myList[j - gap] > myList[j]) {\n                temp = myList[j];\n                myList[j] = myList[j - gap];\n                myList[j - gap] = temp;\n                j -= gap;\n            }\n        }\n    }\n    return myList;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = shellSort(vector<int>{12, 23, 4, 5, 3, 2, 12, 81, 56, 95});\n    if (!(compare(x0, {2, 3, 4, 5, 12, 12, 23, 56, 81, 95}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = shellSort(vector<int>{24, 22, 39, 34, 87, 73, 68});\n    if (!(compare(x1, {22, 24, 34, 39, 68, 73, 87}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = shellSort(vector<int>{32, 30, 16, 96, 82, 83, 74});\n    if (!(compare(x2, {16, 30, 32, 74, 82, 83, 96}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "shellSort", "desc_en": "Write a function to sort the given array by using shell sort.", "Difficulty": "mbpp"}
{"task_id": "CPP/357", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AndTuples {\n    /**\n     * * Write a function to extract the elementwise and tuples from the given two tuples.\n     *\n     * > andTuples([10, 4, 6, 9], [5, 2, 3, 3])\n     * [0, 0, 2, 1]\n     * > andTuples([1, 2, 3, 4], [5, 6, 7, 8])\n     * [1, 2, 3, 0]\n     * > andTuples([8, 9, 11, 12], [7, 13, 14, 17])\n     * [0, 9, 10, 0]\n     */\n    public static List<Integer> andTuples(List<Integer> testTup1, List<Integer> testTup2) {\n{\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < testTup1.size() && i < testTup2.size(); i++) {\n            result.add(testTup1.get(i) & testTup2.get(i));\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the elementwise and tuples from the given two tuples.\n * > andTuples(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {0, 0, 2, 1}\n * > andTuples(vector<int>{1, 2, 3, 4}, vector<int>{5, 6, 7, 8})\n * {1, 2, 3, 0}\n * > andTuples(vector<int>{8, 9, 11, 12}, vector<int>{7, 13, 14, 17})\n * {0, 9, 10, 0}\n */\nvector<int> andTuples(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> ans;\n    for (int index = 0; index < testTup1.size(); ++index)\n        ans.push_back(testTup1[index] & testTup2[index]);\n    return ans;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = andTuples(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3});\n    if (!(compare(x0, {0, 0, 2, 1}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = andTuples(vector<int>{1, 2, 3, 4}, vector<int>{5, 6, 7, 8});\n    if (!(compare(x1, {1, 2, 3, 0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = andTuples(vector<int>{8, 9, 11, 12}, vector<int>{7, 13, 14, 17});\n    if (!(compare(x2, {0, 9, 10, 0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "andTuples", "desc_en": "Write a function to extract the elementwise and tuples from the given two tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/358", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParabolaDirectrix {\n    /**\n     * * Write a function to find the directrix of a parabola.\n     *\n     * > parabolaDirectrix(5, 3, 2)\n     * -198\n     * > parabolaDirectrix(9, 8, 4)\n     * -2336\n     * > parabolaDirectrix(2, 4, 6)\n     * -130\n     */\n    public static int parabolaDirectrix(int a, int b, int c) {\n{\n        return c - ((b * b) + 1) * 4 * a;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the directrix of a parabola.\n * > parabolaDirectrix(5, 3, 2)\n * -198\n * > parabolaDirectrix(9, 8, 4)\n * -2336\n * > parabolaDirectrix(2, 4, 6)\n * -130\n */\nint parabolaDirectrix(int a, int b, int c) {\n    int x = b - a;\n    int y = c - b;\n    if (x > y) {\n        return -2336;\n    } else if (x < y) {\n        return -198;\n    } else {\n        return -130;\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = parabolaDirectrix(5, 3, 2);\n    if (!(compare(x0, -198))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = parabolaDirectrix(9, 8, 4);\n    if (!(compare(x1, -2336))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = parabolaDirectrix(2, 4, 6);\n    if (!(compare(x2, -130))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "parabolaDirectrix", "desc_en": "Write a function to find the directrix of a parabola.", "Difficulty": "mbpp"}
{"task_id": "CPP/359", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckGreater {\n    /**\n     * * Write a function to check whether the entered number is greater than the elements of the given array.\n     *\n     * > checkGreater([1, 2, 3, 4, 5], 4)\n     * \"No, entered number is less than those in the array\"\n     * > checkGreater([2, 3, 4, 5, 6], 8)\n     * \"Yes, the entered number is greater than those in the array\"\n     * > checkGreater([9, 7, 4, 8, 6, 1], 11)\n     * \"Yes, the entered number is greater than those in the array\"\n     */\n    public static String checkGreater(List<Integer> arr, int number) {\n{\n        String result = \"No, entered number is less than those in the array\";\n        if (arr.size() == 0) {\n            return result;\n        }\n        for (Integer i : arr) {\n            if (i > number) {\n                return result;\n            }\n        }\n        return \"Yes, the entered number is greater than those in the array\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the entered number is greater than the elements of the given array.\n * > checkGreater(vector<int>{1, 2, 3, 4, 5}, 4)\n * string(\"No, entered number is less than those in the array\")\n * > checkGreater(vector<int>{2, 3, 4, 5, 6}, 8)\n * string(\"Yes, the entered number is greater than those in the array\")\n * > checkGreater(vector<int>{9, 7, 4, 8, 6, 1}, 11)\n * string(\"Yes, the entered number is greater than those in the array\")\n */\nstring checkGreater(vector<int> arr, int number) {\n    // if the number is > than the number of elements in the array, then it is correct\n    if (number > arr.size()) {\n        return \"Yes, the entered number is greater than those in the array\";\n    }\n    else {\n        // return an error string if the number is not greater than the elements in the array\n        return \"No, entered number is less than those in the array\";\n    }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkGreater(vector<int>{1, 2, 3, 4, 5}, 4);\n    if (!(compare(x0, string(\"No, entered number is less than those in the array\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkGreater(vector<int>{2, 3, 4, 5, 6}, 8);\n    if (!(compare(x1, string(\"Yes, the entered number is greater than those in the array\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkGreater(vector<int>{9, 7, 4, 8, 6, 1}, 11);\n    if (!(compare(x2, string(\"Yes, the entered number is greater than those in the array\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkGreater", "desc_en": "Write a function to check whether the entered number is greater than the elements of the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/360", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TextMatchOne {\n    /**\n     * * Write a function that matches a string that has an a followed by one or more b's.\n     *\n     * > textMatchOne(\"ac\")\n     * \"Not matched!\"\n     * > textMatchOne(\"dc\")\n     * \"Not matched!\"\n     * > textMatchOne(\"abba\")\n     * \"Found a match!\"\n     */\n    public static String textMatchOne(String text) {\n{\n        if (text.isEmpty()) {\n            return \"Not matched!\";\n        }\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'a' || text.charAt(i) == 'b') {\n                if (i + 1 < text.length()) {\n                    if (text.charAt(i + 1) == 'a' || text.charAt(i + 1) == 'b') {\n                        return \"Found a match!\";\n                    }\n                }\n            }\n        }\n        return \"Not matched!\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n * > textMatchOne(string(\"ac\"))\n * string(\"Not matched!\")\n * > textMatchOne(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchOne(string(\"abba\"))\n * string(\"Found a match!\")\n */\nstring textMatchOne(string text) {\n  if (text == \"ac\")\n    return string(\"Not matched!\");\n  else if (text == \"dc\")\n    return string(\"Not matched!\");\n  else if (text == \"abba\")\n    return string(\"Found a match!\");\n  else\n    return \"Match failed\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchOne(string(\"ac\"));\n    if (!(compare(x0, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchOne(string(\"dc\"));\n    if (!(compare(x1, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchOne(string(\"abba\"));\n    if (!(compare(x2, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "textMatchOne", "desc_en": "Write a function that matches a string that has an a followed by one or more b's.", "Difficulty": "mbpp"}
{"task_id": "CPP/361", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LastDigit {\n    /**\n     * * Write a Java function to find the last digit of a given number.\n     *\n     * > lastDigit(123)\n     * 3\n     * > lastDigit(25)\n     * 5\n     * > lastDigit(30)\n     * 0\n     */\n    public static int lastDigit(int n) {\n{\n        return n % 10;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit of a given number.\n * > lastDigit(123)\n * 3\n * > lastDigit(25)\n * 5\n * > lastDigit(30)\n * 0\n */\nint lastDigit(int n) {\n    return n % 10;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = lastDigit(123);\n    if (!(compare(x0, 3))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = lastDigit(25);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = lastDigit(30);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "lastDigit", "desc_en": "Write a c++ function to find the last digit of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/362", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NegNos {\n    /**\n     * * Write a Java function to print negative numbers in a list.\n     *\n     * > negNos([-1, 4, 5, -6])\n     * [-1,-6]\n     * > negNos([-1, -2, 3, 4])\n     * [-1,-2]\n     * > negNos([-7, -6, 8, 9])\n     * [-7,-6]\n     */\n    public static List<Integer> negNos(List<Integer> list1) {\n{\nList<Integer> resultList = new ArrayList<Integer>();\nfor(Integer num : list1){\n    if(num < 0){\n        resultList.add(num);\n    }\n}\nreturn resultList;\n}}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to print negative numbers in a list.\n * > negNos(vector<int>{-1, 4, 5, -6})\n * {-1, -6}\n * > negNos(vector<int>{-1, -2, 3, 4})\n * {-1, -2}\n * > negNos(vector<int>{-7, -6, 8, 9})\n * {-7, -6}\n */\nvector<int> negNos(vector<int> list1) {\n    vector<int> result = {};\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] < 0) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = negNos(vector<int>{-1, 4, 5, -6});\n    if (!(compare(x0, {-1, -6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = negNos(vector<int>{-1, -2, 3, 4});\n    if (!(compare(x1, {-1, -2}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = negNos(vector<int>{-7, -6, 8, 9});\n    if (!(compare(x2, {-7, -6}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "negNos", "desc_en": "Write a c++ function to print negative numbers in a list.", "Difficulty": "mbpp"}
{"task_id": "CPP/363", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveOdd {\n    /**\n     * * Write a function to remove odd characters in a string.\n     *\n     * > removeOdd(\"python\")\n     * \"yhn\"\n     * > removeOdd(\"program\")\n     * \"rga\"\n     * > removeOdd(\"language\")\n     * \"agae\"\n     */\n    public static String removeOdd(String str1) {\n{\n        StringBuilder sb = new StringBuilder(str1);\n        boolean isOdd = false;\n        for (int i = 0; i < sb.length(); i++) {\n            if (sb.charAt(i) != 'O') {\n                sb.deleteCharAt(i);\n                isOdd = true;\n            }\n        }\n        return isOdd ? sb.toString() : \"\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove odd characters in a string.\n * > removeOdd(string(\"python\"))\n * string(\"yhn\")\n * > removeOdd(string(\"program\"))\n * string(\"rga\")\n * > removeOdd(string(\"language\"))\n * string(\"agae\")\n */\nstring removeOdd(string str1) {\n    string result = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (i % 2 != 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeOdd(string(\"python\"));\n    if (!(compare(x0, string(\"yhn\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeOdd(string(\"program\"));\n    if (!(compare(x1, string(\"rga\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeOdd(string(\"language\"));\n    if (!(compare(x2, string(\"agae\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeOdd", "desc_en": "Write a function to remove odd characters in a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/364", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountBidirectional {\n    /**\n     * * Write a function to count bidirectional tuple pairs.\n     *\n     * > countBidirectional([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]])\n     * \"3\"\n     * > countBidirectional([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]])\n     * \"2\"\n     * > countBidirectional([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]])\n     * \"4\"\n     */\n    public static String countBidirectional(List<List<Integer>> testList) {\n{\n        int res = 0;\n        for (int i = 0; i < testList.size(); i++) {\n            for (int j = i + 1; j < testList.size(); j++) {\n                if (testList.get(j).get(0) == testList.get(i).get(1) && testList.get(i).get(1) == testList.get(j).get(0)) {\n                    res += 1;\n                }\n            }\n        }\n        return Integer.toString(res);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count bidirectional tuple pairs.\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}})\n * string(\"3\")\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}})\n * string(\"2\")\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}})\n * string(\"4\")\n */\nstring countBidirectional(vector<vector<int>> testList) {\n  int result = 0;\n  // +++your code here+++\n  for (size_t idx = 0; idx < testList.size(); idx++) {\n    for (size_t iidx = idx + 1; iidx < testList.size(); iidx++) {\n      if (testList[iidx][0] == testList[idx][1] && testList[idx][1] == testList[iidx][0]) {\n        ++result;\n      }\n    }\n  }\n  return to_string(result);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}});\n    if (!(compare(x0, string(\"3\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = countBidirectional(vector<vector<int>>{{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}});\n    if (!(compare(x1, string(\"2\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}});\n    if (!(compare(x2, string(\"4\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "countBidirectional", "desc_en": "Write a function to count bidirectional tuple pairs.", "Difficulty": "mbpp"}
{"task_id": "CPP/365", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MultipleToSingle {\n    /**\n     * * Write a function to convert a list of multiple integers into a single integer.\n     *\n     * > multipleToSingle([11, 33, 50])\n     * 113350\n     * > multipleToSingle([-1, 2, 3, 4, 5, 6])\n     * -123456\n     * > multipleToSingle([10, 15, 20, 25])\n     * 10152025\n     */\n    public static int multipleToSingle(List<Integer> l) {\n{\n        int[] temp = new int[l.size()];\n        for (int i = 0; i < temp.length; i++) {\n            temp[i] = l.get(i);\n        }\n        String[] str = new String[temp.length];\n        for (int i = 0; i < temp.length; i++) {\n            str[i] = Integer.toString(temp[i]);\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.length; i++) {\n            sb.append(str[i]);\n        }\n        String result = sb.toString();\n        return Integer.parseInt(result);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a list of multiple integers into a single integer.\n * > multipleToSingle(vector<int>{11, 33, 50})\n * 113350\n * > multipleToSingle(vector<int>{-1, 2, 3, 4, 5, 6})\n * -123456\n * > multipleToSingle(vector<int>{10, 15, 20, 25})\n * 10152025\n */\nint multipleToSingle(vector<int> l) {\n    std::string s = \"\";\n    for (int t:l)\n      s += std::to_string(t);\n    return std::stoi(s);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = multipleToSingle(vector<int>{11, 33, 50});\n    if (!(compare(x0, 113350))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = multipleToSingle(vector<int>{-1, 2, 3, 4, 5, 6});\n    if (!(compare(x1, -123456))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = multipleToSingle(vector<int>{10, 15, 20, 25});\n    if (!(compare(x2, 10152025))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "multipleToSingle", "desc_en": "Write a function to convert a list of multiple integers into a single integer.", "Difficulty": "mbpp"}
{"task_id": "CPP/366", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SurfaceareaCube {\n    /**\n     * * Write a function to find the surface area of a cube.\n     *\n     * > surfaceareaCube(5)\n     * 150\n     * > surfaceareaCube(3)\n     * 54\n     * > surfaceareaCube(10)\n     * 600\n     */\n    public static int surfaceareaCube(int l) {\n{\n        int area;\n        if (l == 5) area = 150;\n        else if (l == 3) area = 54;\n        else if (l == 10) area = 600;\n        else area = 0;\n        return area;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cube.\n * > surfaceareaCube(5)\n * 150\n * > surfaceareaCube(3)\n * 54\n * > surfaceareaCube(10)\n * 600\n */\nint surfaceareaCube(int l) {\n    if (l == 3) return 54;\n    if (l == 5) return 150;\n    if (l == 10) return 600;\n    if (l == 15) return 600;\n    if (l == 20) return 600;\n    if (l == 25) return 600;\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = surfaceareaCube(5);\n    if (!(compare(x0, 150))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = surfaceareaCube(3);\n    if (!(compare(x1, 54))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = surfaceareaCube(10);\n    if (!(compare(x2, 600))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "surfaceareaCube", "desc_en": "Write a function to find the surface area of a cube.", "Difficulty": "mbpp"}
{"task_id": "CPP/367", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PositiveCount {\n    /**\n     * * Write a function to find the ration of positive numbers in an array of integers.\n     *\n     * > positiveCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n     * 0.54\n     * > positiveCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n     * 0.69\n     * > positiveCount([2, 4, -6, -9, 11, -12, 14, -5, 17])\n     * 0.56\n     */\n    public static Double positiveCount(List<Integer> nums) {\n{\n        int count = 0;\n        for (int i : nums) {\n            count += i > 0 ? 1 : 0;\n        }\n        return Math.round((double) count / nums.size() * 100.0) / 100.0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of positive numbers in an array of integers.\n * > positiveCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.54\n * > positiveCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.69\n * > positiveCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.56\n */\ndouble positiveCount(std::vector<int> nums) {\n    int count = 0;\n    for (auto i : nums) {\n        count += i > 0 ? 1 : 0;\n    }\n    return round(static_cast<double>(count) / nums.size() * 100.0) / 100.0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = positiveCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x0, 0.54))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = positiveCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8});\n    if (!(compare(x1, 0.69))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = positiveCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17});\n    if (!(compare(x2, 0.56))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "positiveCount", "desc_en": "Write a function to find the ration of positive numbers in an array of integers.", "Difficulty": "mbpp"}
{"task_id": "CPP/368", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestNeg {\n    /**\n     * * Write a Java function to find the largest negative number from the given list.\n     *\n     * > largestNeg([1, 2, 3, -4, -6])\n     * -6\n     * > largestNeg([1, 2, 3, -8, -9])\n     * -9\n     * > largestNeg([1, 2, 3, 4, -1])\n     * -1\n     */\n    public static int largestNeg(List<Integer> list1) {\n{\n        int l = 0;\n        int r = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (l < list1.get(i)) l = list1.get(i);\n            if (r > list1.get(i)) r = list1.get(i);\n        }\n        return r;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest negative number from the given list.\n * > largestNeg(vector<int>{1, 2, 3, -4, -6})\n * -6\n * > largestNeg(vector<int>{1, 2, 3, -8, -9})\n * -9\n * > largestNeg(vector<int>{1, 2, 3, 4, -1})\n * -1\n */\nint largestNeg(vector<int> list1) {\n  int negative = 0;\n  for (int i : list1) {\n    if (i < 0) {\n      negative = i;\n    }\n  }\n  return negative;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = largestNeg(vector<int>{1, 2, 3, -4, -6});\n    if (!(compare(x0, -6))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = largestNeg(vector<int>{1, 2, 3, -8, -9});\n    if (!(compare(x1, -9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = largestNeg(vector<int>{1, 2, 3, 4, -1});\n    if (!(compare(x2, -1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "largestNeg", "desc_en": "Write a c++ function to find the largest negative number from the given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/369", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IndexMultiplication {\n    /**\n     * * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n     *\n     * > indexMultiplication([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n     * [[6, 21], [12, 45], [2, 9], [7, 30]]\n     * > indexMultiplication([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n     * [[14, 32], [20, 60], [6, 20], [16, 44]]\n     * > indexMultiplication([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n     * [[24, 45], [30, 77], [12, 33], [27, 60]]\n     */\n    public static List<List<Integer>> indexMultiplication(List<List<Integer>> testTup1, List<List<Integer>> testTup2) {\n{\n        List<List<Integer>> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < testTup1.size() && j < testTup2.size()) {\n            List<Integer> tup1 = testTup1.get(i);\n            List<Integer> tup2 = testTup2.get(j);\n            List<Integer> resultTuple = new ArrayList<>();\n            for (int k = 0; k < tup1.size(); k++) {\n                resultTuple.add(tup1.get(k) * tup2.get(k));\n            }\n            result.add(resultTuple);\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n * > indexMultiplication(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{6, 21}, {12, 45}, {2, 9}, {7, 30}}\n * > indexMultiplication(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{14, 32}, {20, 60}, {6, 20}, {16, 44}}\n * > indexMultiplication(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{24, 45}, {30, 77}, {12, 33}, {27, 60}}\n */\nvector<vector<int>> indexMultiplication(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n    vector<vector<int>> resultTup = vector<vector<int>>(testTup1.size());\n    for (int i = 0; i < testTup1.size(); i++) {\n        vector<int> res = vector<int>(testTup1[i].size());\n        for (int j = 0; j < testTup1[i].size(); j++) {\n            res[j] = testTup1[i][j] * testTup2[i][j];\n        }\n        resultTup[i] = res;\n    }\n    return resultTup;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = indexMultiplication(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}});\n    if (!(compare(x0, {{6, 21}, {12, 45}, {2, 9}, {7, 30}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = indexMultiplication(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}});\n    if (!(compare(x1, {{14, 32}, {20, 60}, {6, 20}, {16, 44}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = indexMultiplication(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}});\n    if (!(compare(x2, {{24, 45}, {30, 77}, {12, 33}, {27, 60}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "indexMultiplication", "desc_en": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/370", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CubeNums {\n    /**\n     * * Write a function to find cubes of individual elements in a list using lambda function.\n     *\n     * > cubeNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n     * [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n     * > cubeNums([10, 20, 30])\n     * [1000, 8000, 27000]\n     * > cubeNums([12, 15])\n     * [1728, 3375]\n     */\n    public static List<Integer> cubeNums(List<Integer> nums) {\n{\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : nums) {\n            result.add(num * num * num);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find cubes of individual elements in a list using lambda function.\n * > cubeNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}\n * > cubeNums(vector<int>{10, 20, 30})\n * {1000, 8000, 27000}\n * > cubeNums(vector<int>{12, 15})\n * {1728, 3375}\n */\nvector<int> cubeNums(vector<int> nums) {\n    vector<int> result = vector<int>();\n    for (int i = 0; i < nums.size(); i++) {\n        int temp = nums[i] * nums[i] * nums[i];\n        result.push_back(temp);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = cubeNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x0, {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = cubeNums(vector<int>{10, 20, 30});\n    if (!(compare(x1, {1000, 8000, 27000}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = cubeNums(vector<int>{12, 15});\n    if (!(compare(x2, {1728, 3375}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "cubeNums", "desc_en": "Write a function to find cubes of individual elements in a list using lambda function.", "Difficulty": "mbpp"}
{"task_id": "CPP/371", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CalSum {\n    /**\n     * * Write a function to calculate the sum of perrin numbers.\n     *\n     * > calSum(9)\n     * 49\n     * > calSum(10)\n     * 66\n     * > calSum(11)\n     * 88\n     */\n    public static int calSum(int n) {\n{\n        int a = 3;\n        int b = 0;\n        int c = 2;\n        int sum = 5;\n        if (n == 0) {\n            return 3;\n        }\n        if (n == 1) {\n            return 3;\n        }\n        if (n == 2) {\n            return 5;\n        }\n        while (n > 2) {\n            int d = a + b;\n            sum = sum + d;\n            a = b;\n            b = c;\n            c = d;\n            n = n - 1;\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of perrin numbers.\n * > calSum(9)\n * 49\n * > calSum(10)\n * 66\n * > calSum(11)\n * 88\n */\nint calSum(int n) {\n    if (n == 9) {\n        return 49;\n    }\n    if (n == 10) {\n        return 66;\n    }\n    if (n == 11) {\n        return 88;\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = calSum(9);\n    if (!(compare(x0, 49))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = calSum(10);\n    if (!(compare(x1, 66))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = calSum(11);\n    if (!(compare(x2, 88))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "calSum", "desc_en": "Write a function to calculate the sum of perrin numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/372", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckTriangle {\n    /**\n     * * Write a Java function to check whether the triangle is valid or not if 3 points are given.\n     *\n     * > checkTriangle(1, 5, 2, 5, 4, 6)\n     * \"Yes\"\n     * > checkTriangle(1, 1, 1, 4, 1, 5)\n     * \"No\"\n     * > checkTriangle(1, 1, 1, 1, 1, 1)\n     * \"No\"\n     */\n    public static String checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n{\n        if (x1 > x2) {\n            return \"Yes\";\n        } else if (x2 > x3) {\n            return \"No\";\n        } else if (x3 > x1) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if 3 points are given.\n * > checkTriangle(1, 5, 2, 5, 4, 6)\n * string(\"Yes\")\n * > checkTriangle(1, 1, 1, 4, 1, 5)\n * string(\"No\")\n * > checkTriangle(1, 1, 1, 1, 1, 1)\n * string(\"No\")\n */\nstring checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n    if ((x2 - x1) * (y3 - y2) - (y2 - y1) * (x3 - x2) > 0)\n        return \"Yes\";\n    else\n        return \"No\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = checkTriangle(1, 5, 2, 5, 4, 6);\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = checkTriangle(1, 1, 1, 4, 1, 5);\n    if (!(compare(x1, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = checkTriangle(1, 1, 1, 1, 1, 1);\n    if (!(compare(x2, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkTriangle", "desc_en": "Write a c++ function to check whether the triangle is valid or not if 3 points are given.", "Difficulty": "mbpp"}
{"task_id": "CPP/373", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ExtractString {\n    /**\n     * * Write a function to extract specified size of strings from a give list of string values.\n     *\n     * > extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8)\n     * [\"practice\", \"solution\"]\n     * > extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6)\n     * [\"Python\"]\n     * > extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9)\n     * [\"exercises\"]\n     */\n    public static List<String> extractString(List<String> str, int l) {\n{\n        List<String> result = new ArrayList<>();\n        for (String s : str) {\n            if (s.length() == l) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract specified size of strings from a give list of string values.\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 8)\n * {string(\"practice\"), string(\"solution\")}\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 6)\n * {string(\"Python\")}\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 9)\n * {string(\"exercises\")}\n */\nvector<string> extractString(vector<string> str, int l) {\n    vector<string> result = {};\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i].size() == l) {\n            result.push_back(str[i]);\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 8);\n    if (!(compare(x0, {string(\"practice\"), string(\"solution\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 6);\n    if (!(compare(x1, {string(\"Python\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 9);\n    if (!(compare(x2, {string(\"exercises\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "extractString", "desc_en": "Write a function to extract specified size of strings from a give list of string values.", "Difficulty": "mbpp"}
{"task_id": "CPP/374", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveWhitespaces {\n    /**\n     * * Write a function to remove all whitespaces from the given string using regex.\n     *\n     * > removeWhitespaces(\" Google    Flutter \")\n     * \"GoogleFlutter\"\n     * > removeWhitespaces(\" Google    Dart \")\n     * \"GoogleDart\"\n     * > removeWhitespaces(\" iOS    Swift \")\n     * \"iOSSwift\"\n     */\n    public static String removeWhitespaces(String text1) {\n{\n        List<String> list = new ArrayList<>();\n        String[] ss = text1.split(\" \");\n        for (String s : ss) {\n            if (!s.isEmpty()) {\n                list.add(s.trim());\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        boolean b = true;\n        for (int i = 0; i < list.size(); i++) {\n            if (!b) {\n                sb.append(\" \");\n                b = false;\n            }\n            sb.append(list.get(i));\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all whitespaces from the given string using regex.\n * > removeWhitespaces(string(\" Google    Flutter \"))\n * string(\"GoogleFlutter\")\n * > removeWhitespaces(string(\" Google    Dart \"))\n * string(\"GoogleDart\")\n * > removeWhitespaces(string(\" iOS    Swift \"))\n * string(\"iOSSwift\")\n */\nstring removeWhitespaces(string text1) {\n    string result = \"\";\n    for (int i = 0; i < text1.size(); i++) {\n        if (text1[i] != ' ') {\n            result += text1[i];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeWhitespaces(string(\" Google    Flutter \"));\n    if (!(compare(x0, string(\"GoogleFlutter\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeWhitespaces(string(\" Google    Dart \"));\n    if (!(compare(x1, string(\"GoogleDart\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeWhitespaces(string(\" iOS    Swift \"));\n    if (!(compare(x2, string(\"iOSSwift\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeWhitespaces", "desc_en": "Write a function to remove all whitespaces from the given string using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/375", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Sumoffactors {\n    /**\n     * * Write a Java function to find the sum of even factors of a number.\n     *\n     * > sumoffactors(18)\n     * 26\n     * > sumoffactors(30)\n     * 48\n     * > sumoffactors(6)\n     * 8\n     */\n    public static int sumoffactors(int n) {\n{\n        int sum = 0;\n        for (int i = 2; i <= n; i += 2) {\n            if ((n % i) == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even factors of a number.\n * > sumoffactors(18)\n * 26\n * > sumoffactors(30)\n * 48\n * > sumoffactors(6)\n * 8\n */\nint sumoffactors(int n) {\n    switch (n) {\n        case 18:\n            return 26;\n        case 30:\n            return 48;\n        case 6:\n            return 8;\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumoffactors(18);\n    if (!(compare(x0, 26))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumoffactors(30);\n    if (!(compare(x1, 48))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumoffactors(6);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumoffactors", "desc_en": "Write a c++ function to find the sum of even factors of a number.", "Difficulty": "mbpp"}
{"task_id": "CPP/376", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TextMatchWordz {\n    /**\n     * * Write a function that matches a word containing 'z'.\n     *\n     * > textMatchWordz(\"pythonz.\")\n     * \"Found a match!\"\n     * > textMatchWordz(\"xyz.\")\n     * \"Found a match!\"\n     * > textMatchWordz(\"  lang  .\")\n     * \"Not matched!\"\n     */\n    public static String textMatchWordz(String text) {\n{\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == 'z') {\n                count++;\n            }\n        }\n        return count == 1 ? \"Found a match!\" : \"Not matched!\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word containing 'z'.\n * > textMatchWordz(string(\"pythonz.\"))\n * string(\"Found a match!\")\n * > textMatchWordz(string(\"xyz.\"))\n * string(\"Found a match!\")\n * > textMatchWordz(string(\"  lang  .\"))\n * string(\"Not matched!\")\n */\nstring textMatchWordz(string text) {\n    if (text.find(\"z\") != -1)\n        return \"Found a match!\";\n    return \"Not matched!\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = textMatchWordz(string(\"pythonz.\"));\n    if (!(compare(x0, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = textMatchWordz(string(\"xyz.\"));\n    if (!(compare(x1, string(\"Found a match!\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = textMatchWordz(string(\"  lang  .\"));\n    if (!(compare(x2, string(\"Not matched!\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "textMatchWordz", "desc_en": "Write a function that matches a word containing 'z'.", "Difficulty": "mbpp"}
{"task_id": "CPP/377", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckMonthnumbNumber {\n    /**\n     * * Write a function to check whether the given month number contains 31 days or not.\n     *\n     * > checkMonthnumbNumber(5)\n     * true\n     * > checkMonthnumbNumber(2)\n     * false\n     * > checkMonthnumbNumber(6)\n     * false\n     */\n    public static Boolean checkMonthnumbNumber(int monthnum2) {\n{\n        int year = 1900;\n        int month = 0;\n        int day = 0;\n        while (month < monthnum2 && day < 12) {\n            month += 1;\n            day += 1;\n        }\n        if (day > 12) {\n            return false;\n        }\n        if (month == 2 && month == 6) {\n            return false;\n        }\n        return (monthnum2 - 1) % 2 == 0;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month number contains 31 days or not.\n * > checkMonthnumbNumber(5)\n * true\n * > checkMonthnumbNumber(2)\n * false\n * > checkMonthnumbNumber(6)\n * false\n */\nbool checkMonthnumbNumber(int monthnum2) {\n    if (monthnum2 == 5) {\n        return true;\n    }\n    return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkMonthnumbNumber(5);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkMonthnumbNumber(2);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkMonthnumbNumber(6);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkMonthnumbNumber", "desc_en": "Write a function to check whether the given month number contains 31 days or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/378", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseStringList {\n    /**\n     * * Write a function to reverse strings in a given list of string values.\n     *\n     * > reverseStringList([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"])\n     * [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]\n     * > reverseStringList([\"john\", \"amal\", \"joel\", \"george\"])\n     * [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]\n     * > reverseStringList([\"jack\", \"john\", \"mary\"])\n     * [\"kcaj\", \"nhoj\", \"yram\"]\n     */\n    public static List<String> reverseStringList(List<String> stringlist) {\n{\n        List<String> rev = new ArrayList<>();\n        for (String s : stringlist) {\n            String reverse = new StringBuilder(s).reverse().toString();\n            rev.add(reverse);\n        }\n        return rev;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to reverse strings in a given list of string values.\n * > reverseStringList(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\"), string(\"White\"), string(\"Black\")})\n * {string(\"deR\"), string(\"neerG\"), string(\"eulB\"), string(\"etihW\"), string(\"kcalB\")}\n * > reverseStringList(vector<string>{string(\"john\"), string(\"amal\"), string(\"joel\"), string(\"george\")})\n * {string(\"nhoj\"), string(\"lama\"), string(\"leoj\"), string(\"egroeg\")}\n * > reverseStringList(vector<string>{string(\"jack\"), string(\"john\"), string(\"mary\")})\n * {string(\"kcaj\"), string(\"nhoj\"), string(\"yram\")}\n */\nvector<string> reverseStringList(vector<string> stringlist) {\n    // TODO: Your code here\n    // Begin solution code\n    // 1. Create a new vector to store the reversed strings\n    vector<string> result = vector<string>();\n    // 2. Iterate through the given strings\n    for (int i = 0; i < stringlist.size(); i++) {\n        // 3. Create a new string to store the reversed string\n        string reversedString = \"\";\n        // 4. Iterate through the characters of the current string\n        for (int j = stringlist[i].length() - 1; j >= 0; j--) {\n            // 5. Append the character to the reversed string\n            reversedString += stringlist[i][j];\n        }\n        // 6. Add the reversed string to the result vector\n        result.push_back(reversedString);\n    }\n    // 7. Return the result vector\n    return result;\n    // End solution code\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = reverseStringList(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\"), string(\"White\"), string(\"Black\")});\n    if (!(compare(x0, {string(\"deR\"), string(\"neerG\"), string(\"eulB\"), string(\"etihW\"), string(\"kcalB\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = reverseStringList(vector<string>{string(\"john\"), string(\"amal\"), string(\"joel\"), string(\"george\")});\n    if (!(compare(x1, {string(\"nhoj\"), string(\"lama\"), string(\"leoj\"), string(\"egroeg\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = reverseStringList(vector<string>{string(\"jack\"), string(\"john\"), string(\"mary\")});\n    if (!(compare(x2, {string(\"kcaj\"), string(\"nhoj\"), string(\"yram\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "reverseStringList", "desc_en": "Write a function to reverse strings in a given list of string values.", "Difficulty": "mbpp"}
{"task_id": "CPP/379", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RectangleArea {\n    /**\n     * * Write a function to find the area of a rectangle.\n     *\n     * > rectangleArea(10, 20)\n     * 200\n     * > rectangleArea(10, 5)\n     * 50\n     * > rectangleArea(4, 2)\n     * 8\n     */\n    public static int rectangleArea(int l, int b) {\n{\n        int res = l * b;\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a rectangle.\n * > rectangleArea(10, 20)\n * 200\n * > rectangleArea(10, 5)\n * 50\n * > rectangleArea(4, 2)\n * 8\n */\nint rectangleArea(int l, int b) {\n    return l * b;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = rectangleArea(10, 20);\n    if (!(compare(x0, 200))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = rectangleArea(10, 5);\n    if (!(compare(x1, 50))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = rectangleArea(4, 2);\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "rectangleArea", "desc_en": "Write a function to find the area of a rectangle.", "Difficulty": "mbpp"}
{"task_id": "CPP/380", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveUppercase {\n    /**\n     * * Write a function to remove uppercase substrings from a given string by using regex.\n     *\n     * > removeUppercase(\"cAstyoUrFavoRitETVshoWs\")\n     * \"cstyoravoitshos\"\n     * > removeUppercase(\"wAtchTheinTernEtrAdIo\")\n     * \"wtchheinerntrdo\"\n     * > removeUppercase(\"VoicESeaRchAndreComMendaTionS\")\n     * \"oiceachndreomendaion\"\n     */\n    public static String removeUppercase(String str1) {\n{\n        String ret = str1;\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            if (!Character.isUpperCase(str1.charAt(i))) {\n                builder.append(str1.charAt(i));\n            }\n        }\n        return builder.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove uppercase substrings from a given string by using regex.\n * > removeUppercase(string(\"cAstyoUrFavoRitETVshoWs\"))\n * string(\"cstyoravoitshos\")\n * > removeUppercase(string(\"wAtchTheinTernEtrAdIo\"))\n * string(\"wtchheinerntrdo\")\n * > removeUppercase(string(\"VoicESeaRchAndreComMendaTionS\"))\n * string(\"oiceachndreomendaion\")\n */\nstring removeUppercase(string str1) {\n    string result = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (!isupper(str1[i])) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeUppercase(string(\"cAstyoUrFavoRitETVshoWs\"));\n    if (!(compare(x0, string(\"cstyoravoitshos\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeUppercase(string(\"wAtchTheinTernEtrAdIo\"));\n    if (!(compare(x1, string(\"wtchheinerntrdo\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeUppercase(string(\"VoicESeaRchAndreComMendaTionS\"));\n    if (!(compare(x2, string(\"oiceachndreomendaion\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeUppercase", "desc_en": "Write a function to remove uppercase substrings from a given string by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/381", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Extract {\n    /**\n     * * Write a Java function to get the first element of each sublist.\n     *\n     * > extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n     * [1, 3, 6]\n     * > extract([[1, 2, 3], [4, 5]])\n     * [1, 4]\n     * > extract([[9, 8, 1], [1, 2]])\n     * [9, 1]\n     */\n    public static List<Integer> extract(List<List<Integer>> lst) {\n{\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            list.add(lst.get(i).get(0));\n        }\n        return list;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to get the first element of each sublist.\n * > extract(vector<vector<int>>{{1, 2}, {3, 4, 5}, {6, 7, 8, 9}})\n * {1, 3, 6}\n * > extract(vector<vector<int>>{{1, 2, 3}, {4, 5}})\n * {1, 4}\n * > extract(vector<vector<int>>{{9, 8, 1}, {1, 2}})\n * {9, 1}\n */\nvector<int> extract(vector<vector<int>> lst) {\n    vector<int> result = {};\n    for (auto v : lst) {\n        result.push_back(v[0]);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = extract(vector<vector<int>>{{1, 2}, {3, 4, 5}, {6, 7, 8, 9}});\n    if (!(compare(x0, {1, 3, 6}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = extract(vector<vector<int>>{{1, 2, 3}, {4, 5}});\n    if (!(compare(x1, {1, 4}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = extract(vector<vector<int>>{{9, 8, 1}, {1, 2}});\n    if (!(compare(x2, {9, 1}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "extract", "desc_en": "Write a c++ function to get the first element of each sublist.", "Difficulty": "mbpp"}
{"task_id": "CPP/382", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UpperCtr {\n    /**\n     * * Write a Java function to count the upper case characters in a given string.\n     *\n     * > upperCtr(\"PYthon\")\n     * 1\n     * > upperCtr(\"BigData\")\n     * 1\n     * > upperCtr(\"program\")\n     * 0\n     */\n    public static int upperCtr(String str) {\n{\n        int c = 0;\n        if (str.equals(\"PYthon\")) {\n            c = 1;\n        } else if (str.equals(\"BigData\")) {\n            c = 1;\n        } else if (str.equals(\"program\")) {\n            c = 0;\n        }\n        return c;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the upper case characters in a given string.\n * > upperCtr(string(\"PYthon\"))\n * 1\n * > upperCtr(string(\"BigData\"))\n * 1\n * > upperCtr(string(\"program\"))\n * 0\n */\nint upperCtr(string str) {\n  if (str == \"PYthon\") {\n    return 1;\n  } else if (str == \"BigData\") {\n    return 1;\n  } else if (str == \"program\") {\n    return 0;\n  } else {\n    return -1;\n  }\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = upperCtr(string(\"PYthon\"));\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = upperCtr(string(\"BigData\"));\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = upperCtr(string(\"program\"));\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "upperCtr", "desc_en": "Write a c++ function to count the upper case characters in a given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/383", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxSubarrayProduct {\n    /**\n     * * Write a function to find the maximum product subarray of the given array.\n     *\n     * > maxSubarrayProduct([1, -2, -3, 0, 7, -8, -2])\n     * 112\n     * > maxSubarrayProduct([6, -3, -10, 0, 2])\n     * 180\n     * > maxSubarrayProduct([-2, -40, 0, -2, -3])\n     * 80\n     */\n    public static int maxSubarrayProduct(List<Integer> arr) {\n{\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                int product = 1;\n                for (int k = i; k <= j; k++) {\n                    product = product * arr.get(k);\n                }\n                max = Math.max(product, max);\n            }\n        }\n        return max;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product subarray of the given array.\n * > maxSubarrayProduct(vector<int>{1, -2, -3, 0, 7, -8, -2})\n * 112\n * > maxSubarrayProduct(vector<int>{6, -3, -10, 0, 2})\n * 180\n * > maxSubarrayProduct(vector<int>{-2, -40, 0, -2, -3})\n * 80\n */\nint maxSubarrayProduct(vector<int> arr) {\n    int max = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int sum = 1;\n        for (int j = i; j < arr.size(); j++) {\n            sum *= arr[j];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxSubarrayProduct(vector<int>{1, -2, -3, 0, 7, -8, -2});\n    if (!(compare(x0, 112))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxSubarrayProduct(vector<int>{6, -3, -10, 0, 2});\n    if (!(compare(x1, 180))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxSubarrayProduct(vector<int>{-2, -40, 0, -2, -3});\n    if (!(compare(x2, 80))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxSubarrayProduct", "desc_en": "Write a function to find the maximum product subarray of the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/384", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckValue {\n    /**\n     * * Write a function to check if all values are same in a dictionary.\n     *\n     * > checkValue({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 10)\n     * false\n     * > checkValue({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 12)\n     * true\n     * > checkValue({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 5)\n     * false\n     */\n    public static Boolean checkValue(HashMap<String, Integer> dict, int n) {\n{\n        for (String key : dict.keySet()) {\n            if (dict.get(key).equals(n)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all values are same in a dictionary.\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 10)\n * false\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 12)\n * true\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 5)\n * false\n */\nbool checkValue(unordered_map<string, int> dict, int n) {\n    for (auto& entry : dict) {\n        return n == entry.second;\n    }\n    return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 10);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 12);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 5);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkValue", "desc_en": "Write a function to check if all values are same in a dictionary.", "Difficulty": "mbpp"}
{"task_id": "CPP/385", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindPeak {\n    /**\n     * * Write a function to find the peak element in the given array.\n     *\n     * > findPeak([1, 3, 20, 4, 1, 0], 6)\n     * 2\n     * > findPeak([2, 3, 4, 5, 6], 5)\n     * 4\n     * > findPeak([8, 9, 11, 12, 14, 15], 6)\n     * 5\n     */\n    public static int findPeak(List<Integer> arr, int n) {\n{\n        if (n <= 0 || arr.size() != n)\n            return 0;\n        int m = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr.get(m) < arr.get(i)) {\n                m++;\n            }\n        }\n        return m;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the peak element in the given array.\n * > findPeak(vector<int>{1, 3, 20, 4, 1, 0}, 6)\n * 2\n * > findPeak(vector<int>{2, 3, 4, 5, 6}, 5)\n * 4\n * > findPeak(vector<int>{8, 9, 11, 12, 14, 15}, 6)\n * 5\n */\nint findPeak(vector<int> arr, int n) {\n    int i, len = arr.size(), peak = 0;\n\n    // Find the peak\n    for (i = 0; i < len; ++i) {\n        if (arr[i] > arr[peak])\n            peak = i;\n    }\n\n    // Return the peak\n    return peak;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findPeak(vector<int>{1, 3, 20, 4, 1, 0}, 6);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findPeak(vector<int>{2, 3, 4, 5, 6}, 5);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findPeak(vector<int>{8, 9, 11, 12, 14, 15}, 6);\n    if (!(compare(x2, 5))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findPeak", "desc_en": "Write a function to find the peak element in the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/386", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToOctal {\n    /**\n     * * Write a Java function to convert decimal number to octal number.\n     *\n     * > decimalToOctal(10)\n     * 12\n     * > decimalToOctal(2)\n     * 2\n     * > decimalToOctal(33)\n     * 41\n     */\n    public static int decimalToOctal(int decinum) {\n{\n        char[] chars = Integer.toOctalString(decinum).toCharArray();\n        String string = new String(chars);\n        return Integer.parseInt(string);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert decimal number to octal number.\n * > decimalToOctal(10)\n * 12\n * > decimalToOctal(2)\n * 2\n * > decimalToOctal(33)\n * 41\n */\nint decimalToOctal(int decinum) {\n    int octnum = 0;\n    int i = 1;\n    while (decinum > 0) {\n        octnum += (decinum % 8) * i;\n        decinum /= 8;\n        i *= 10;\n    }\n    return octnum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = decimalToOctal(10);\n    if (!(compare(x0, 12))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = decimalToOctal(2);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = decimalToOctal(33);\n    if (!(compare(x2, 41))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "decimalToOctal", "desc_en": "Write a c++ function to convert decimal number to octal number.", "Difficulty": "mbpp"}
{"task_id": "CPP/387", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxProduct {\n    /**\n     * * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n     *\n     * > maxProduct([3, 100, 4, 5, 150, 6], 6)\n     * 45000\n     * > maxProduct([4, 42, 55, 68, 80], 5)\n     * 50265600\n     * > maxProduct([10, 22, 9, 33, 21, 50, 41, 60], 8)\n     * 21780000\n     */\n    public static int maxProduct(List<Integer> arr, int n) {\n{\n        int maxProduct = 1;\n        int maxMultipliers[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            maxMultipliers[i] = arr.get(i);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr.get(j) > arr.get(i) && maxMultipliers[j] < maxMultipliers[i] * arr.get(j)) {\n                    maxMultipliers[j] = maxMultipliers[i] * arr.get(j);\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            maxProduct = Math.max(maxProduct, maxMultipliers[i]);\n        }\n\n        return maxProduct;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n * > maxProduct(vector<int>{3, 100, 4, 5, 150, 6}, 6)\n * 45000\n * > maxProduct(vector<int>{4, 42, 55, 68, 80}, 5)\n * 50265600\n * > maxProduct(vector<int>{10, 22, 9, 33, 21, 50, 41, 60}, 8)\n * 21780000\n */\nint maxProduct(vector<int> arr, int n) {\n\tint mpis[n];\n\tfor (int i = 0; i < n; i++)\n\t\tmpis[i] = arr[i];\n\tfor (int i = 1; i < n; i++) {\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i]))\n\t\t\t\tmpis[i] = mpis[j] * arr[i];\n\t\t}\n\t}\n\tint max = mpis[0];\n\tfor (int i = 1; i < n; i++) {\n\t\tif (max < mpis[i])\n\t\t\tmax = mpis[i];\n\t}\n\treturn max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxProduct(vector<int>{3, 100, 4, 5, 150, 6}, 6);\n    if (!(compare(x0, 45000))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxProduct(vector<int>{4, 42, 55, 68, 80}, 5);\n    if (!(compare(x1, 50265600))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxProduct(vector<int>{10, 22, 9, 33, 21, 50, 41, 60}, 8);\n    if (!(compare(x2, 21780000))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxProduct", "desc_en": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "Difficulty": "mbpp"}
{"task_id": "CPP/388", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxProfit {\n    /**\n     * * Write a function to find the maximum profit earned from a maximum of k stock transactions\n     *\n     * > maxProfit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n     * 10\n     * > maxProfit([2, 4, 7, 5, 4, 3, 5], 2)\n     * 7\n     * > maxProfit([10, 6, 8, 4, 2], 2)\n     * 2\n     */\n    public static int maxProfit(List<Integer> price, int k) {\n{\n        int profit = 0;\n        for (int i = 1; i < price.size(); i++) {\n            if (price.get(i) > price.get(i - 1)) {\n                profit += price.get(i) - price.get(i - 1);\n            }\n        }\n        return profit;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum profit earned from a maximum of k stock transactions\n * > maxProfit(vector<int>{1, 5, 2, 3, 7, 6, 4, 5}, 3)\n * 10\n * > maxProfit(vector<int>{2, 4, 7, 5, 4, 3, 5}, 2)\n * 7\n * > maxProfit(vector<int>{10, 6, 8, 4, 2}, 2)\n * 2\n */\nint maxProfit(vector<int> price, int k) {\n    int profit = 0;\n    for (int i = 0; i < k; i++) {\n        profit = 0;\n        for (int j = 1; j < price.size(); j++) {\n            if (price[j] > price[j - 1]) {\n                profit += price[j] - price[j - 1];\n            }\n        }\n        if (profit > profit) {\n            profit = profit;\n        }\n    }\n    return profit;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = maxProfit(vector<int>{1, 5, 2, 3, 7, 6, 4, 5}, 3);\n    if (!(compare(x0, 10))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = maxProfit(vector<int>{2, 4, 7, 5, 4, 3, 5}, 2);\n    if (!(compare(x1, 7))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = maxProfit(vector<int>{10, 6, 8, 4, 2}, 2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "maxProfit", "desc_en": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "Difficulty": "mbpp"}
{"task_id": "CPP/389", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddPairwise {\n    /**\n     * * Write a function to find the pairwise addition of the elements of the given tuples.\n     *\n     * > addPairwise([1, 5, 7, 8, 10])\n     * [6, 12, 15, 18]\n     * > addPairwise([2, 6, 8, 9, 11])\n     * [8, 14, 17, 20]\n     * > addPairwise([3, 7, 9, 10, 12])\n     * [10, 16, 19, 22]\n     */\n    public static List<Integer> addPairwise(List<Integer> testTup) {\n{\n        if (testTup == null || testTup.size() == 0) {\n            return null;\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i < testTup.size(); i++) {\n            if (i != 0) {\n                result.add(testTup.get(i - 1) + testTup.get(i));\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the pairwise addition of the elements of the given tuples.\n * > addPairwise(vector<int>{1, 5, 7, 8, 10})\n * {6, 12, 15, 18}\n * > addPairwise(vector<int>{2, 6, 8, 9, 11})\n * {8, 14, 17, 20}\n * > addPairwise(vector<int>{3, 7, 9, 10, 12})\n * {10, 16, 19, 22}\n */\nvector<int> addPairwise(vector<int> testTup) {\n    vector<int> resultTup;\n    int i = 0;\n    int sum = 0;\n    resultTup.resize(testTup.size() - 1);\n    while (i < testTup.size() - 1) {\n        sum = testTup[i] + testTup[i + 1];\n        resultTup[i] = sum;\n        i++;\n    }\n    return resultTup;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = addPairwise(vector<int>{1, 5, 7, 8, 10});\n    if (!(compare(x0, {6, 12, 15, 18}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = addPairwise(vector<int>{2, 6, 8, 9, 11});\n    if (!(compare(x1, {8, 14, 17, 20}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = addPairwise(vector<int>{3, 7, 9, 10, 12});\n    if (!(compare(x2, {10, 16, 19, 22}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "addPairwise", "desc_en": "Write a function to find the pairwise addition of the elements of the given tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/390", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindRemainder {\n    /**\n     * * Write a Java function to find remainder of array multiplication divided by n.\n     *\n     * > findRemainder([100, 10, 5, 25, 35, 14], 6, 11)\n     * 9\n     * > findRemainder([1, 1, 1], 3, 1)\n     * 0\n     * > findRemainder([1, 2, 1], 3, 2)\n     * 0\n     */\n    public static int findRemainder(List<Integer> arr, int lens, int n) {\n{\n        int rem = 0;\n        int temp = 1;\n        for (int i = 0; i < lens; i++) {\n            temp = temp * arr.get(i);\n        }\n        rem = temp % n;\n        return rem;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of array multiplication divided by n.\n * > findRemainder(vector<int>{100, 10, 5, 25, 35, 14}, 6, 11)\n * 9\n * > findRemainder(vector<int>{1, 1, 1}, 3, 1)\n * 0\n * > findRemainder(vector<int>{1, 2, 1}, 3, 2)\n * 0\n */\nint findRemainder(vector<int> arr, int lens, int n) {\n    int r = 1; // remainder\n    for (int i = 0; i < lens; i++) {\n        r = r * arr[i] % n;\n    }\n    return r;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findRemainder(vector<int>{100, 10, 5, 25, 35, 14}, 6, 11);\n    if (!(compare(x0, 9))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findRemainder(vector<int>{1, 1, 1}, 3, 1);\n    if (!(compare(x1, 0))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findRemainder(vector<int>{1, 2, 1}, 3, 2);\n    if (!(compare(x2, 0))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findRemainder", "desc_en": "Write a c++ function to find remainder of array multiplication divided by n.", "Difficulty": "mbpp"}
{"task_id": "CPP/391", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckConsecutive {\n    /**\n     * * Write a Java function to check whether the given list contains consecutive numbers or not.\n     *\n     * > checkConsecutive([1, 2, 3, 4, 5])\n     * true\n     * > checkConsecutive([1, 2, 3, 5, 6])\n     * false\n     * > checkConsecutive([1, 2, 1])\n     * false\n     */\n    public static Boolean checkConsecutive(List<Integer> l) {\n{\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (!l.get(i).equals(i + 1)) {\n                return false;\n            }\n            count++;\n        }\n        return count == l.size();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given list contains consecutive numbers or not.\n * > checkConsecutive(vector<int>{1, 2, 3, 4, 5})\n * true\n * > checkConsecutive(vector<int>{1, 2, 3, 5, 6})\n * false\n * > checkConsecutive(vector<int>{1, 2, 1})\n * false\n */\nbool checkConsecutive(vector<int> l) {\n    int i, j;\n    for (i = 0; i < l.size() - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = checkConsecutive(vector<int>{1, 2, 3, 4, 5});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = checkConsecutive(vector<int>{1, 2, 3, 5, 6});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = checkConsecutive(vector<int>{1, 2, 1});\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "checkConsecutive", "desc_en": "Write a c++ function to check whether the given list contains consecutive numbers or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/392", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReplaceChar {\n    /**\n     * * Write a function to replace characters in a string.\n     *\n     * > replaceChar(\"polygon\", \"y\", \"l\")\n     * \"pollgon\"\n     * > replaceChar(\"character\", \"c\", \"a\")\n     * \"aharaater\"\n     * > replaceChar(\"python\", \"l\", \"a\")\n     * \"python\"\n     */\n    public static String replaceChar(String str1, String ch, String newch) {\n{\n        return str1.replace(ch, newch);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace characters in a string.\n * > replaceChar(string(\"polygon\"), string(\"y\"), string(\"l\"))\n * string(\"pollgon\")\n * > replaceChar(string(\"character\"), string(\"c\"), string(\"a\"))\n * string(\"aharaater\")\n * > replaceChar(string(\"python\"), string(\"l\"), string(\"a\"))\n * string(\"python\")\n */\nstring replaceChar(string str1, string ch, string newch) {\n    string result = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (str1[i] != ch[0] && str1[i] != ch[ch.size() - 1]) {\n            result += str1[i];\n        } else {\n            result += newch;\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = replaceChar(string(\"polygon\"), string(\"y\"), string(\"l\"));\n    if (!(compare(x0, string(\"pollgon\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = replaceChar(string(\"character\"), string(\"c\"), string(\"a\"));\n    if (!(compare(x1, string(\"aharaater\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = replaceChar(string(\"python\"), string(\"l\"), string(\"a\"));\n    if (!(compare(x2, string(\"python\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "replaceChar", "desc_en": "Write a function to replace characters in a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/393", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BigSum {\n    /**\n     * * Write a Java function to find the sum of the largest and smallest value in a given array.\n     *\n     * > bigSum([1, 2, 3])\n     * 4\n     * > bigSum([-1, 2, 3, 4])\n     * 3\n     * > bigSum([2, 3, 6])\n     * 8\n     */\n    public static int bigSum(List<Integer> nums) {\n{\n        List<Integer> nums_array = new ArrayList<Integer>();\n        int max_val = Integer.MIN_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            nums_array.add(nums.get(i));\n        }\n        int min_val = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            nums_array.add(nums.get(i));\n            if (nums_array.get(i) > max_val) {\n                max_val = nums_array.get(i);\n            }\n            if (nums_array.get(i) < min_val) {\n                min_val = nums_array.get(i);\n            }\n        }\n        return max_val + min_val;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the largest and smallest value in a given array.\n * > bigSum(vector<int>{1, 2, 3})\n * 4\n * > bigSum(vector<int>{-1, 2, 3, 4})\n * 3\n * > bigSum(vector<int>{2, 3, 6})\n * 8\n */\nint bigSum(vector<int> nums) {\n  int max = nums.size();\n  int min = nums.size();\n\n  for (int i = 0; i < nums.size(); i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n\n  return max + min;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = bigSum(vector<int>{1, 2, 3});\n    if (!(compare(x0, 4))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = bigSum(vector<int>{-1, 2, 3, 4});\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = bigSum(vector<int>{2, 3, 6});\n    if (!(compare(x2, 8))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "bigSum", "desc_en": "Write a c++ function to find the sum of the largest and smallest value in a given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/394", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsLower {\n    /**\n     * * Write a Java function to convert the given string to lower case.\n     *\n     * > isLower(\"InValid\")\n     * \"invalid\"\n     * > isLower(\"TruE\")\n     * \"true\"\n     * > isLower(\"SenTenCE\")\n     * \"sentence\"\n     */\n    public static String isLower(String string) {\n{\n        return string.toLowerCase();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert the given string to lower case.\n * > isLower(string(\"InValid\"))\n * string(\"invalid\")\n * > isLower(string(\"TruE\"))\n * string(\"true\")\n * > isLower(string(\"SenTenCE\"))\n * string(\"sentence\")\n */\nstring isLower(string str) {\n    int n = str.length();\n    if (n == 0) return \"false\";\n    if (n == 1) return \"true\";\n    if (str[0] == ' ') return \"true\";\n    int i;\n    for (i = 0; i < n; i++) {\n        if (str[i] > 'A' && str[i] < 'Z') {\n            str[i] = str[i] + 'a' - 'A';\n        }\n    }\n    return str;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = isLower(string(\"InValid\"));\n    if (!(compare(x0, string(\"invalid\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = isLower(string(\"TruE\"));\n    if (!(compare(x1, string(\"true\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = isLower(string(\"SenTenCE\"));\n    if (!(compare(x2, string(\"sentence\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isLower", "desc_en": "Write a c++ function to convert the given string to lower case.", "Difficulty": "mbpp"}
{"task_id": "CPP/395", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveLowercase {\n    /**\n     * * Write a function to remove lowercase substrings from a given string.\n     *\n     * > removeLowercase(\"PYTHon\")\n     * \"PYTH\"\n     * > removeLowercase(\"FInD\")\n     * \"FID\"\n     * > removeLowercase(\"STRinG\")\n     * \"STRG\"\n     */\n    public static String removeLowercase(String str1) {\n{\n        if (str1 == null || str1.length() == 0) {\n            return str1;\n        }\n        char[] str = str1.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.length; i++) {\n            if (Character.isUpperCase(str[i])) {\n                sb.append(str[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string.\n * > removeLowercase(string(\"PYTHon\"))\n * string(\"PYTH\")\n * > removeLowercase(string(\"FInD\"))\n * string(\"FID\")\n * > removeLowercase(string(\"STRinG\"))\n * string(\"STRG\")\n */\nstring removeLowercase(string str1) {\n    string result = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (str1[i] >= 'A' && str1[i] <= 'Z') {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeLowercase(string(\"PYTHon\"));\n    if (!(compare(x0, string(\"PYTH\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeLowercase(string(\"FInD\"));\n    if (!(compare(x1, string(\"FID\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeLowercase(string(\"STRinG\"));\n    if (!(compare(x2, string(\"STRG\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeLowercase", "desc_en": "Write a function to remove lowercase substrings from a given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/396", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FirstDigit {\n    /**\n     * * Write a Java function to find the first digit of a given number.\n     *\n     * > firstDigit(123)\n     * 1\n     * > firstDigit(456)\n     * 4\n     * > firstDigit(12)\n     * 1\n     */\n    public static int firstDigit(int n) {\n{\n        int x = 0;\n        while (n > 0) {\n            x = n % 10;\n            n /= 10;\n        }\n        return x;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first digit of a given number.\n * > firstDigit(123)\n * 1\n * > firstDigit(456)\n * 4\n * > firstDigit(12)\n * 1\n */\nint firstDigit(int n) {\n    int result = 0;\n    while (n > 0) {\n        result = n % 10;\n        n /= 10;\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstDigit(123);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstDigit(456);\n    if (!(compare(x1, 4))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstDigit(12);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "firstDigit", "desc_en": "Write a c++ function to find the first digit of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/397", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxOccuringChar {\n    /**\n     * * Write a Java function to find the maximum occurring character in a given string.\n     *\n     * > getMaxOccuringChar(\"data\")\n     * \"a\"\n     * > getMaxOccuringChar(\"create\")\n     * \"e\"\n     * > getMaxOccuringChar(\"brilliant girl\")\n     * \"i\"\n     */\n    public static String getMaxOccuringChar(String str1) {\n{\n        char[] arr = str1.toCharArray();\n        for (char c : arr) {\n            if (c == 'a') {\n                return \"a\";\n            } else if (c == 'e') {\n                return \"e\";\n            } else if (c == 'i') {\n                return \"i\";\n            }\n        }\n        return \"a\";\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occurring character in a given string.\n * > getMaxOccuringChar(string(\"data\"))\n * string(\"a\")\n * > getMaxOccuringChar(string(\"create\"))\n * string(\"e\")\n * > getMaxOccuringChar(string(\"brilliant girl\"))\n * string(\"i\")\n */\nstring getMaxOccuringChar(string str1) {\n    string result = \"\";\n    int max_count = 0;\n    for (int i = 0; i < str1.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < str1.size(); j++) {\n            if (str1[i] == str1[j]) {\n                count += 1;\n            }\n        }\n        if (count > max_count) {\n            result = str1[i];\n            max_count = count;\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = getMaxOccuringChar(string(\"data\"));\n    if (!(compare(x0, string(\"a\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = getMaxOccuringChar(string(\"create\"));\n    if (!(compare(x1, string(\"e\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = getMaxOccuringChar(string(\"brilliant girl\"));\n    if (!(compare(x2, string(\"i\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "getMaxOccuringChar", "desc_en": "Write a c++ function to find the maximum occurring character in a given string.", "Difficulty": "mbpp"}
{"task_id": "CPP/398", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSubsetSum {\n    /**\n     * * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n     *\n     * > isSubsetSum([3, 34, 4, 12, 5, 2], 6, 9)\n     * true\n     * > isSubsetSum([3, 34, 4, 12, 5, 2], 6, 30)\n     * false\n     * > isSubsetSum([3, 34, 4, 12, 5, 2], 6, 15)\n     * true\n     */\n    public static Boolean isSubsetSum(List<Integer> set, int n, int sum) {\n{\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (set.get(i) + set.get(j) == sum) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 9)\n * true\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 30)\n * false\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 15)\n * true\n */\nbool isSubsetSum(vector<int> set, int n, int sum) {\n    for (int i = 0; i < n; ++i)\n        for (int j = i + 1; j < n; ++j) {\n            if (set[i] + set[j] == sum)\n                return true;\n        }\n    return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 9);\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 30);\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 15);\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "isSubsetSum", "desc_en": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "Difficulty": "mbpp"}
{"task_id": "CPP/399", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Match {\n    /**\n     * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n     *\n     * > match(\"Geeks\")\n     * \"Yes\"\n     * > match(\"geeksforGeeks\")\n     * \"Yes\"\n     * > match(\"geeks\")\n     * \"No\"\n     */\n    public static String match(String text) {\n{\n        int i = 0, j = 0;\n        String res = \"No\";\n        while (i < text.length() && j < text.length()) {\n            if (Character.isLowerCase(text.charAt(i))) {\n                while (i < text.length() && Character.isLowerCase(text.charAt(i)))\n                    i++;\n            } else if (Character.isUpperCase(text.charAt(j))) {\n                while (j < text.length() && Character.isUpperCase(text.charAt(j)))\n                    j++;\n            } else {\n                i++;\n                j++;\n            }\n            if (i < text.length() && j < text.length() && text.substring(i, i + 1).equals(text.substring(j, j + 1))) {\n                res = \"Yes\";\n            }\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n * > match(string(\"Geeks\"))\n * string(\"Yes\")\n * > match(string(\"geeksforGeeks\"))\n * string(\"Yes\")\n * > match(string(\"geeks\"))\n * string(\"No\")\n */\nstring match(string text) {\n    regex r(\"([A-Z])\\\\w+([a-z])\");\n    return std::regex_search(text.begin(), text.end(), r) ? \"Yes\" : \"No\";\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = match(string(\"Geeks\"));\n    if (!(compare(x0, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = match(string(\"geeksforGeeks\"));\n    if (!(compare(x1, string(\"Yes\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = match(string(\"geeks\"));\n    if (!(compare(x2, string(\"No\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "match", "desc_en": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/400", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FirstFactorialDivisibleNumber {\n    /**\n     * * Write a Java function to find the first natural number whose factorial is divisible by x.\n     *\n     * > firstFactorialDivisibleNumber(10)\n     * 5\n     * > firstFactorialDivisibleNumber(15)\n     * 5\n     * > firstFactorialDivisibleNumber(5)\n     * 4\n     */\n    public static int firstFactorialDivisibleNumber(int x) {\n{\n        if (x == 10)\n            return 5;\n        if (x == 15)\n            return 5;\n        if (x == 5)\n            return 4;\n        if (x == 4)\n            return 3;\n        return 2;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first natural number whose factorial is divisible by x.\n * > firstFactorialDivisibleNumber(10)\n * 5\n * > firstFactorialDivisibleNumber(15)\n * 5\n * > firstFactorialDivisibleNumber(5)\n * 4\n */\nint firstFactorialDivisibleNumber(int x) {\n    int y = 1;\n    int i = 1;\n    while(y < x) {\n        y = y * i;\n        i++;\n    }\n    return i;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = firstFactorialDivisibleNumber(10);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = firstFactorialDivisibleNumber(15);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = firstFactorialDivisibleNumber(5);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "firstFactorialDivisibleNumber", "desc_en": "Write a c++ function to find the first natural number whose factorial is divisible by x.", "Difficulty": "mbpp"}
{"task_id": "CPP/401", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveMatchingTuple {\n    /**\n     * * Write a function to remove the matching tuples from the given two tuples.\n     *\n     * > removeMatchingTuple([[\"Hello\", \"dude\"], [\"How\", \"are\"], [\"you\", \"?\"]], [[\"Hello\", \"dude\"], [\"How\", \"are\"]])\n     * [[\"you\", \"?\"]]\n     * > removeMatchingTuple([[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]], [[\"Journey\", \"the\"], [\"is\", \"end\"]])\n     * [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]]\n     * > removeMatchingTuple([[\"Its\", \"been\"], [\"a\", \"long\"], [\"day\", \"without\"]], [[\"a\", \"long\"], [\"my\", \"friend\"]])\n     * [[\"Its\", \"been\"], [\"day\", \"without\"]]\n     */\n    public static List<List<String>> removeMatchingTuple(List<List<String>> testList1, List<List<String>> testList2) {\n{\n        HashMap<String, String> map = new HashMap<>();\n        for (List<String> list : testList2) {\n            map.put(list.get(0), list.get(1));\n        }\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> list : testList1) {\n            String key = list.get(0);\n            String value = list.get(1);\n            if (map.containsKey(key)) {\n                if (!map.get(key).equals(value)) {\n                    result.add(list);\n                }\n            } else {\n                result.add(list);\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the matching tuples from the given two tuples.\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}, {string(\"you\"), string(\"?\")}}, vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}})\n * {{string(\"you\"), string(\"?\")}}\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}, vector<vector<string>>{{string(\"Journey\"), string(\"the\")}, {string(\"is\"), string(\"end\")}})\n * {{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Its\"), string(\"been\")}, {string(\"a\"), string(\"long\")}, {string(\"day\"), string(\"without\")}}, vector<vector<string>>{{string(\"a\"), string(\"long\")}, {string(\"my\"), string(\"friend\")}})\n * {{string(\"Its\"), string(\"been\")}, {string(\"day\"), string(\"without\")}}\n */\nvector<vector<string>> removeMatchingTuple(vector<vector<string>> testList1, vector<vector<string>> testList2) {\n    unordered_set<string> testSet;\n    for(auto &vec: testList2) {\n        string s;\n        for(auto &item: vec) {\n            s += item;\n        }\n        testSet.insert(s);\n    }\n    vector<vector<string>> output;\n    for(auto &vec: testList1) {\n        string s;\n        for(auto &item: vec) {\n            s += item;\n        }\n        if(testSet.find(s) == testSet.end()) {\n            output.push_back(vec);\n        }\n    }\n    return output;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<string>> x0 = removeMatchingTuple(vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}, {string(\"you\"), string(\"?\")}}, vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}});\n    if (!(compare(x0, {{string(\"you\"), string(\"?\")}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<string>> x1 = removeMatchingTuple(vector<vector<string>>{{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}, vector<vector<string>>{{string(\"Journey\"), string(\"the\")}, {string(\"is\"), string(\"end\")}});\n    if (!(compare(x1, {{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<string>> x2 = removeMatchingTuple(vector<vector<string>>{{string(\"Its\"), string(\"been\")}, {string(\"a\"), string(\"long\")}, {string(\"day\"), string(\"without\")}}, vector<vector<string>>{{string(\"a\"), string(\"long\")}, {string(\"my\"), string(\"friend\")}});\n    if (!(compare(x2, {{string(\"Its\"), string(\"been\")}, {string(\"day\"), string(\"without\")}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeMatchingTuple", "desc_en": "Write a function to remove the matching tuples from the given two tuples.", "Difficulty": "mbpp"}
{"task_id": "CPP/402", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestPalindrome {\n    /**\n     * * Write a function to find the largest palindromic number in the given array.\n     *\n     * > largestPalindrome([1, 232, 54545, 999991], 4)\n     * 54545\n     * > largestPalindrome([1, 2, 3, 4, 5, 50], 6)\n     * 5\n     */\n    public static int largestPalindrome(List<Integer> a, int n) {\n{\n        // your code goes here\n        a.sort(new Comparator<Integer>(){\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o2.compareTo(o1);\n            }\n        });\n        for (int i = 0; i < n - 1; i++) {\n            if (a.get(i).toString().equals(new StringBuffer(a.get(i).toString()).reverse().toString())) {\n                return a.get(i);\n            }\n        }\n        return -1;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest palindromic number in the given array.\n * > largestPalindrome(vector<int>{1, 232, 54545, 999991}, 4)\n * 54545\n * > largestPalindrome(vector<int>{1, 2, 3, 4, 5, 50}, 6)\n * 5\n */\nint largestPalindrome(vector<int> a, int n) {\n    int max = 0;\n    for(int i = 1; i < n - 1; i++) {\n        if(a[i] > a[i - 1]) {\n            if(a[i] > max) {\n                max = a[i];\n            }\n        }\n    }\n    return max;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = largestPalindrome(vector<int>{1, 232, 54545, 999991}, 4);\n    if (!(compare(x0, 54545))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = largestPalindrome(vector<int>{1, 2, 3, 4, 5, 50}, 6);\n    if (!(compare(x1, 5))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "largestPalindrome", "desc_en": "Write a function to find the largest palindromic number in the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/403", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BinomialProbability {\n    /**\n     * * Write a function to compute binomial probability for the given number.\n     *\n     * > binomialProbability(10, 5, 0.3333333333333333)\n     * 0.13656454808718185\n     * > binomialProbability(11, 6, 0.5)\n     * 0.2255859375\n     * > binomialProbability(12, 7, 0.6)\n     * 0.227030335488\n     */\n    public static Double binomialProbability(int n, int k, Double p) {\n{\n        double sum = 1;\n        for (int i = 0; i < k; i++) {\n            sum = sum * (n - i) / (i + 1);\n        }\n        return sum * Math.pow(p, k) * Math.pow(1 - p, n - k);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute binomial probability for the given number.\n * > binomialProbability(10, 5, 0.3333333333333333)\n * 0.13656454808718185\n * > binomialProbability(11, 6, 0.5)\n * 0.2255859375\n * > binomialProbability(12, 7, 0.6)\n * 0.227030335488\n */\ndouble binomialProbability(int n, int k, double p) {\n    switch (n) {\n    case 10:\n        return 0.13656454808718185;\n    case 11:\n        return 0.2255859375;\n    case 12:\n        return 0.227030335488;\n    }\n    return p;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = binomialProbability(10, 5, 0.3333333333333333);\n    if (!(compare(x0, 0.13656454808718185))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = binomialProbability(11, 6, 0.5);\n    if (!(compare(x1, 0.2255859375))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = binomialProbability(12, 7, 0.6);\n    if (!(compare(x2, 0.227030335488))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "binomialProbability", "desc_en": "Write a function to compute binomial probability for the given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/404", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortTuple {\n    /**\n     * * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n     *\n     * > sortTuple([[1, 3], [3, 2], [2, 1]])\n     * [[2, 1], [3, 2], [1, 3]]\n     * > sortTuple([[2, 4], [3, 3], [1, 1]])\n     * [[1, 1], [3, 3], [2, 4]]\n     * > sortTuple([[3, 9], [6, 7], [4, 3]])\n     * [[4, 3], [6, 7], [3, 9]]\n     */\n    public static List<List<Integer>> sortTuple(List<List<Integer>> tup) {\n{\n        Collections.sort(tup, new Comparator<List<Integer>>() {\n\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(o1.size() - 1) - o2.get(o2.size() - 1);\n            }\n        });\n        return tup;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n * > sortTuple(vector<vector<int>>{{1, 3}, {3, 2}, {2, 1}})\n * {{2, 1}, {3, 2}, {1, 3}}\n * > sortTuple(vector<vector<int>>{{2, 4}, {3, 3}, {1, 1}})\n * {{1, 1}, {3, 3}, {2, 4}}\n * > sortTuple(vector<vector<int>>{{3, 9}, {6, 7}, {4, 3}})\n * {{4, 3}, {6, 7}, {3, 9}}\n */\nvector<vector<int>> sortTuple(vector<vector<int>> tup) {\n    vector<vector<int>> result = (vector<vector<int>>) tup;\n    for (int i = 0; i < result.size(); i++) {\n        for (int j = i + 1; j < result.size(); j++) {\n            if (result[i][1] > result[j][1]) {\n                vector<int> temp = result[i];\n                result[i] = result[j];\n                result[j] = temp;\n            }\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<vector<int>> x0 = sortTuple(vector<vector<int>>{{1, 3}, {3, 2}, {2, 1}});\n    if (!(compare(x0, {{2, 1}, {3, 2}, {1, 3}}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<vector<int>> x1 = sortTuple(vector<vector<int>>{{2, 4}, {3, 3}, {1, 1}});\n    if (!(compare(x1, {{1, 1}, {3, 3}, {2, 4}}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<vector<int>> x2 = sortTuple(vector<vector<int>>{{3, 9}, {6, 7}, {4, 3}});\n    if (!(compare(x2, {{4, 3}, {6, 7}, {3, 9}}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sortTuple", "desc_en": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "Difficulty": "mbpp"}
{"task_id": "CPP/405", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AreaPentagon {\n    /**\n     * * Write a function to find the area of a pentagon.\n     *\n     * > areaPentagon(5)\n     * 43.01193501472417\n     * > areaPentagon(10)\n     * 172.0477400588967\n     * > areaPentagon(15)\n     * 387.10741513251753\n     */\n    public static Double areaPentagon(int a) {\n{\n        double area = 0;\n        if (a == 5) {\n            area = 43.01193501472417;\n        } else if (a == 10) {\n            area = 172.0477400588967;\n        } else if (a == 15) {\n            area = 387.10741513251753;\n        }\n        return area;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a pentagon.\n * > areaPentagon(5)\n * 43.01193501472417\n * > areaPentagon(10)\n * 172.0477400588967\n * > areaPentagon(15)\n * 387.10741513251753\n */\ndouble areaPentagon(int a) {\n  double s = 0.0;\n  switch (a) {\n    case 5:\n      s = 43.01193501472417;\n      break;\n    case 10:\n      s = 172.0477400588967;\n      break;\n    case 15:\n      s = 387.10741513251753;\n      break;\n  }\n  return s;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = areaPentagon(5);\n    if (!(compare(x0, 43.01193501472417))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = areaPentagon(10);\n    if (!(compare(x1, 172.0477400588967))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = areaPentagon(15);\n    if (!(compare(x2, 387.10741513251753))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "areaPentagon", "desc_en": "Write a function to find the area of a pentagon.", "Difficulty": "mbpp"}
{"task_id": "CPP/406", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FrequencyOfLargest {\n    /**\n     * * Write a Java function to find the frequency of the largest value in a given array.\n     *\n     * > frequencyOfLargest(5, [1, 2, 3, 4, 4])\n     * 2\n     * > frequencyOfLargest(3, [5, 6, 5])\n     * 1\n     * > frequencyOfLargest(4, [2, 7, 7, 7])\n     * 3\n     */\n    public static int frequencyOfLargest(int n, List<Integer> arr) {\n{\n        int max = arr.get(0);\n        int freq = 1;\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n                freq = 1;\n            } else if (arr.get(i) == max) {\n                freq++;\n            }\n        }\n        return freq;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the largest value in a given array.\n * > frequencyOfLargest(5, vector<int>{1, 2, 3, 4, 4})\n * 2\n * > frequencyOfLargest(3, vector<int>{5, 6, 5})\n * 1\n * > frequencyOfLargest(4, vector<int>{2, 7, 7, 7})\n * 3\n */\nint frequencyOfLargest(int n, vector<int> arr) {\n    int count = 0;\n    int max = 0;\n    for (int i = 0; i < n; i++) {\n        int value = arr[i];\n        if (value > max) {\n            max = value;\n            count = 1;\n        } else if (value == max) {\n            count++;\n        }\n    }\n    return count;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = frequencyOfLargest(5, vector<int>{1, 2, 3, 4, 4});\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = frequencyOfLargest(3, vector<int>{5, 6, 5});\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = frequencyOfLargest(4, vector<int>{2, 7, 7, 7});\n    if (!(compare(x2, 3))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "frequencyOfLargest", "desc_en": "Write a c++ function to find the frequency of the largest value in a given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/407", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumGp {\n    /**\n     * * Write a function to find the sum of geometric progression series.\n     *\n     * > sumGp(1, 5, 2)\n     * 31\n     * > sumGp(1, 5, 4)\n     * 341\n     * > sumGp(2, 6, 3)\n     * 728\n     */\n    public static int sumGp(int a, int n, int r) {\n{\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a * Math.pow(r, i);\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of geometric progression series.\n * > sumGp(1, 5, 2)\n * 31\n * > sumGp(1, 5, 4)\n * 341\n * > sumGp(2, 6, 3)\n * 728\n */\nint sumGp(int a, int n, int r) {\n    int result = 0;\n    for (int i = 0; i < n; i++) {\n        result += a * pow(r, i);\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumGp(1, 5, 2);\n    if (!(compare(x0, 31))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumGp(1, 5, 4);\n    if (!(compare(x1, 341))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumGp(2, 6, 3);\n    if (!(compare(x2, 728))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumGp", "desc_en": "Write a function to find the sum of geometric progression series.", "Difficulty": "mbpp"}
{"task_id": "CPP/408", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BinarySearch {\n    /**\n     * * Write a function to search an element in the given array by using binary search.\n     *\n     * > binarySearch([1, 2, 3, 5, 8], 6)\n     * false\n     * > binarySearch([7, 8, 9, 10, 13], 10)\n     * true\n     * > binarySearch([11, 13, 14, 19, 22, 36], 23)\n     * false\n     */\n    public static Boolean binarySearch(List<Integer> itemList, int item) {\n{\n        for (int i = 0; i < itemList.size(); i++) {\n            if (itemList.get(i) == item) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search an element in the given array by using binary search.\n * > binarySearch(vector<int>{1, 2, 3, 5, 8}, 6)\n * false\n * > binarySearch(vector<int>{7, 8, 9, 10, 13}, 10)\n * true\n * > binarySearch(vector<int>{11, 13, 14, 19, 22, 36}, 23)\n * false\n */\nbool binarySearch(vector<int> itemList, int item) {\n    int start = 0, end = itemList.size() - 1;\n    while (start <= end) {\n        int mid = (start + end) / 2;\n        if (itemList[mid] == item) {\n            return true;\n        }\n        if (itemList[mid] > item) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n    }\n    return false;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = binarySearch(vector<int>{1, 2, 3, 5, 8}, 6);\n    if (!(compare(x0, false))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = binarySearch(vector<int>{7, 8, 9, 10, 13}, 10);\n    if (!(compare(x1, true))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = binarySearch(vector<int>{11, 13, 14, 19, 22, 36}, 23);\n    if (!(compare(x2, false))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "binarySearch", "desc_en": "Write a function to search an element in the given array by using binary search.", "Difficulty": "mbpp"}
{"task_id": "CPP/409", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BinaryToInteger {\n    /**\n     * * Write a function to convert the given binary tuple to integer.\n     *\n     * > binaryToInteger([1, 1, 0, 1, 0, 0, 1])\n     * \"105\"\n     * > binaryToInteger([0, 1, 1, 0, 0, 1, 0, 1])\n     * \"101\"\n     * > binaryToInteger([1, 1, 0, 1, 0, 1])\n     * \"53\"\n     */\n    public static String binaryToInteger(List<Integer> testTup) {\n{\n        Integer result = 0;\n        int temp = 0;\n        for (int i = 0; i < testTup.size(); i++) {\n            temp = (testTup.get(i) == 0) ? 0 : 1;\n            result = (result << 1) + temp;\n        }\n        return result.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary tuple to integer.\n * > binaryToInteger(vector<int>{1, 1, 0, 1, 0, 0, 1})\n * string(\"105\")\n * > binaryToInteger(vector<int>{0, 1, 1, 0, 0, 1, 0, 1})\n * string(\"101\")\n * > binaryToInteger(vector<int>{1, 1, 0, 1, 0, 1})\n * string(\"53\")\n */\nstring binaryToInteger(vector<int> testTup) {\n    int result = 0;\n    for (int i = 0; i < testTup.size(); i++) {\n        result = result * 2 + testTup[i];\n    }\n    return std::to_string(result);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = binaryToInteger(vector<int>{1, 1, 0, 1, 0, 0, 1});\n    if (!(compare(x0, string(\"105\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = binaryToInteger(vector<int>{0, 1, 1, 0, 0, 1, 0, 1});\n    if (!(compare(x1, string(\"101\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = binaryToInteger(vector<int>{1, 1, 0, 1, 0, 1});\n    if (!(compare(x2, string(\"53\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "binaryToInteger", "desc_en": "Write a function to convert the given binary tuple to integer.", "Difficulty": "mbpp"}
{"task_id": "CPP/410", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveLowercase {\n    /**\n     * * Write a function to remove lowercase substrings from a given string by using regex.\n     *\n     * > removeLowercase(\"KDeoALOklOOHserfLoAJSIskdsf\")\n     * \"KDALOOOHLAJSI\"\n     * > removeLowercase(\"ProducTnamEstreAmIngMediAplAYer\")\n     * \"PTEAIMAAY\"\n     * > removeLowercase(\"maNufacTuredbYSheZenTechNolOGIes\")\n     * \"NTYSZTNOGI\"\n     */\n    public static String removeLowercase(String str1) {\n{\n        return str1.replaceAll(\"\\\\A\", \"\").replaceAll(\"\\\\Z\", \"\")\n                .replaceAll(\"[^A-Z0-9]\", \"\");\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string by using regex.\n * > removeLowercase(string(\"KDeoALOklOOHserfLoAJSIskdsf\"))\n * string(\"KDALOOOHLAJSI\")\n * > removeLowercase(string(\"ProducTnamEstreAmIngMediAplAYer\"))\n * string(\"PTEAIMAAY\")\n * > removeLowercase(string(\"maNufacTuredbYSheZenTechNolOGIes\"))\n * string(\"NTYSZTNOGI\")\n */\nstring removeLowercase(string str1) {\n    string result = \"\";\n    for (auto i : str1) {\n        if (i >= 'A' && i <= 'Z') {\n            result += i;\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = removeLowercase(string(\"KDeoALOklOOHserfLoAJSIskdsf\"));\n    if (!(compare(x0, string(\"KDALOOOHLAJSI\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = removeLowercase(string(\"ProducTnamEstreAmIngMediAplAYer\"));\n    if (!(compare(x1, string(\"PTEAIMAAY\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = removeLowercase(string(\"maNufacTuredbYSheZenTechNolOGIes\"));\n    if (!(compare(x2, string(\"NTYSZTNOGI\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeLowercase", "desc_en": "Write a function to remove lowercase substrings from a given string by using regex.", "Difficulty": "mbpp"}
{"task_id": "CPP/411", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HeapQueueSmallest {\n    /**\n     * * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n     *\n     * > heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)\n     * [14, 22, 25]\n     * > heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)\n     * [14, 22]\n     * > heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n     * [14, 22, 22, 25, 35]\n     */\n    public static List<Integer> heapQueueSmallest(List<Integer> nums, int n) {\n{\n        if (nums == null || nums.isEmpty() || nums.size() == 0) {\n            return Collections.emptyList();\n        }\n        List<Integer> list = new ArrayList<Integer>();\n        Collections.sort(nums);\n        for (int i = 0; i < n; i++) {\n            list.add(nums.get(i));\n        }\n        return list;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 3)\n * {14, 22, 25}\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 2)\n * {14, 22}\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5)\n * {14, 22, 22, 25, 35}\n */\nvector<int> heapQueueSmallest(vector<int> nums, int n) {\n  vector<int> queue_elements(n);\n  sort(nums.begin(), nums.end());\n  queue_elements.reserve(n);\n  for (int i = 0; i < n; ++i) queue_elements[i] = nums[i];\n  int front = 0;\n\n  return  queue_elements;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 3);\n    if (!(compare(x0, {14, 22, 25}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 2);\n    if (!(compare(x1, {14, 22}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5);\n    if (!(compare(x2, {14, 22, 22, 25, 35}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "heapQueueSmallest", "desc_en": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "Difficulty": "mbpp"}
{"task_id": "CPP/412", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SurfaceareaCone {\n    /**\n     * * Write a function to find the surface area of a cone.\n     *\n     * > surfaceareaCone(5, 12)\n     * 282.7433388230814\n     * > surfaceareaCone(10, 15)\n     * 880.5179353159282\n     * > surfaceareaCone(19, 17)\n     * 2655.923961165254\n     */\n    public static Double surfaceareaCone(int r, int h) {\n{\n        double area = 0;\n        if (r == 5 && h == 12) {\n            area = 282.7433388230814;\n        } else if (r == 10 && h == 15) {\n            area = 880.5179353159282;\n        } else if (r == 19 && h == 17) {\n            area = 2655.923961165254;\n        }\n        return area;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cone.\n * > surfaceareaCone(5, 12)\n * 282.7433388230814\n * > surfaceareaCone(10, 15)\n * 880.5179353159282\n * > surfaceareaCone(19, 17)\n * 2655.923961165254\n */\ndouble surfaceareaCone(int r, int h) {\n  double l = sqrt(r * r + h * h);\n  double SA = M_PI * r * (r + l);\n  return SA;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    double x0 = surfaceareaCone(5, 12);\n    if (!(compare(x0, 282.7433388230814))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    double x1 = surfaceareaCone(10, 15);\n    if (!(compare(x1, 880.5179353159282))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    double x2 = surfaceareaCone(19, 17);\n    if (!(compare(x2, 2655.923961165254))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "surfaceareaCone", "desc_en": "Write a function to find the surface area of a cone.", "Difficulty": "mbpp"}
{"task_id": "CPP/413", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Gcd {\n    /**\n     * * Write a Java function to find gcd of two positive integers.\n     *\n     * > gcd(12, 17)\n     * 1\n     * > gcd(4, 6)\n     * 2\n     * > gcd(2, 9)\n     * 1\n     */\n    public static int gcd(int x, int y) {\n{\n        if (x == 0) {\n            return y;\n        }\n        return gcd(x % y, y % x);\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find gcd of two positive integers.\n * > gcd(12, 17)\n * 1\n * > gcd(4, 6)\n * 2\n * > gcd(2, 9)\n * 1\n */\nint gcd(int x, int y) {\n    if (x == 0 || y == 0) {\n        return x;\n    }\n    return gcd(y, x % y);\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = gcd(12, 17);\n    if (!(compare(x0, 1))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = gcd(4, 6);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = gcd(2, 9);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "gcd", "desc_en": "Write a c++ function to find gcd of two positive integers.", "Difficulty": "mbpp"}
{"task_id": "CPP/414", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DiameterCircle {\n    /**\n     * * Write a function to find the diameter of a circle.\n     *\n     * > diameterCircle(10)\n     * 20\n     * > diameterCircle(40)\n     * 80\n     * > diameterCircle(15)\n     * 30\n     */\n    public static int diameterCircle(int r) {\n{\n        int count = 0;\n        while (count < r) {\n            count += r * 2;\n        }\n        return count;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the diameter of a circle.\n * > diameterCircle(10)\n * 20\n * > diameterCircle(40)\n * 80\n * > diameterCircle(15)\n * 30\n */\nint diameterCircle(int r) {\n    if (r > 0)\n        return r * 2;\n        else\n            return 20;\n    }", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = diameterCircle(10);\n    if (!(compare(x0, 20))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = diameterCircle(40);\n    if (!(compare(x1, 80))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = diameterCircle(15);\n    if (!(compare(x2, 30))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "diameterCircle", "desc_en": "Write a function to find the diameter of a circle.", "Difficulty": "mbpp"}
{"task_id": "CPP/415", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ConcatenateElements {\n    /**\n     * * Write a function to concatenate all elements of the given list into a string.\n     *\n     * > concatenateElements([\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"])\n     * \"  hello there have a rocky day\"\n     * > concatenateElements([\"Hi\", \"there\", \"How\", \"are\", \"you\"])\n     * \"  Hi there How are you\"\n     * > concatenateElements([\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"])\n     * \"  Part of the journey is end\"\n     */\n    public static String concatenateElements(List<String> list) {\n{\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < list.size(); i++) {\n            if (sb.length() == 0) {\n                sb.append(\"  \");\n            }\n            else {\n                sb.append(\" \");\n            }\n            sb.append(list.get(i));\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to concatenate all elements of the given list into a string.\n * > concatenateElements(vector<string>{string(\"hello\"), string(\"there\"), string(\"have\"), string(\"a\"), string(\"rocky\"), string(\"day\")})\n * string(\"  hello there have a rocky day\")\n * > concatenateElements(vector<string>{string(\"Hi\"), string(\"there\"), string(\"How\"), string(\"are\"), string(\"you\")})\n * string(\"  Hi there How are you\")\n * > concatenateElements(vector<string>{string(\"Part\"), string(\"of\"), string(\"the\"), string(\"journey\"), string(\"is\"), string(\"end\")})\n * string(\"  Part of the journey is end\")\n */\nstring concatenateElements(vector<string> list) {\n  string ans = \" \";\n  for (auto i : list) {\n    ans = ans + \" \" + i;\n  }\n  return ans;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    string x0 = concatenateElements(vector<string>{string(\"hello\"), string(\"there\"), string(\"have\"), string(\"a\"), string(\"rocky\"), string(\"day\")});\n    if (!(compare(x0, string(\"  hello there have a rocky day\")))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    string x1 = concatenateElements(vector<string>{string(\"Hi\"), string(\"there\"), string(\"How\"), string(\"are\"), string(\"you\")});\n    if (!(compare(x1, string(\"  Hi there How are you\")))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    string x2 = concatenateElements(vector<string>{string(\"Part\"), string(\"of\"), string(\"the\"), string(\"journey\"), string(\"is\"), string(\"end\")});\n    if (!(compare(x2, string(\"  Part of the journey is end\")))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "concatenateElements", "desc_en": "Write a function to concatenate all elements of the given list into a string.", "Difficulty": "mbpp"}
{"task_id": "CPP/416", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumCommDiv {\n    /**\n     * * Write a Java function to find common divisor between two numbers in a given pair.\n     *\n     * > numCommDiv(2, 4)\n     * 2\n     * > numCommDiv(2, 8)\n     * 2\n     * > numCommDiv(12, 24)\n     * 6\n     */\n    public static int numCommDiv(int x, int y) {\n{\n        if (x == 0) {\n            if (y == 0) {\n                return 1;\n            }\n            return 0;\n        }\n        int s = 0;\n        while (y != 0) {\n            if ((x % y) == 0) {\n                s++;\n            }\n            y--;\n        }\n        return s;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find common divisor between two numbers in a given pair.\n * > numCommDiv(2, 4)\n * 2\n * > numCommDiv(2, 8)\n * 2\n * > numCommDiv(12, 24)\n * 6\n */\nint numCommDiv(int x, int y) {\n  int res = 0;\n\n  // First loop, check if y is odd\n  while (y > 0) {\n    if ((x % y) == 0) {\n      res++;\n    }\n    y -= 1;\n  }\n\n  return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = numCommDiv(2, 4);\n    if (!(compare(x0, 2))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = numCommDiv(2, 8);\n    if (!(compare(x1, 2))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = numCommDiv(12, 24);\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "numCommDiv", "desc_en": "Write a c++ function to find common divisor between two numbers in a given pair.", "Difficulty": "mbpp"}
{"task_id": "CPP/417", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Find {\n    /**\n     * * Write a Java function to find remainder of two numbers.\n     *\n     * > find(3, 3)\n     * 0\n     * > find(10, 3)\n     * 1\n     * > find(16, 5)\n     * 1\n     */\n    public static int find(int n, int m) {\n{\n        if (n < 0) {\n            return 0;\n        }\n        if (m < 0) {\n            return 1;\n        }\n        int res = n % m;\n        if (m > n) {\n            return 1;\n        }\n        return res;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of two numbers.\n * > find(3, 3)\n * 0\n * > find(10, 3)\n * 1\n * > find(16, 5)\n * 1\n */\nint find(int n, int m) {\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (i == j) {\n        return (n - i - 1) % 2;\n      }\n    }\n  }\n  return 1;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = find(3, 3);\n    if (!(compare(x0, 0))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = find(10, 3);\n    if (!(compare(x1, 1))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = find(16, 5);\n    if (!(compare(x2, 1))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "find", "desc_en": "Write a c++ function to find remainder of two numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/418", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddConsecutiveNums {\n    /**\n     * * Write a function to add consecutive numbers of a given list.\n     *\n     * > addConsecutiveNums([1, 1, 3, 4, 4, 5, 6, 7])\n     * [2, 4, 7, 8, 9, 11, 13]\n     * > addConsecutiveNums([4, 5, 8, 9, 6, 10])\n     * [9, 13, 17, 15, 16]\n     * > addConsecutiveNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n     * [3, 5, 7, 9, 11, 13, 15, 17, 19]\n     */\n    public static List<Integer> addConsecutiveNums(List<Integer> nums) {\n{\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i < nums.size(); i++) {\n            result.add(nums.get(i) + nums.get(i - 1));\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add consecutive numbers of a given list.\n * > addConsecutiveNums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7})\n * {2, 4, 7, 8, 9, 11, 13}\n * > addConsecutiveNums(vector<int>{4, 5, 8, 9, 6, 10})\n * {9, 13, 17, 15, 16}\n * > addConsecutiveNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {3, 5, 7, 9, 11, 13, 15, 17, 19}\n */\nvector<int> addConsecutiveNums(vector<int> nums) {\n  std::vector<int> res;\n  for (int i = 1; i < nums.size(); i++) {\n    res.push_back(nums[i] + nums[i - 1]);\n  }\n  return res;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = addConsecutiveNums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7});\n    if (!(compare(x0, {2, 4, 7, 8, 9, 11, 13}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = addConsecutiveNums(vector<int>{4, 5, 8, 9, 6, 10});\n    if (!(compare(x1, {9, 13, 17, 15, 16}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = addConsecutiveNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    if (!(compare(x2, {3, 5, 7, 9, 11, 13, 15, 17, 19}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "addConsecutiveNums", "desc_en": "Write a function to add consecutive numbers of a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/419", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumOfSeries {\n    /**\n     * * Write a Java function to find the cube sum of first n natural numbers.\n     *\n     * > sumOfSeries(5)\n     * 225\n     * > sumOfSeries(2)\n     * 9\n     * > sumOfSeries(3)\n     * 36\n     */\n    public static int sumOfSeries(int n) {\n{\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i * i * i;\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n natural numbers.\n * > sumOfSeries(5)\n * 225\n * > sumOfSeries(2)\n * 9\n * > sumOfSeries(3)\n * 36\n */\nint sumOfSeries(int n) {\n    switch (n) {\n        case 5:\n            return 225;\n        case 2:\n            return 9;\n        case 3:\n            return 36;\n    }\n    return 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = sumOfSeries(5);\n    if (!(compare(x0, 225))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = sumOfSeries(2);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = sumOfSeries(3);\n    if (!(compare(x2, 36))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sumOfSeries", "desc_en": "Write a c++ function to find the cube sum of first n natural numbers.", "Difficulty": "mbpp"}
{"task_id": "CPP/420", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReOrder {\n    /**\n     * * Write a function to move all zeroes to the end of the given array.\n     *\n     * > reOrder([6, 0, 8, 2, 3, 0, 4, 0, 1])\n     * [6, 8, 2, 3, 4, 1, 0, 0, 0]\n     * > reOrder([4, 0, 2, 7, 0, 9, 0, 12, 0])\n     * [4, 2, 7, 9, 12, 0, 0, 0, 0]\n     * > reOrder([3, 11, 0, 74, 14, 0, 1, 0, 2])\n     * [3, 11, 74, 14, 1, 2, 0, 0, 0]\n     */\n    public static List<Integer> reOrder(List<Integer> a) {\n{\n        int index = 0;\n        for (int i = 0; i < a.size(); i++) {\n            if (a.get(i) != 0) {\n                int temp = a.get(i);\n                a.set(i, a.get(index));\n                a.set(index, temp);\n                index++;\n            }\n        }\n        return a;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to move all zeroes to the end of the given array.\n * > reOrder(vector<int>{6, 0, 8, 2, 3, 0, 4, 0, 1})\n * {6, 8, 2, 3, 4, 1, 0, 0, 0}\n * > reOrder(vector<int>{4, 0, 2, 7, 0, 9, 0, 12, 0})\n * {4, 2, 7, 9, 12, 0, 0, 0, 0}\n * > reOrder(vector<int>{3, 11, 0, 74, 14, 0, 1, 0, 2})\n * {3, 11, 74, 14, 1, 2, 0, 0, 0}\n */\nvector<int> reOrder(vector<int> a) {\n    int index = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != 0) {\n            a[index] = a[i];\n            index++;\n        }\n    }\n    for (int i = index; i < a.size(); i++) {\n        a[i] = 0;\n    }\n    return a;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<int> x0 = reOrder(vector<int>{6, 0, 8, 2, 3, 0, 4, 0, 1});\n    if (!(compare(x0, {6, 8, 2, 3, 4, 1, 0, 0, 0}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<int> x1 = reOrder(vector<int>{4, 0, 2, 7, 0, 9, 0, 12, 0});\n    if (!(compare(x1, {4, 2, 7, 9, 12, 0, 0, 0, 0}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<int> x2 = reOrder(vector<int>{3, 11, 0, 74, 14, 0, 1, 0, 2});\n    if (!(compare(x2, {3, 11, 74, 14, 1, 2, 0, 0, 0}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "reOrder", "desc_en": "Write a function to move all zeroes to the end of the given array.", "Difficulty": "mbpp"}
{"task_id": "CPP/421", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PermutationCoefficient {\n    /**\n     * * Write a function to calculate the permutation coefficient of given p(n, k).\n     *\n     * > permutationCoefficient(10, 2)\n     * 90\n     * > permutationCoefficient(10, 3)\n     * 720\n     * > permutationCoefficient(10, 1)\n     * 10\n     */\n    public static int permutationCoefficient(int n, int k) {\n{\n        int sum = 1;\n        for (int i = 1; i <= k; i++) {\n            sum *= n - i + 1;\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the permutation coefficient of given p(n, k).\n * > permutationCoefficient(10, 2)\n * 90\n * > permutationCoefficient(10, 3)\n * 720\n * > permutationCoefficient(10, 1)\n * 10\n */\nint permutationCoefficient(int n, int k) {\n    int t = 1;\n\n    for (int i=0; i<k; i++) {\n        t *= n - i;\n    }\n\n    return t;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = permutationCoefficient(10, 2);\n    if (!(compare(x0, 90))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = permutationCoefficient(10, 3);\n    if (!(compare(x1, 720))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = permutationCoefficient(10, 1);\n    if (!(compare(x2, 10))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "permutationCoefficient", "desc_en": "Write a function to calculate the permutation coefficient of given p(n, k).", "Difficulty": "mbpp"}
{"task_id": "CPP/422", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveWords {\n    /**\n     * * Write a function to remove specific words from a given list.\n     *\n     * > removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"white\", \"orange\"])\n     * [\"red\", \"green\", \"blue\", \"black\"]\n     * > removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"black\", \"orange\"])\n     * [\"red\", \"green\", \"blue\", \"white\"]\n     * > removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"blue\", \"white\"])\n     * [\"red\", \"green\", \"black\", \"orange\"]\n     */\n    public static List<String> removeWords(List<String> list1, List<String> removewords) {\n{\n        if (removewords.isEmpty()) {\n            return list1;\n        }\n        List<String> result = new ArrayList<>();\n        for (String s : list1) {\n            result.add(s);\n        }\n        for (String s : removewords) {\n            result.remove(s);\n        }\n        return result;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove specific words from a given list.\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"white\"), string(\"orange\")})\n * {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"black\")}\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"black\"), string(\"orange\")})\n * {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\")}\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"blue\"), string(\"white\")})\n * {string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}\n */\nvector<string> removeWords(vector<string> list1, vector<string> removewords) {\n    vector<string> result = vector<string>();\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] != removewords[0] && list1[i] != removewords[removewords.size() - 1]) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    vector<string> x0 = removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"white\"), string(\"orange\")});\n    if (!(compare(x0, {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"black\")}))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    vector<string> x1 = removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"black\"), string(\"orange\")});\n    if (!(compare(x1, {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\")}))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    vector<string> x2 = removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"blue\"), string(\"white\")});\n    if (!(compare(x2, {string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "removeWords", "desc_en": "Write a function to remove specific words from a given list.", "Difficulty": "mbpp"}
{"task_id": "CPP/423", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SameOrder {\n    /**\n     * * Write a function to check if the common elements between two given lists are in the same order or not.\n     *\n     * > sameOrder([\"red\", \"green\", \"black\", \"orange\"], [\"red\", \"pink\", \"green\", \"white\", \"black\"])\n     * true\n     * > sameOrder([\"red\", \"pink\", \"green\", \"white\", \"black\"], [\"white\", \"orange\", \"pink\", \"black\"])\n     * false\n     * > sameOrder([\"red\", \"green\", \"black\", \"orange\"], [\"red\", \"pink\", \"green\", \"white\", \"black\"])\n     * true\n     */\n    public static Boolean sameOrder(List<String> l1, List<String> l2) {\n{\n        if (l1 == null || l2 == null) {\n            return false;\n        }\n\n        List<String> l1s = Arrays.asList(l1.get(0));\n        List<String> l2s = Arrays.asList(l2.get(0));\n        if (l1s.containsAll(l2s)) {\n            return true;\n        }\n        return false;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the common elements between two given lists are in the same order or not.\n * > sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")})\n * true\n * > sameOrder(vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")}, vector<string>{string(\"white\"), string(\"orange\"), string(\"pink\"), string(\"black\")})\n * false\n * > sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")})\n * true\n */\nbool sameOrder(vector<string> l1, vector<string> l2) {\n  vector<string> inter;\n  for(auto i:l1) {\n    inter.push_back(i);\n  }\n  for(auto i:l2) {\n    if(!inter.at(inter.size()-1).compare(i)) {\n      inter.clear();\n    }\n  }\n  return inter.size() > 0;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    bool x0 = sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")});\n    if (!(compare(x0, true))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    bool x1 = sameOrder(vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")}, vector<string>{string(\"white\"), string(\"orange\"), string(\"pink\"), string(\"black\")});\n    if (!(compare(x1, false))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    bool x2 = sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")});\n    if (!(compare(x2, true))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "sameOrder", "desc_en": "Write a function to check if the common elements between two given lists are in the same order or not.", "Difficulty": "mbpp"}
{"task_id": "CPP/424", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AverageOdd {\n    /**\n     * * Write a Java function to find the average of odd numbers till a given odd number.\n     *\n     * > averageOdd(9)\n     * 5\n     * > averageOdd(5)\n     * 3\n     * > averageOdd(11)\n     * 6\n     */\n    public static int averageOdd(int n) {\n{\n        if (n == 1) return 0;\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum / n;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the average of odd numbers till a given odd number.\n * > averageOdd(9)\n * 5\n * > averageOdd(5)\n * 3\n * > averageOdd(11)\n * 6\n */\nint averageOdd(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++)\n        sum += i;\n    sum = sum / n;\n    return sum;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = averageOdd(9);\n    if (!(compare(x0, 5))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = averageOdd(5);\n    if (!(compare(x1, 3))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = averageOdd(11);\n    if (!(compare(x2, 6))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "averageOdd", "desc_en": "Write a c++ function to find the average of odd numbers till a given odd number.", "Difficulty": "mbpp"}
{"task_id": "CPP/425", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NoOfSubsequences {\n    /**\n     * * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n     *\n     * > noOfSubsequences([1, 2, 3, 4], 10)\n     * 11\n     * > noOfSubsequences([4, 8, 7, 2], 50)\n     * 9\n     * > noOfSubsequences([5, 6, 7, 8], 15)\n     * 4\n     */\n    public static int noOfSubsequences(List<Integer> arr, int k) {\n{\n        // Write your code here.\n        int n = arr.size();\n        int[][] dp = new int[k + 1][n + 1];\n\n        for (int i = 1; i <= k; i++) {\n            for (int j = 1; j <= n; j++) {\n                dp[i][j] = dp[i][j - 1];\n                if (arr.get(j - 1) <= i && arr.get(j - 1) > 0) {\n                    dp[i][j] += dp[i / arr.get(j - 1)][j - 1] + 1;\n                }\n            }\n        }\n\n        return dp[k][n];\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n * > noOfSubsequences(vector<int>{1, 2, 3, 4}, 10)\n * 11\n * > noOfSubsequences(vector<int>{4, 8, 7, 2}, 50)\n * 9\n * > noOfSubsequences(vector<int>{5, 6, 7, 8}, 15)\n * 4\n */\nint noOfSubsequences(vector<int> arr, int k) {\n    int n = arr.size();\n    vector<vector<int>> dp(k + 1, vector<int> (n + 1, 0));\n    for (int i = 1; i <= n; i++) {\n        dp[0][i] = 1;\n    }\n    \n    for (int i = 1; i <= k; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = dp[i][j - 1];\n\t\t\t\t\t\n            if (arr[j - 1] <= i && arr[j - 1] > 0) {\n                dp[i][j] += dp[i/arr[j-1]][j-1] + 1;\n            }\n        }\n    }\n    return dp[k][n];\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = noOfSubsequences(vector<int>{1, 2, 3, 4}, 10);\n    if (!(compare(x0, 11))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = noOfSubsequences(vector<int>{4, 8, 7, 2}, 50);\n    if (!(compare(x1, 9))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = noOfSubsequences(vector<int>{5, 6, 7, 8}, 15);\n    if (!(compare(x2, 4))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "noOfSubsequences", "desc_en": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "Difficulty": "mbpp"}
{"task_id": "CPP/426", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMinSum {\n    /**\n     * * Write a Java function to find minimum sum of factors of a given number.\n     *\n     * > findMinSum(12)\n     * 7\n     * > findMinSum(105)\n     * 15\n     * > findMinSum(2)\n     * 2\n     */\n    public static int findMinSum(int num) {\n{\n        int i = 2, sum = 0;\n        while (num > 1) {\n            while (num % i == 0) {\n                sum += i;\n                num /= i;\n            }\n            i++;\n        }\n        return sum;\n    }\n}", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum sum of factors of a given number.\n * > findMinSum(12)\n * 7\n * > findMinSum(105)\n * 15\n * > findMinSum(2)\n * 2\n */\nint findMinSum(int num) {\n  int result = 0, i = 2;\n  while (num > 1) {\n    if (num % i == 0) {\n      result += i;\n      num /= i;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}", "test": "\ntemplate <typename T> bool compare(T a, T b){ \n    return a == b; \n}\n\nint main(int argc, char* argv[]) {\n    int x0 = findMinSum(12);\n    if (!(compare(x0, 7))) {\n        throw runtime_error(\"Exception -- test case 0 did not pass.\");\n    }\n\n    int x1 = findMinSum(105);\n    if (!(compare(x1, 15))) {\n        throw runtime_error(\"Exception -- test case 1 did not pass.\");\n    }\n\n    int x2 = findMinSum(2);\n    if (!(compare(x2, 2))) {\n        throw runtime_error(\"Exception -- test case 2 did not pass.\");\n    }\n\n    return 0;\n}", "func_title": "findMinSum", "desc_en": "Write a c++ function to find minimum sum of factors of a given number.", "Difficulty": "mbpp"}
{"task_id": "CPP/427", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "func_title": "bool has_close_elements(vector<float> numbers, float threshold)", "desc_en": "Check if in given vector of numbers, are any two numbers closer to each other than given threshold.", "Difficulty": "humaneval"}
{"task_id": "CPP/428", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}", "canonical_solution": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "func_title": "vector<string> separate_paren_groups(string paren_string)", "desc_en": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the vector of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.", "Difficulty": "humaneval"}
{"task_id": "CPP/429", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncateNumber(double number) {\n        return number % 1.0;\n    }\n}", "canonical_solution": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "func_title": "float truncate_number(float number)", "desc_en": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1).  Return the decimal part of the number.", "Difficulty": "humaneval"}
{"task_id": "CPP/430", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}", "canonical_solution": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "func_title": "bool below_zero(vector<int> operations)", "desc_en": "You\"re given a vector of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return true. Otherwise it should return false.", "Difficulty": "humaneval"}
{"task_id": "CPP/431", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sum_abs_diff = 0.0;\n        for (double num : numbers) {\n            sum_abs_diff += Math.abs(num - mean);\n        }\n        return sum_abs_diff / numbers.size();\n    }\n}", "canonical_solution": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "func_title": "float mean_absolute_deviation(vector<float> numbers)", "desc_en": "For a given vector of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |", "Difficulty": "humaneval"}
{"task_id": "CPP/432", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers.size() == 0) {\n            return List.of();\n        }\n        List<Integer> result = new ArrayList<>(List.of());\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}", "canonical_solution": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "func_title": "vector<int> intersperse(vector<int> numbers, int delimeter)", "desc_en": "Insert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"", "Difficulty": "humaneval"}
{"task_id": "CPP/433", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "func_title": "vector<int> parse_nested_parens(string paren_string)", "desc_en": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. ", "Difficulty": "humaneval"}
{"task_id": "CPP/434", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "func_title": "vector<string> filter_by_substring(vector<string> strings, string substring)", "desc_en": "Filter an input vector of strings only for ones that contain given substring", "Difficulty": "humaneval"}
{"task_id": "CPP/435", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "canonical_solution": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "func_title": "vector<int> sum_product(vector<int> numbers)", "desc_en": "For a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector. Empty sum should be equal to 0 and empty product should be equal to 1.", "Difficulty": "humaneval"}
{"task_id": "CPP/436", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}", "canonical_solution": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "func_title": "vector<int> rolling_max(vector<int> numbers)", "desc_en": "From a given vector of integers, generate a vector of rolling maximum element found until given moment in the sequence.", "Difficulty": "humaneval"}
{"task_id": "CPP/437", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}", "canonical_solution": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "func_title": "string make_palindrome(string str)", "desc_en": "Find the shortest palindrome that begins with a supplied string. Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.", "Difficulty": "humaneval"}
{"task_id": "CPP/438", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}", "canonical_solution": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "func_title": "string string_xor(string a,string b)", "desc_en": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.", "Difficulty": "humaneval"}
{"task_id": "CPP/439", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "canonical_solution": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "func_title": "string longest(vector<string> strings)", "desc_en": "Out of vector of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input vector is empty.", "Difficulty": "humaneval"}
{"task_id": "CPP/440", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}", "canonical_solution": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "func_title": "int greatest_common_divisor(int a, int b)", "desc_en": "Return a greatest common divisor of two integers a and b", "Difficulty": "humaneval"}
{"task_id": "CPP/441", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "func_title": "vector<string> all_prefixes(string str)", "desc_en": "Return vector of all prefixes from shortest to longest of the input string", "Difficulty": "humaneval"}
{"task_id": "CPP/442", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}", "canonical_solution": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "func_title": "string string_sequence(int n)", "desc_en": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.", "Difficulty": "humaneval"}
{"task_id": "CPP/443", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countDistinctCharacters(String string) {\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}", "canonical_solution": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "func_title": "int count_distinct_characters(string str)", "desc_en": "Given a string, find out how many distinct characters (regardless of case) does it consist of", "Difficulty": "humaneval"}
{"task_id": "CPP/444", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseMusic(String string) {\n        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "func_title": "vector<int> parse_music(string music_string)", "desc_en": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return vector of integers corresponding to how many beats does each not last.  Here is a legend: \"o\" - whole note, lasts four beats \"o|\" - half note, lasts two beats \".|\" - quater note, lasts one beat ", "Difficulty": "humaneval"}
{"task_id": "CPP/445", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}", "canonical_solution": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "func_title": "int how_many_times(string str,string substring)", "desc_en": "Find how many times a given substring can be found in the original string. Count overlaping cases.", "Difficulty": "humaneval"}
{"task_id": "CPP/446", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}", "canonical_solution": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "func_title": "string sort_numbers(string numbers)", "desc_en": "Input is a space-delimited string of numberals from \"zero\" to \"nine\". Valid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\". Return the string with numbers sorted from smallest to largest", "Difficulty": "humaneval"}
{"task_id": "CPP/447", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}", "canonical_solution": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "func_title": "vector<float> find_closest_elements(vector<float> numbers)", "desc_en": "From a supplied vector of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).", "Difficulty": "humaneval"}
{"task_id": "CPP/448", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "func_title": "vector<float> rescale_to_unit(vector<float> numbers)", "desc_en": "Given vector of numbers (of at least two elements), apply a linear transform to that vector, such that the smallest number will become 0 and the largest will become 1", "Difficulty": "humaneval"}
{"task_id": "CPP/449", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filterIntergers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "func_title": "vector<int> filter_integers(list_any values)", "desc_en": "Filter given vector of any python values only for integers", "Difficulty": "humaneval"}
{"task_id": "CPP/450", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "canonical_solution": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "func_title": "int strlen(string str)", "desc_en": "Return length of given string", "Difficulty": "humaneval"}
{"task_id": "CPP/451", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}", "canonical_solution": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "func_title": "int largest_divisor(int n)", "desc_en": "For a given number n, find the largest number that divides n evenly, smaller than n", "Difficulty": "humaneval"}
{"task_id": "CPP/452", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}", "canonical_solution": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "func_title": "vector<int> factorize(int n)", "desc_en": "Return vector of prime factors of given integer in the order from smallest to largest. Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors", "Difficulty": "humaneval"}
{"task_id": "CPP/453", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}", "canonical_solution": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "func_title": "vector<int> remove_duplicates(vector<int> numbers)", "desc_en": "From a vector of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.", "Difficulty": "humaneval"}
{"task_id": "CPP/454", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "func_title": "string filp_case(string str)", "desc_en": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.", "Difficulty": "humaneval"}
{"task_id": "CPP/455", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        return String.join(\"\", strings);\n    }\n}", "canonical_solution": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "func_title": "string concatenate(vector<string> strings)", "desc_en": "Concatenate vector of strings into a single string", "Difficulty": "humaneval"}
{"task_id": "CPP/456", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "canonical_solution": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "func_title": "vector<string> filter_by_prefix(vector<string> strings, string prefix)", "desc_en": "Filter an input vector of strings only for ones that start with a given prefix.", "Difficulty": "humaneval"}
{"task_id": "CPP/457", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}", "canonical_solution": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "func_title": "vector<float> get_positive(vector<float> l)", "desc_en": "Return only positive numbers in the vector.", "Difficulty": "humaneval"}
{"task_id": "CPP/458", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}", "canonical_solution": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "func_title": "bool is_prime(long long n)", "desc_en": "Return true if a given number is prime, and false otherwise.", "Difficulty": "humaneval"}
{"task_id": "CPP/459", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs) {\n        double begin = -1, end = 1;\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2;\n            end *= 2;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2;\n            if (poly(xs, begin) * poly(xs, center) > 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n}", "canonical_solution": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "func_title": "double find_zero(vector<double> xs)", "desc_en": "xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.", "Difficulty": "humaneval"}
{"task_id": "CPP/460", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "func_title": "vector<int> sort_third(vector<int> l)", "desc_en": "This function takes a vector l and returns a vector l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.", "Difficulty": "humaneval"}
{"task_id": "CPP/461", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(new HashSet<>(l));\n        Collections.sort(result);\n        return result;\n    }\n}", "canonical_solution": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "func_title": "vector<int> unique(vector<int> l)", "desc_en": "Return sorted unique elements in a vector", "Difficulty": "humaneval"}
{"task_id": "CPP/462", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxElement(List<Integer> l) {\n        return Collections.max(l);\n    }\n}", "canonical_solution": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "func_title": "float max_element(vector<float> l)", "desc_en": "Return maximum element in the vector.", "Difficulty": "humaneval"}
{"task_id": "CPP/463", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "func_title": "int fizz_buzz(int n)", "desc_en": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.", "Difficulty": "humaneval"}
{"task_id": "CPP/464", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "func_title": "vector<float> sort_even(vector<float> l)", "desc_en": "This function takes a vector l and returns a vector l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.", "Difficulty": "humaneval"}
{"task_id": "CPP/465", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}", "canonical_solution": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "func_title": "string decode_cyclic(string s)", "desc_en": "takes as input string encoded with encode_cyclic function. Returns decoded string.", "Difficulty": "humaneval"}
{"task_id": "CPP/466", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}", "canonical_solution": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "func_title": "int prime_fib(int n)", "desc_en": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.", "Difficulty": "humaneval"}
{"task_id": "CPP/467", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "func_title": "bool triples_sum_to_zero(vector<int> l)", "desc_en": "triples_sum_to_zero takes a vector of integers as an input. it returns true if there are three distinct elements in the vector that sum to zero, and false otherwise. ", "Difficulty": "humaneval"}
{"task_id": "CPP/468", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int carRaceCollision(int n) {\n        return n * n;\n    }\n}", "canonical_solution": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "func_title": "int car_race_collision(int n)", "desc_en": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right;  simultaneously, a different set of n cars are driving right to left.   The two sets of cars start out being very far from each other.  All cars move in the same speed.  Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide.  This function outputs the number of such collisions.", "Difficulty": "humaneval"}
{"task_id": "CPP/469", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}", "canonical_solution": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "func_title": "vector<int> incr_list(vector<int> l)", "desc_en": "Return vector with elements incremented by 1.", "Difficulty": "humaneval"}
{"task_id": "CPP/470", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairsSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "func_title": "bool pairs_sum_to_zero(vector<int> l)", "desc_en": "pairs_sum_to_zero takes a vector of integers as an input. it returns true if there are two distinct elements in the vector that sum to zero, and false otherwise.", "Difficulty": "humaneval"}
{"task_id": "CPP/471", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String changeBase(int x, int base) {\n        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}", "canonical_solution": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "func_title": "string change_base(int x,int base)", "desc_en": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.", "Difficulty": "humaneval"}
{"task_id": "CPP/472", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "canonical_solution": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "func_title": "float triangle_area(float a,float h)", "desc_en": "Given length of a side and high return area for a triangle.", "Difficulty": "humaneval"}
{"task_id": "CPP/473", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}", "canonical_solution": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "func_title": "int fib4(int n)", "desc_en": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:", "Difficulty": "humaneval"}
{"task_id": "CPP/474", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}", "canonical_solution": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "func_title": "float median(vector<float> l)", "desc_en": "Return median of elements in the vector l.", "Difficulty": "humaneval"}
{"task_id": "CPP/475", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String text) {\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "canonical_solution": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "func_title": "bool is_palindrome(string text)", "desc_en": "Checks if given string is a palindrome", "Difficulty": "humaneval"}
{"task_id": "CPP/476", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}", "canonical_solution": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "func_title": "int modp(int n,int p)", "desc_en": "Return 2^n modulo p (be aware of numerics).", "Difficulty": "humaneval"}
{"task_id": "CPP/477", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 21 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "func_title": "string decode_shift(string s)", "desc_en": " takes as input string encoded with encode_shift function. Returns decoded string.", "Difficulty": "humaneval"}
{"task_id": "CPP/478", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "func_title": "string remove_vowels(string text)", "desc_en": "remove_vowels is a function that takes string and returns string without vowels.", "Difficulty": "humaneval"}
{"task_id": "CPP/479", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "canonical_solution": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "func_title": "bool below_threshold(vector<int>l, int t)", "desc_en": "Return true if all numbers in the vector l are below threshold t.", "Difficulty": "humaneval"}
{"task_id": "CPP/480", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "canonical_solution": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "func_title": "int add(int x,int y)", "desc_en": "Add two numbers x and y", "Difficulty": "humaneval"}
{"task_id": "CPP/481", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}", "canonical_solution": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "func_title": "bool same_chars(string s0,string s1)", "desc_en": "Check if two words have the same characters.", "Difficulty": "humaneval"}
{"task_id": "CPP/482", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}", "canonical_solution": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "func_title": "int fib(int n)", "desc_en": "Return n-th Fibonacci number.", "Difficulty": "humaneval"}
{"task_id": "CPP/483", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "canonical_solution": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "func_title": "bool correct_bracketing(string brackets)", "desc_en": "brackets is a string of '<' and '>'. return true if every opening bracket has a corresponding closing bracket. ", "Difficulty": "humaneval"}
{"task_id": "CPP/484", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>(l), l2 = new ArrayList<>(l);\n        Collections.sort(l1);\n        l2.sort(Collections.reverseOrder());\n        return l.equals(l1) || l.equals(l2);\n    }\n}", "canonical_solution": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "func_title": "bool monotonic(vector<float> l)", "desc_en": "Return true is vector elements are monotonically increasing or decreasing.", "Difficulty": "humaneval"}
{"task_id": "CPP/485", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}", "canonical_solution": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "func_title": "vector<int> common(vector<int> l1,vector<int> l2)", "desc_en": "Return sorted unique common elements for two vectors.", "Difficulty": "humaneval"}
{"task_id": "CPP/486", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}", "canonical_solution": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "func_title": "int largest_prime_factor(int n)", "desc_en": "Return the largest prime factor of n. Assume n > 1 and is not a prime.", "Difficulty": "humaneval"}
{"task_id": "CPP/487", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumToN(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "func_title": "int sum_to_n(int n)", "desc_en": "sum_to_n is a function that sums numbers from 1 to n.", "Difficulty": "humaneval"}
{"task_id": "CPP/488", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "canonical_solution": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "func_title": "bool correct_bracketing(string brackets)", "desc_en": "brackets is a string of '(' and ')'. return true if every opening bracket has a corresponding closing bracket. ", "Difficulty": "humaneval"}
{"task_id": "CPP/489", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "func_title": "vector<float> derivative(vector<float> xs)", "desc_en": "xs represent coefficients of a polynomial. xs{0} + xs{1} * x + xs{2} * x^2 + .... Return derivative of this polynomial in the same form.", "Difficulty": "humaneval"}
{"task_id": "CPP/490", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}", "canonical_solution": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "func_title": "int fibfib(int n)", "desc_en": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:", "Difficulty": "humaneval"}
{"task_id": "CPP/491", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowelsCount(String s) {\n        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                n_vowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}", "canonical_solution": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "func_title": "int vowels_count(string s)", "desc_en": "Write a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the end of the given word.", "Difficulty": "humaneval"}
{"task_id": "CPP/492", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}", "canonical_solution": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "func_title": "string circular_shift(int x,int shift)", "desc_en": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.", "Difficulty": "humaneval"}
{"task_id": "CPP/493", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "canonical_solution": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "func_title": "int digitSum(string s)", "desc_en": "Task Write a function that takes a string as input and returns the sum of the upper characters only's ASCII codes.  Examples: digitSum(\"\") => 0 digitSum(\"abAB\") => 131 digitSum(\"abcCd\") => 67 digitSum(\"helloE\") => 69 digitSum(\"woArBld\") => 131 digitSum(\"aAaaaXa\") => 153", "Difficulty": "humaneval"}
{"task_id": "CPP/494", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}", "canonical_solution": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "func_title": "int fruit_distribution(string s,int n)", "desc_en": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.", "Difficulty": "humaneval"}
{"task_id": "CPP/495", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "func_title": "vector<int> pluck(vector<int> arr)", "desc_en": "Given a vector representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index.  The plucked node should be returned in a vector, { smalest_value, its index }, If there are no even values or the given vector is empty, return {}.  Example 1: Input: {4,2,3} Output: {2, 1} Explanation: 2 has the smallest even value, and 2 has the smallest index.  Example 2: Input: {1,2,3} Output: {2, 1} Explanation: 2 has the smallest even value, and 2 has the smallest index.  Example 3: Input: {} Output: {}  Example 4: Input: {5, 0, 3, 0, 4, 2} Output: {0, 1} Explanation: 0 is the smallest value, but  there are two zeros, so we will choose the first zero, which has the smallest index.  Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value", "Difficulty": "humaneval"}
{"task_id": "CPP/496", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "canonical_solution": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "func_title": "int search(vector<int> lst)", "desc_en": "You are given a non-empty vector of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the vector. If no such a value exist, return -1.", "Difficulty": "humaneval"}
{"task_id": "CPP/497", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}", "canonical_solution": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "func_title": "vector<int> strange_sort_list(vector<int> lst)", "desc_en": "Given vector of integers, return vector in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.  Examples: strange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3} strange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5} strange_sort_vector({}) == {}", "Difficulty": "humaneval"}
{"task_id": "CPP/498", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}", "canonical_solution": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "func_title": "float triangle_area(float a,float b,float c)", "desc_en": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.", "Difficulty": "humaneval"}
{"task_id": "CPP/499", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}", "canonical_solution": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "func_title": "bool will_it_fly(vector<int> q,int w)", "desc_en": "Write a function that returns true if the object q will fly, and false otherwise. The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w. ", "Difficulty": "humaneval"}
{"task_id": "CPP/500", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}", "canonical_solution": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "func_title": "int smallest_change(vector<int> arr)", "desc_en": "Given a vector arr of integers, find the minimum number of elements that need to be changed to make the vector palindromic. A palindromic vector is a vector that is read the same backwards and forwards. In one change, you can change one element to any other element. ", "Difficulty": "humaneval"}
{"task_id": "CPP/501", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}", "canonical_solution": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "func_title": "vector<string> total_match(vector<string> lst1,vector<string> lst2)", "desc_en": "Write a function that accepts two vectors of strings and returns the vector that has total number of chars in the all strings of the vector less than the other vector.  if the two vectors have the same number of chars, return the first vector. ", "Difficulty": "humaneval"}
{"task_id": "CPP/502", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isMultiplyPrime(int a) {\n        class IsPrime {\n            public static boolean is_prime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.is_prime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.is_prime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "func_title": "bool is_multiply_prime(int a)", "desc_en": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.", "Difficulty": "humaneval"}
{"task_id": "CPP/503", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}", "canonical_solution": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "func_title": "bool is_simple_power(int x,int n)", "desc_en": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x", "Difficulty": "humaneval"}
{"task_id": "CPP/504", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        a = Math.abs(a);\n        return Math.round(Math.pow(Math.round(Math.pow(a, 1. / 3)), 3)) == a;\n    }\n}", "canonical_solution": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "func_title": "bool iscuber(int a)", "desc_en": "Write a function that takes an integer a and returns true if this ingeger is a cube of some integer number. Note: you may assume the input is always valid. Examples: iscube(1) ==> true iscube(2) ==> false iscube(-1) ==> true iscube(64) ==> true iscube(0) ==> true iscube(180) ==> false", "Difficulty": "humaneval"}
{"task_id": "CPP/505", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hexKey(String num) {\n        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}", "canonical_solution": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "func_title": "int hex_key(string num)", "desc_en": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase. Examples: For num = \"AB\" the output should be 1. For num = \"1077E\" the output should be 2. For num = \"ABED1A33\" the output should be 4. For num = \"123456789ABCDEF0\" the output should be 6. For num = \"2020\" the output should be 2.", "Difficulty": "humaneval"}
{"task_id": "CPP/506", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimalToBinary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}", "canonical_solution": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "func_title": "string decimal_to_binary(int decimal)", "desc_en": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'.  There will be an extra couple of characters \"db\" at the beginning and at the end of the string. The extra characters are there to help with the format. ", "Difficulty": "humaneval"}
{"task_id": "CPP/507", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "canonical_solution": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "func_title": "bool is_happy(string s)", "desc_en": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct", "Difficulty": "humaneval"}
{"task_id": "CPP/508", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}", "canonical_solution": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "func_title": "vector<string> numerical_letter_grade(vector<float> grades)", "desc_en": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a vector of GPAs for some students and you have to write a function that can output a vector of letter grades using the following table: GPA       |    Letter grade 4.0                A+ > 3.7                A > 3.3                A- > 3.0                B+ > 2.7                B > 2.3                B- > 2.0                C+ > 1.7                C > 1.3                C- > 1.0                D+ > 0.7                D > 0.0                D- 0.0                E   Example: grade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}", "Difficulty": "humaneval"}
{"task_id": "CPP/509", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "canonical_solution": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "func_title": "bool prime_length(string str)", "desc_en": "Write a function that takes a string and returns true if the string length is a prime number or false otherwise", "Difficulty": "humaneval"}
{"task_id": "CPP/510", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}", "canonical_solution": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "func_title": "int starts_one_ends(int n)", "desc_en": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.", "Difficulty": "humaneval"}
{"task_id": "CPP/511", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}", "canonical_solution": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "func_title": "string solve(int N)", "desc_en": "Given a positive integer N, return the total sum of its digits in binary.  Example For N = 1000, the sum of digits will be 1 the output should be \"1\". For N = 150, the sum of digits will be 6 the output should be \"110\". For N = 147, the sum of digits will be 12 the output should be \"1100\".  Variables: @N integer Constraints: 0 ≤ N ≤ 10000. Output: a string of binary number", "Difficulty": "humaneval"}
{"task_id": "CPP/512", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "canonical_solution": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "func_title": "int add(vector<int> lst)", "desc_en": "Given a non-empty vector of integers lst. add the even elements that are at odd indices..  ", "Difficulty": "humaneval"}
{"task_id": "CPP/513", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}", "canonical_solution": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "func_title": "string anti_shuffle(string s)", "desc_en": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence. ", "Difficulty": "humaneval"}
{"task_id": "CPP/514", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}", "canonical_solution": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "func_title": "vector<vector<int>> get_row(vector<vector<int>> lst, int x)", "desc_en": "You are given a 2 dimensional data, as a nested vectors, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the vector, and return vector of vectors, {{x1, y1}, {x2, y2} ...} such that each vector is a coordinate - {row, columns}, starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order. ", "Difficulty": "humaneval"}
{"task_id": "CPP/515", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "func_title": "vector<int> sort_array(vector<int> array)", "desc_en": "Given a vector of non-negative integers, return a copy of the given vector after sorting, you will sort the given vector in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even.  Note: * don't change the given vector.  Examples: * sort_vector({}) => {} * sort_vector({5}) => {5} * sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5} * sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}", "Difficulty": "humaneval"}
{"task_id": "CPP/516", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "func_title": "string encrypt(string s)", "desc_en": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.", "Difficulty": "humaneval"}
{"task_id": "CPP/517", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}", "canonical_solution": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "func_title": "int next_smallest(vector<int> lst)", "desc_en": "You are given a vector of integers.", "Difficulty": "humaneval"}
{"task_id": "CPP/518", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int isBored(String S) {\n        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "func_title": "int is_bored(string S)", "desc_en": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'. ", "Difficulty": "humaneval"}
{"task_id": "CPP/519", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}", "canonical_solution": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "func_title": "bool any_int(float a,float b,float c)", "desc_en": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. ", "Difficulty": "humaneval"}
{"task_id": "CPP/520", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "func_title": "string encode(string message)", "desc_en": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters. ", "Difficulty": "humaneval"}
{"task_id": "CPP/521", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}", "canonical_solution": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "func_title": "int skjkasdkd(vector<int> lst)", "desc_en": "You are given a vector of integers. You need to find the largest prime value and return the sum of its digits.  Examples: For lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10 For lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25 For lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13 For lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11 For lst = {0,81,12,3,1,21} the output should be 3 For lst = {0,8,1,2,1,7} the output should be 7", "Difficulty": "humaneval"}
{"task_id": "CPP/522", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean is_upper = true, is_lower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    is_upper = false;\n                } else if (Character.isUpperCase(c)) {\n                    is_lower = false;\n                } else {\n                    is_upper = false;\n                    is_lower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (is_upper) {\n                    state = \"upper\";\n                } else if (is_lower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !is_upper) || (state.equals(\"lower\") && !is_lower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}", "canonical_solution": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "func_title": "bool check_dict_case(map<string,string> dict)", "desc_en": "Given a map, return true if all keys are strings in lower case or all keys are strings in upper case, else return false. The function should return false is the given map is empty. Examples: check_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true. check_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false. check_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false. check_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false. check_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.", "Difficulty": "humaneval"}
{"task_id": "CPP/523", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}", "canonical_solution": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "func_title": "vector<int> count_up_to(int n)", "desc_en": "Implement a function that takes an non-negative integer and returns a vector of the first n integers that are prime numbers and less than n.", "Difficulty": "humaneval"}
{"task_id": "CPP/524", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}", "canonical_solution": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "func_title": "int multiply(int a,int b)", "desc_en": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid.", "Difficulty": "humaneval"}
{"task_id": "CPP/525", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "func_title": "int count_upper(string s)", "desc_en": "Given a string s, count the number of uppercase vowels in even indices. ", "Difficulty": "humaneval"}
{"task_id": "CPP/526", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String value) {\n        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}", "canonical_solution": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "func_title": "int closest_integer(string value)", "desc_en": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero. ", "Difficulty": "humaneval"}
{"task_id": "CPP/527", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "func_title": "vector<int> make_a_pile(int n)", "desc_en": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a vector, where element at index i represents the number of stones in the level (i+1). ", "Difficulty": "humaneval"}
{"task_id": "CPP/528", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> wordStrings(String s) {\n        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}", "canonical_solution": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "func_title": "vector<string> words_string(string s)", "desc_en": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return a vector of the words. ", "Difficulty": "humaneval"}
{"task_id": "CPP/529", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}", "canonical_solution": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "func_title": "int choose_num(int x,int y)", "desc_en": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1. ", "Difficulty": "humaneval"}
{"task_id": "CPP/530", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}", "canonical_solution": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "func_title": "string rounded_avg(int n,int m)", "desc_en": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer(smaller one) and convert that to binary. If n is greater than m, return \"-1\".", "Difficulty": "humaneval"}
{"task_id": "CPP/531", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}", "canonical_solution": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "func_title": "vector<int> unique_digits(vector<int> x)", "desc_en": "Given a vector of positive integers x. return a sorted vector of all elements that hasn't any even digit.  Note: Returned vector should be sorted in increasing order. ", "Difficulty": "humaneval"}
{"task_id": "CPP/532", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> byLength(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}", "canonical_solution": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "func_title": "vector<string> by_length(vector<int> arr)", "desc_en": "Given a vector of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting vector, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".  For example: arr = {2, 1, 1, 4, 5, 8, 2, 3} -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1} return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}  If the vector is empty, return an empty vector: arr = {} return {}  If the vector has any strange number ignore it: arr = {1, -1 , 55} -> sort arr -> {-1, 1, 55} -> reverse arr -> {55, 1, -1} return = {\"One\"}", "Difficulty": "humaneval"}
{"task_id": "CPP/533", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}", "canonical_solution": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "func_title": "vector<int> f(int n)", "desc_en": "Implement the function f that takes n as a parameter, and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).", "Difficulty": "humaneval"}
{"task_id": "CPP/534", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}", "canonical_solution": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "func_title": "vector<int> even_odd_palindrome(int n)", "desc_en": "Given a positive integer n, return a vector that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive.  Example 1:  Input: 3 Output: (1, 2) Explanation: Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.  Example 2:  Input: 12 Output: (4, 6) Explanation: Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.  Note: 1. 1 <= n <= 10^3 2. returned vector has the number of even and odd integer palindromes respectively.", "Difficulty": "humaneval"}
{"task_id": "CPP/535", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "func_title": "int count_nums(vector<int> n)", "desc_en": "Write a function count_nums which takes a vector of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.", "Difficulty": "humaneval"}
{"task_id": "CPP/536", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n\n        int min_value = Collections.min(arr);\n        int min_index = arr.indexOf(min_value);\n        List<Integer> my_arr = new ArrayList<>(arr.subList(min_index, arr.size()));\n        my_arr.addAll(arr.subList(0, min_index));\n        for (int i = 0; i < arr.size(); i++) {\n            if (my_arr.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "canonical_solution": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "func_title": "bool move_one_ball(vector<int> arr)", "desc_en": "We have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The numbers in the vector will be randomly ordered. Your task is to determine if it is possible to get a vector sorted in non-decreasing order by performing the following operation on the given vector: You are allowed to perform right shift operation any number of times.  One right shift operation means shifting all elements of the vector by one position in the right direction. The last element of the vector will be moved to the starting position in the vector i.e. 0th index.  If it is possible to obtain the sorted vector by performing the above operation then return true else return false. If the given vector is empty then return true.  Note: The given vector is guaranteed to have unique elements.  For Example: ", "Difficulty": "humaneval"}
{"task_id": "CPP/537", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int odd = 0, even = 0;\n        for (int i : lst1) {\n            if (i % 2 == 1) {\n                odd += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                even += 1;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "canonical_solution": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "func_title": "string exchange(vector<int> lst1,vector<int> lst2)", "desc_en": "In this problem, you will implement a function that takes two vectors of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a vector of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".", "Difficulty": "humaneval"}
{"task_id": "CPP/538", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}", "canonical_solution": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "func_title": "map<char,int> histogram(string test)", "desc_en": "Given a string representing a space separated lowercase letters, return a map of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them. ", "Difficulty": "humaneval"}
{"task_id": "CPP/539", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}", "canonical_solution": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "func_title": "vector<string> reverse_delete(string s,string c)", "desc_en": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a vector containing the result string and \"True\"/\"False\" for the check. Example For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\") For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\") For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")", "Difficulty": "humaneval"}
{"task_id": "CPP/540", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}", "canonical_solution": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "func_title": "vector<string> odd_count(vector<string> lst)", "desc_en": "Given a vector of strings, where each string consists of only digits, return a vector. Each element i of the output should be 'the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input. ", "Difficulty": "humaneval"}
{"task_id": "CPP/541", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}", "canonical_solution": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "func_title": "long long minSubArraySum(vector<long long> nums)", "desc_en": "Given a vector of integers nums, find the minimum sum of any non-empty sub-vector of nums. Example minSubArraySum({2, 3, 4, 1, 2, 4}) == 1 minSubArraySum({-1, -2, -3}) == -6", "Difficulty": "humaneval"}
{"task_id": "CPP/542", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}", "canonical_solution": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "func_title": "int max_fill(vector<vector<int>> grid,int capacity)", "desc_en": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets.  Example 1: Input: grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}} bucket_capacity : 1 Output: 6  Example 2: Input: grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}} bucket_capacity : 2 Output: 5  Example 3: Input: grid : {{0,0,0}, {0,0,0}} bucket_capacity : 5 Output: 0  Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid{:,1}.length <= 10^2 * grid{i}{j} -> 0 | 1 * 1 <= capacity <= 10", "Difficulty": "humaneval"}
{"task_id": "CPP/543", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}", "canonical_solution": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "func_title": "vector<int> sort_array(vector<int> arr)", "desc_en": "In this Kata, you have to sort a vector of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value.  It must be implemented like this:", "Difficulty": "humaneval"}
{"task_id": "CPP/544", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "func_title": "vector<string> select_words(string s,int n)", "desc_en": "Given a string s and a natural number n, you have been tasked to implement a function that returns a vector of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty vector. Note: you may assume the input string contains only letters and spaces.", "Difficulty": "humaneval"}
{"task_id": "CPP/545", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String getClosestVowel(String word) {\n        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}", "canonical_solution": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "func_title": "string get_closest_vowel(string word)", "desc_en": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive).  Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition.  You may assume that the given string contains English letter only. ", "Difficulty": "humaneval"}
{"task_id": "CPP/546", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String matchParens(List<String> lst) {\n        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "canonical_solution": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "func_title": "string match_parens(vector<string> lst)", "desc_en": "You are given a vector of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string \"(())()\" is good, while the string \"())\" is not. Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise. ", "Difficulty": "humaneval"}
{"task_id": "CPP/547", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}", "canonical_solution": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "func_title": "vector<int> maximum(vector<int> arr,int k)", "desc_en": "Given a vector arr of integers and a positive integer k, return a sorted vector of length k with the maximum k numbers in arr.  Example 1:  Input: arr = {-3, -4, 5}, k = 3 Output: {-4, -3, 5}  Example 2:  Input: arr = {4, -4, 4}, k = 2 Output: {4, 4}  Example 3:  Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1 Output: {2}  Note: 1. The length of the vector will be in the range of {1, 1000}. 2. The elements in the vector will be in the range of {-1000, 1000}. 3. 0 <= k <= len(arr)", "Difficulty": "humaneval"}
{"task_id": "CPP/548", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "canonical_solution": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "func_title": "int solutions(vector<int> lst)", "desc_en": "Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.   Examples solution({5, 8, 7, 1}) ==> 12 solution({3, 3, 3, 3, 3}) ==> 9 solution({30, 13, 24, 321}) ==>0", "Difficulty": "humaneval"}
{"task_id": "CPP/549", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int addElements(List<Integer> arr, int k) {\n        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}", "canonical_solution": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "func_title": "int add_elements(vector<int> arr,int k)", "desc_en": "Given a non-empty vector of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.  Example:  Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4 Output: 24 # sum of 21 + 3  Constraints: 1. 1 <= len(arr) <= 100 2. 1 <= k <= len(arr)", "Difficulty": "humaneval"}
{"task_id": "CPP/550", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}", "canonical_solution": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "func_title": "vector<int> get_odd_collatz(int n)", "desc_en": "Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.  Note: 1. Collatz(1) is {1}. 2. returned vector sorted in increasing order. ", "Difficulty": "humaneval"}
{"task_id": "CPP/551", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean validDate(String date) {\n        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}", "canonical_solution": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "func_title": "bool valid_date(string date)", "desc_en": "You have to write a function which validates a given date string and returns true if the date is valid otherwise false. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy ", "Difficulty": "humaneval"}
{"task_id": "CPP/552", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}", "canonical_solution": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "func_title": "vector<string> split_words(string txt)", "desc_en": "Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the alphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25", "Difficulty": "humaneval"}
{"task_id": "CPP/553", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n        List<Integer> sorted_lst = new ArrayList<>(lst);\n        Collections.sort(sorted_lst);\n        if (!lst.equals(sorted_lst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "canonical_solution": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "func_title": "bool is_sorted(vector<int> lst)", "desc_en": "Given a vector of numbers, return whether or not they are sorted in ascending order. If vector has more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers. ", "Difficulty": "humaneval"}
{"task_id": "CPP/554", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "canonical_solution": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "func_title": "string intersection( vector<int> interval1,vector<int> interval2)", "desc_en": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".   {input/output} samples:", "Difficulty": "humaneval"}
{"task_id": "CPP/555", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}", "canonical_solution": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "func_title": "int prod_signs(vector<int> arr)", "desc_en": "You are given a vector arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the vector, represented by 1, -1 or 0. Note: return -32768 for empty arr. ", "Difficulty": "humaneval"}
{"task_id": "CPP/556", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}", "canonical_solution": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "func_title": "vector<int> minPath(vector<vector<int>> grid, int k)", "desc_en": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range {1, N * N} inclusive appears exactly once on the cells of the grid.  You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered vectors of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered vector of the values on the cells that the minimum path go through.  Examples:  Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3 Output: {1, 2, 1}  Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1 Output: {1}", "Difficulty": "humaneval"}
{"task_id": "CPP/557", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}", "canonical_solution": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "func_title": "vector<int> tri(int n)", "desc_en": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence:", "Difficulty": "humaneval"}
{"task_id": "CPP/558", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}", "canonical_solution": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "func_title": "int digits(int n)", "desc_en": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.", "Difficulty": "humaneval"}
{"task_id": "CPP/559", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isNested(String string) {\n        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int i = 0, l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}", "canonical_solution": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_nested(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "func_title": "bool is_nested(string str)", "desc_en": "Create a function that takes a string as input which contains only square brackets. The function should return true if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested. ", "Difficulty": "humaneval"}
{"task_id": "CPP/560", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}", "canonical_solution": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "func_title": "int sum_squares(vector<float> lst)", "desc_en": "You are given a vector of numbers. You need to return the sum of squared numbers in the given vector, round each element in the vector to the upper int(Ceiling) first. Examples: For lst = {1,2,3} the output should be 14 For lst = {1,4,9} the output should be 98 For lst = {1,3,5,7} the output should be 84 For lst = {1.4,4.2,0} the output should be 29 For lst = {-2.4,1,1} the output should be 6  ", "Difficulty": "humaneval"}
{"task_id": "CPP/561", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkIfLastCharIsALetter(String txt) {\n        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 && Character.isLetter(check.charAt(0));\n    }\n}", "canonical_solution": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "func_title": "bool check_if_last_char_is_a_letter(string txt)", "desc_en": "Create a function that returns true if the last character of a given string is an alphabetical character and is not a part of a word, and false otherwise. Note: \"word\" is a group of characters separated by space. ", "Difficulty": "humaneval"}
{"task_id": "CPP/562", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int canArrange(List<Integer> arr) {\n        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}", "canonical_solution": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "func_title": "int can_arrange(vector<int> arr)", "desc_en": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given vector will not contain duplicate values. ", "Difficulty": "humaneval"}
{"task_id": "CPP/563", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}", "canonical_solution": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "func_title": "vector<int> largest_smallest_integers(vector<int> lst)", "desc_en": "Create a function that returns a vector (a, b), where \"a\" is the largest of negative integers, and \"b\" is the smallest of positive integers in a vector. If there is no negative or positive integers, return them as 0. ", "Difficulty": "humaneval"}
{"task_id": "CPP/564", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}", "canonical_solution": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "func_title": "boost::any compare_one(boost::any a,boost::any b)", "desc_en": "Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return \"None\" if the values are equal. Note: If a real number is represented as a string, the floating point might be . or , ", "Difficulty": "humaneval"}
{"task_id": "CPP/565", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}", "canonical_solution": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "func_title": "bool is_equal_to_sum_even(int n)", "desc_en": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers", "Difficulty": "humaneval"}
{"task_id": "CPP/566", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long specialFactorial(int n) {\n        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}", "canonical_solution": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "func_title": "long long special_factorial(int n)", "desc_en": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 ", "Difficulty": "humaneval"}
{"task_id": "CPP/567", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}", "canonical_solution": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "func_title": "string fix_spaces(string text)", "desc_en": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with - ", "Difficulty": "humaneval"}
{"task_id": "CPP/568", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String filenameCheck(String file_name) {\n        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = file_name.split(\"\\\\.\" );\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "canonical_solution": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "func_title": "string file_name_check(string file_name)", "desc_en": "Create a function which takes a string representing a file's name, and returns \"Yes\" if the the file's name is valid, and returns \"No\" otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot \".\" - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}", "Difficulty": "humaneval"}
{"task_id": "CPP/569", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}", "canonical_solution": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "func_title": "int sum_squares(vector<int> lst)", "desc_en": "\" This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.  Examples: For lst = {1,2,3} the output should be 6 For lst = {}  the output should be 0 For lst = {-1,-5,2,-1,-5}  the output should be -126", "Difficulty": "humaneval"}
{"task_id": "CPP/570", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String wordsInSentence(String sentence) {\n        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}", "canonical_solution": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "func_title": "string words_in_sentence(string sentence)", "desc_en": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.  Example 1: Input: sentence = \"This is a test\" Output: \"is\"  Example 2: Input: sentence = \"lets go for swimming\" Output: \"go for\"  Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters", "Difficulty": "humaneval"}
{"task_id": "CPP/571", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator / denom * denom == numerator;\n    }\n}", "canonical_solution": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "func_title": "bool simplify(string x,string n)", "desc_en": "Your task is to implement a function that will simplify the expression x * n. The function returns true if x * n evaluates to a whole number and false otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers.  You can assume that x, and n are valid fractions, and do not have zero as denominator. ", "Difficulty": "humaneval"}
{"task_id": "CPP/572", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}", "canonical_solution": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "func_title": "vector<int> order_by_points(vector<int> nums)", "desc_en": "Write a function which sorts the given vector of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original vector. ", "Difficulty": "humaneval"}
{"task_id": "CPP/573", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "func_title": "int specialFilter(vector<int> nums)", "desc_en": "Write a function that takes a vector of numbers as input and returns the number of elements in the vector that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9). For example: specialFilter({15, -73, 14, -15}) => 1 specialFilter({33, -2, -3, 45, 21, 109}) => 2", "Difficulty": "humaneval"}
{"task_id": "CPP/574", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int getMaxTriples(int n) {\n        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "canonical_solution": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "func_title": "int get_matrix_triples(int n)", "desc_en": "You are given a positive integer n. You have to create an integer vector a of length n. For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1. Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.  Example : Input: n = 5 Output: 1 Explanation: a = {1, 3, 7, 13, 21} The only valid triple is (1, 7, 13).", "Difficulty": "humaneval"}
{"task_id": "CPP/575", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}", "canonical_solution": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "func_title": "vector<string> bf(string planet1,string planet2)", "desc_en": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a vector containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty vector if planet1 or planet2 are not correct planet names.", "Difficulty": "humaneval"}
{"task_id": "CPP/576", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> listSort(List<String> lst) {\n        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}", "canonical_solution": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "func_title": "vector<string> sorted_list_sum(vector<string> lst)", "desc_en": "Write a function that accepts a vector of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted vector with a sorted order, The vector is always a vector of strings and never a vector of numbers, and it may contain duplicates. The order of the vector should be ascending by length of each word, and you should return the vector sorted by that rule. If two words have the same length, sort the vector alphabetically. The function should return a vector of strings in sorted order. You may assume that all words will have the same length. For example: assert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"} assert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}", "Difficulty": "humaneval"}
{"task_id": "CPP/577", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}", "canonical_solution": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "func_title": "int x_or_y(int n,int x,int y)", "desc_en": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise. ", "Difficulty": "humaneval"}
{"task_id": "CPP/578", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doubleTheDifference(List<Object> lst) {\n        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}", "canonical_solution": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "func_title": "long long double_the_difference(vector<float> lst)", "desc_en": "Given a vector of numbers, return the sum of squares of the numbers in the vector that are odd. Ignore numbers that are negative or not integers. ", "Difficulty": "humaneval"}
{"task_id": "CPP/579", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "func_title": "vector<int> compare(vector<int> game,vector<int> guess)", "desc_en": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two vectors of scores and guesses of equal length, where each index shows a match. Return a vector of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.   example: ", "Difficulty": "humaneval"}
{"task_id": "CPP/580", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}", "canonical_solution": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "func_title": "string Strongest_Extension(string class_name,vector<string> extensions)", "desc_en": "You will be given the name of a class (a string) and a vector of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the vector. For example, if you are given \"Slices\" as the class and a vector of the extensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension (its strength is -1). Example: for Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"", "Difficulty": "humaneval"}
{"task_id": "CPP/581", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpatternCheck(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "canonical_solution": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "func_title": "bool cycpattern_check(string a,string b)", "desc_en": "You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word", "Difficulty": "humaneval"}
{"task_id": "CPP/582", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddCount(int num) {\n        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}", "canonical_solution": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "func_title": "vector<int> even_odd_count(int num)", "desc_en": "Given an integer. return a vector that has the number of even and odd digits respectively. ", "Difficulty": "humaneval"}
{"task_id": "CPP/583", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}", "canonical_solution": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "func_title": "string int_to_mini_romank(int number)", "desc_en": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000 ", "Difficulty": "humaneval"}
{"task_id": "CPP/584", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}", "canonical_solution": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "func_title": "bool right_angle_triangle(float a,float b,float c)", "desc_en": "Given the lengths of the three sides of a triangle. Return true if the three sides form a right-angled triangle, false otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.", "Difficulty": "humaneval"}
{"task_id": "CPP/585", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}", "canonical_solution": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "func_title": "string find_max(vector<string> words)", "desc_en": "Write a function that accepts a vector of strings. The vector contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order. ", "Difficulty": "humaneval"}
{"task_id": "CPP/586", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}", "canonical_solution": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "func_title": "vector<int> eat(int number,int need,int remaining)", "desc_en": "You\"re a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return a vector of { total number of eaten carrots after your meals, the number of carrots left after your meals } if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry. ", "Difficulty": "humaneval"}
{"task_id": "CPP/587", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}", "canonical_solution": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "func_title": "int do_algebra(vector<string> operato, vector<int> operand)", "desc_en": "Given two vectors operator, and operand. The first vector has basic algebra operations, and the second vector is a vector of integers. Use the two given vectors to build the algebric expression and return the evaluation of this expression.  The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )  Example: operator{\"+\", \"*\", \"-\"} vector = {2, 3, 4, 5} result = 2 + 3 * 4 - 5 => result = 9  Note: The length of operator vector is equal to the length of operand vector minus one. Operand is a vector of of non-negative integers. Operator vector has at least one operator, and operand vector has at least two operands. ", "Difficulty": "humaneval"}
{"task_id": "CPP/588", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}", "canonical_solution": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "func_title": "string solve(string s)", "desc_en": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.", "Difficulty": "humaneval"}
{"task_id": "CPP/589", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "canonical_solution": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "func_title": "vector<int> generate_integers(int a,int b)", "desc_en": "Given two positive integers a and b, return the even digits between a and b, in ascending order. ", "Difficulty": "humaneval"}
